// Code generated by ent, DO NOT EDIT.

package service

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/pkg/scorer/scorerservice"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldPause holds the string denoting the pause field in the database.
	FieldPause = "pause"
	// FieldHidden holds the string denoting the hidden field in the database.
	FieldHidden = "hidden"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldPointBoost holds the string denoting the point_boost field in the database.
	FieldPointBoost = "point_boost"
	// FieldRoundFrequency holds the string denoting the round_frequency field in the database.
	FieldRoundFrequency = "round_frequency"
	// FieldRoundDelay holds the string denoting the round_delay field in the database.
	FieldRoundDelay = "round_delay"
	// EdgeHostservices holds the string denoting the hostservices edge name in mutations.
	EdgeHostservices = "hostservices"
	// EdgeHostservicereports holds the string denoting the hostservicereports edge name in mutations.
	EdgeHostservicereports = "hostservicereports"
	// Table holds the table name of the service in the database.
	Table = "services"
	// HostservicesTable is the table that holds the hostservices relation/edge.
	HostservicesTable = "host_services"
	// HostservicesInverseTable is the table name for the HostService entity.
	// It exists in this package in order to avoid circular dependency with the "hostservice" package.
	HostservicesInverseTable = "host_services"
	// HostservicesColumn is the table column denoting the hostservices relation/edge.
	HostservicesColumn = "service_id"
	// HostservicereportsTable is the table that holds the hostservicereports relation/edge.
	HostservicereportsTable = "host_service_reports"
	// HostservicereportsInverseTable is the table name for the HostServiceReport entity.
	// It exists in this package in order to avoid circular dependency with the "hostservicereport" package.
	HostservicereportsInverseTable = "host_service_reports"
	// HostservicereportsColumn is the table column denoting the hostservicereports relation/edge.
	HostservicereportsColumn = "service_id"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDisplayName,
	FieldPause,
	FieldHidden,
	FieldCreateTime,
	FieldUpdateTime,
	FieldType,
	FieldWeight,
	FieldPointBoost,
	FieldRoundFrequency,
	FieldRoundDelay,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPause holds the default value on creation for the "pause" field.
	DefaultPause bool
	// DefaultHidden holds the default value on creation for the "hidden" field.
	DefaultHidden bool
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int
	// WeightValidator is a validator for the "weight" field. It is called by the builders before save.
	WeightValidator func(int) error
	// DefaultPointBoost holds the default value on creation for the "point_boost" field.
	DefaultPointBoost int
	// PointBoostValidator is a validator for the "point_boost" field. It is called by the builders before save.
	PointBoostValidator func(int) error
	// DefaultRoundFrequency holds the default value on creation for the "round_frequency" field.
	DefaultRoundFrequency int
	// RoundFrequencyValidator is a validator for the "round_frequency" field. It is called by the builders before save.
	RoundFrequencyValidator func(int) error
	// DefaultRoundDelay holds the default value on creation for the "round_delay" field.
	DefaultRoundDelay int
	// RoundDelayValidator is a validator for the "round_delay" field. It is called by the builders before save.
	RoundDelayValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type scorerservice.Service) error {
	switch _type {
	case "ftp", "ssh", "winrm", "ping", "http", "ldap", "dns", "smb", "imap", "sql", "caldav":
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Service queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByPause orders the results by the pause field.
func ByPause(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPause, opts...).ToFunc()
}

// ByHidden orders the results by the hidden field.
func ByHidden(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHidden, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByPointBoost orders the results by the point_boost field.
func ByPointBoost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointBoost, opts...).ToFunc()
}

// ByRoundFrequency orders the results by the round_frequency field.
func ByRoundFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundFrequency, opts...).ToFunc()
}

// ByRoundDelay orders the results by the round_delay field.
func ByRoundDelay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundDelay, opts...).ToFunc()
}

// ByHostservicesCount orders the results by hostservices count.
func ByHostservicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostservicesStep(), opts...)
	}
}

// ByHostservices orders the results by hostservices terms.
func ByHostservices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostservicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHostservicereportsCount orders the results by hostservicereports count.
func ByHostservicereportsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHostservicereportsStep(), opts...)
	}
}

// ByHostservicereports orders the results by hostservicereports terms.
func ByHostservicereports(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostservicereportsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHostservicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostservicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostservicesTable, HostservicesColumn),
	)
}
func newHostservicereportsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostservicereportsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HostservicereportsTable, HostservicereportsColumn),
	)
}
