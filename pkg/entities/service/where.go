// Code generated by ent, DO NOT EDIT.

package service

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/pkg/scorer/scorerservice"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDisplayName, v))
}

// Pause applies equality check predicate on the "pause" field. It's identical to PauseEQ.
func Pause(v bool) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPause, v))
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldHidden, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdateTime, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldWeight, v))
}

// PointBoost applies equality check predicate on the "point_boost" field. It's identical to PointBoostEQ.
func PointBoost(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPointBoost, v))
}

// RoundFrequency applies equality check predicate on the "round_frequency" field. It's identical to RoundFrequencyEQ.
func RoundFrequency(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldRoundFrequency, v))
}

// RoundDelay applies equality check predicate on the "round_delay" field. It's identical to RoundDelayEQ.
func RoundDelay(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldRoundDelay, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDisplayName, v))
}

// PauseEQ applies the EQ predicate on the "pause" field.
func PauseEQ(v bool) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPause, v))
}

// PauseNEQ applies the NEQ predicate on the "pause" field.
func PauseNEQ(v bool) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldPause, v))
}

// PauseIsNil applies the IsNil predicate on the "pause" field.
func PauseIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldPause))
}

// PauseNotNil applies the NotNil predicate on the "pause" field.
func PauseNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldPause))
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldHidden, v))
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldHidden, v))
}

// HiddenIsNil applies the IsNil predicate on the "hidden" field.
func HiddenIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldHidden))
}

// HiddenNotNil applies the NotNil predicate on the "hidden" field.
func HiddenNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldHidden))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldUpdateTime))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v scorerservice.Service) predicate.Service {
	vc := v
	return predicate.Service(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v scorerservice.Service) predicate.Service {
	vc := v
	return predicate.Service(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...scorerservice.Service) predicate.Service {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Service(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...scorerservice.Service) predicate.Service {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Service(sql.FieldNotIn(FieldType, v...))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldWeight, v))
}

// PointBoostEQ applies the EQ predicate on the "point_boost" field.
func PointBoostEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPointBoost, v))
}

// PointBoostNEQ applies the NEQ predicate on the "point_boost" field.
func PointBoostNEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldPointBoost, v))
}

// PointBoostIn applies the In predicate on the "point_boost" field.
func PointBoostIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldPointBoost, vs...))
}

// PointBoostNotIn applies the NotIn predicate on the "point_boost" field.
func PointBoostNotIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldPointBoost, vs...))
}

// PointBoostGT applies the GT predicate on the "point_boost" field.
func PointBoostGT(v int) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldPointBoost, v))
}

// PointBoostGTE applies the GTE predicate on the "point_boost" field.
func PointBoostGTE(v int) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldPointBoost, v))
}

// PointBoostLT applies the LT predicate on the "point_boost" field.
func PointBoostLT(v int) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldPointBoost, v))
}

// PointBoostLTE applies the LTE predicate on the "point_boost" field.
func PointBoostLTE(v int) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldPointBoost, v))
}

// RoundFrequencyEQ applies the EQ predicate on the "round_frequency" field.
func RoundFrequencyEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldRoundFrequency, v))
}

// RoundFrequencyNEQ applies the NEQ predicate on the "round_frequency" field.
func RoundFrequencyNEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldRoundFrequency, v))
}

// RoundFrequencyIn applies the In predicate on the "round_frequency" field.
func RoundFrequencyIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldRoundFrequency, vs...))
}

// RoundFrequencyNotIn applies the NotIn predicate on the "round_frequency" field.
func RoundFrequencyNotIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldRoundFrequency, vs...))
}

// RoundFrequencyGT applies the GT predicate on the "round_frequency" field.
func RoundFrequencyGT(v int) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldRoundFrequency, v))
}

// RoundFrequencyGTE applies the GTE predicate on the "round_frequency" field.
func RoundFrequencyGTE(v int) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldRoundFrequency, v))
}

// RoundFrequencyLT applies the LT predicate on the "round_frequency" field.
func RoundFrequencyLT(v int) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldRoundFrequency, v))
}

// RoundFrequencyLTE applies the LTE predicate on the "round_frequency" field.
func RoundFrequencyLTE(v int) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldRoundFrequency, v))
}

// RoundDelayEQ applies the EQ predicate on the "round_delay" field.
func RoundDelayEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldRoundDelay, v))
}

// RoundDelayNEQ applies the NEQ predicate on the "round_delay" field.
func RoundDelayNEQ(v int) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldRoundDelay, v))
}

// RoundDelayIn applies the In predicate on the "round_delay" field.
func RoundDelayIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldRoundDelay, vs...))
}

// RoundDelayNotIn applies the NotIn predicate on the "round_delay" field.
func RoundDelayNotIn(vs ...int) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldRoundDelay, vs...))
}

// RoundDelayGT applies the GT predicate on the "round_delay" field.
func RoundDelayGT(v int) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldRoundDelay, v))
}

// RoundDelayGTE applies the GTE predicate on the "round_delay" field.
func RoundDelayGTE(v int) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldRoundDelay, v))
}

// RoundDelayLT applies the LT predicate on the "round_delay" field.
func RoundDelayLT(v int) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldRoundDelay, v))
}

// RoundDelayLTE applies the LTE predicate on the "round_delay" field.
func RoundDelayLTE(v int) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldRoundDelay, v))
}

// HasHostservices applies the HasEdge predicate on the "hostservices" edge.
func HasHostservices() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HostservicesTable, HostservicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostservicesWith applies the HasEdge predicate on the "hostservices" edge with a given conditions (other predicates).
func HasHostservicesWith(preds ...predicate.HostService) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newHostservicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHostservicereports applies the HasEdge predicate on the "hostservicereports" edge.
func HasHostservicereports() predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HostservicereportsTable, HostservicereportsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostservicereportsWith applies the HasEdge predicate on the "hostservicereports" edge with a given conditions (other predicates).
func HasHostservicereportsWith(preds ...predicate.HostServiceReport) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		step := newHostservicereportsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		p(s.Not())
	})
}
