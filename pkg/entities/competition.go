// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/competition"
)

// Competition is the model entity for the Competition schema.
type Competition struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Pause holds the value of the "pause" field.
	Pause bool `json:"pause,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// RoundDuration holds the value of the "round_duration" field.
	RoundDuration int `json:"round_duration,omitempty"`
	// Most recently completed round
	CurrentRoundID *string `json:"current_round_id,omitempty"`
	// ViewableToPublic holds the value of the "viewable_to_public" field.
	ViewableToPublic *bool `json:"viewable_to_public,omitempty"`
	// IgnoreIncompleteRoundInScoring holds the value of the "ignore_incomplete_round_in_scoring" field.
	IgnoreIncompleteRoundInScoring bool `json:"ignore_incomplete_round_in_scoring,omitempty"`
	// ToBeStartedAt holds the value of the "to_be_started_at" field.
	ToBeStartedAt *time.Time `json:"to_be_started_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt   *time.Time `json:"finished_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Competition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case competition.FieldPause, competition.FieldViewableToPublic, competition.FieldIgnoreIncompleteRoundInScoring:
			values[i] = new(sql.NullBool)
		case competition.FieldRoundDuration:
			values[i] = new(sql.NullInt64)
		case competition.FieldID, competition.FieldName, competition.FieldDisplayName, competition.FieldCurrentRoundID:
			values[i] = new(sql.NullString)
		case competition.FieldCreateTime, competition.FieldUpdateTime, competition.FieldToBeStartedAt, competition.FieldStartedAt, competition.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Competition fields.
func (c *Competition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case competition.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case competition.FieldPause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause", values[i])
			} else if value.Valid {
				c.Pause = value.Bool
			}
		case competition.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case competition.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case competition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case competition.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				c.DisplayName = value.String
			}
		case competition.FieldRoundDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_duration", values[i])
			} else if value.Valid {
				c.RoundDuration = int(value.Int64)
			}
		case competition.FieldCurrentRoundID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_round_id", values[i])
			} else if value.Valid {
				c.CurrentRoundID = new(string)
				*c.CurrentRoundID = value.String
			}
		case competition.FieldViewableToPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field viewable_to_public", values[i])
			} else if value.Valid {
				c.ViewableToPublic = new(bool)
				*c.ViewableToPublic = value.Bool
			}
		case competition.FieldIgnoreIncompleteRoundInScoring:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ignore_incomplete_round_in_scoring", values[i])
			} else if value.Valid {
				c.IgnoreIncompleteRoundInScoring = value.Bool
			}
		case competition.FieldToBeStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field to_be_started_at", values[i])
			} else if value.Valid {
				c.ToBeStartedAt = new(time.Time)
				*c.ToBeStartedAt = value.Time
			}
		case competition.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				c.StartedAt = new(time.Time)
				*c.StartedAt = value.Time
			}
		case competition.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				c.FinishedAt = new(time.Time)
				*c.FinishedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Competition.
// This includes values selected through modifiers, order, etc.
func (c *Competition) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Competition.
// Note that you need to call Competition.Unwrap() before calling this method if this Competition
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Competition) Update() *CompetitionUpdateOne {
	return NewCompetitionClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Competition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Competition) Unwrap() *Competition {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entities: Competition is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Competition) String() string {
	var builder strings.Builder
	builder.WriteString("Competition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("pause=")
	builder.WriteString(fmt.Sprintf("%v", c.Pause))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(c.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("round_duration=")
	builder.WriteString(fmt.Sprintf("%v", c.RoundDuration))
	builder.WriteString(", ")
	if v := c.CurrentRoundID; v != nil {
		builder.WriteString("current_round_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ViewableToPublic; v != nil {
		builder.WriteString("viewable_to_public=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("ignore_incomplete_round_in_scoring=")
	builder.WriteString(fmt.Sprintf("%v", c.IgnoreIncompleteRoundInScoring))
	builder.WriteString(", ")
	if v := c.ToBeStartedAt; v != nil {
		builder.WriteString("to_be_started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.FinishedAt; v != nil {
		builder.WriteString("finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Competitions is a parsable slice of Competition.
type Competitions []*Competition
