// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/service"
	"github.com/ScoreTrak/ScoreTrak/pkg/scorer/scorerservice"
)

// ServiceCreate is the builder for creating a Service entity.
type ServiceCreate struct {
	config
	mutation *ServiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (sc *ServiceCreate) SetName(s string) *ServiceCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDisplayName sets the "display_name" field.
func (sc *ServiceCreate) SetDisplayName(s string) *ServiceCreate {
	sc.mutation.SetDisplayName(s)
	return sc
}

// SetPause sets the "pause" field.
func (sc *ServiceCreate) SetPause(b bool) *ServiceCreate {
	sc.mutation.SetPause(b)
	return sc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (sc *ServiceCreate) SetNillablePause(b *bool) *ServiceCreate {
	if b != nil {
		sc.SetPause(*b)
	}
	return sc
}

// SetHidden sets the "hidden" field.
func (sc *ServiceCreate) SetHidden(b bool) *ServiceCreate {
	sc.mutation.SetHidden(b)
	return sc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableHidden(b *bool) *ServiceCreate {
	if b != nil {
		sc.SetHidden(*b)
	}
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *ServiceCreate) SetCreateTime(t time.Time) *ServiceCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableCreateTime(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *ServiceCreate) SetUpdateTime(t time.Time) *ServiceCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableUpdateTime(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *ServiceCreate) SetType(s scorerservice.Service) *ServiceCreate {
	sc.mutation.SetType(s)
	return sc
}

// SetWeight sets the "weight" field.
func (sc *ServiceCreate) SetWeight(i int) *ServiceCreate {
	sc.mutation.SetWeight(i)
	return sc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableWeight(i *int) *ServiceCreate {
	if i != nil {
		sc.SetWeight(*i)
	}
	return sc
}

// SetPointBoost sets the "point_boost" field.
func (sc *ServiceCreate) SetPointBoost(i int) *ServiceCreate {
	sc.mutation.SetPointBoost(i)
	return sc
}

// SetNillablePointBoost sets the "point_boost" field if the given value is not nil.
func (sc *ServiceCreate) SetNillablePointBoost(i *int) *ServiceCreate {
	if i != nil {
		sc.SetPointBoost(*i)
	}
	return sc
}

// SetRoundFrequency sets the "round_frequency" field.
func (sc *ServiceCreate) SetRoundFrequency(i int) *ServiceCreate {
	sc.mutation.SetRoundFrequency(i)
	return sc
}

// SetNillableRoundFrequency sets the "round_frequency" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableRoundFrequency(i *int) *ServiceCreate {
	if i != nil {
		sc.SetRoundFrequency(*i)
	}
	return sc
}

// SetRoundDelay sets the "round_delay" field.
func (sc *ServiceCreate) SetRoundDelay(i int) *ServiceCreate {
	sc.mutation.SetRoundDelay(i)
	return sc
}

// SetNillableRoundDelay sets the "round_delay" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableRoundDelay(i *int) *ServiceCreate {
	if i != nil {
		sc.SetRoundDelay(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ServiceCreate) SetID(s string) *ServiceCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableID(s *string) *ServiceCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (sc *ServiceCreate) AddHostserviceIDs(ids ...string) *ServiceCreate {
	sc.mutation.AddHostserviceIDs(ids...)
	return sc
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (sc *ServiceCreate) AddHostservices(h ...*HostService) *ServiceCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return sc.AddHostserviceIDs(ids...)
}

// AddHostservicereportIDs adds the "hostservicereports" edge to the HostServiceReport entity by IDs.
func (sc *ServiceCreate) AddHostservicereportIDs(ids ...string) *ServiceCreate {
	sc.mutation.AddHostservicereportIDs(ids...)
	return sc
}

// AddHostservicereports adds the "hostservicereports" edges to the HostServiceReport entity.
func (sc *ServiceCreate) AddHostservicereports(h ...*HostServiceReport) *ServiceCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return sc.AddHostservicereportIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (sc *ServiceCreate) Mutation() *ServiceMutation {
	return sc.mutation
}

// Save creates the Service in the database.
func (sc *ServiceCreate) Save(ctx context.Context) (*Service, error) {
	sc.defaults()
	return withHooks[*Service, ServiceMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServiceCreate) SaveX(ctx context.Context) *Service {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServiceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServiceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServiceCreate) defaults() {
	if _, ok := sc.mutation.Pause(); !ok {
		v := service.DefaultPause
		sc.mutation.SetPause(v)
	}
	if _, ok := sc.mutation.Hidden(); !ok {
		v := service.DefaultHidden
		sc.mutation.SetHidden(v)
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := service.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := service.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.Weight(); !ok {
		v := service.DefaultWeight
		sc.mutation.SetWeight(v)
	}
	if _, ok := sc.mutation.PointBoost(); !ok {
		v := service.DefaultPointBoost
		sc.mutation.SetPointBoost(v)
	}
	if _, ok := sc.mutation.RoundFrequency(); !ok {
		v := service.DefaultRoundFrequency
		sc.mutation.SetRoundFrequency(v)
	}
	if _, ok := sc.mutation.RoundDelay(); !ok {
		v := service.DefaultRoundDelay
		sc.mutation.SetRoundDelay(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := service.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServiceCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "Service.name"`)}
	}
	if _, ok := sc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`entities: missing required field "Service.display_name"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`entities: missing required field "Service.type"`)}
	}
	if v, ok := sc.mutation.GetType(); ok {
		if err := service.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`entities: validator failed for field "Service.type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`entities: missing required field "Service.weight"`)}
	}
	if v, ok := sc.mutation.Weight(); ok {
		if err := service.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`entities: validator failed for field "Service.weight": %w`, err)}
		}
	}
	if _, ok := sc.mutation.PointBoost(); !ok {
		return &ValidationError{Name: "point_boost", err: errors.New(`entities: missing required field "Service.point_boost"`)}
	}
	if v, ok := sc.mutation.PointBoost(); ok {
		if err := service.PointBoostValidator(v); err != nil {
			return &ValidationError{Name: "point_boost", err: fmt.Errorf(`entities: validator failed for field "Service.point_boost": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RoundFrequency(); !ok {
		return &ValidationError{Name: "round_frequency", err: errors.New(`entities: missing required field "Service.round_frequency"`)}
	}
	if v, ok := sc.mutation.RoundFrequency(); ok {
		if err := service.RoundFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "round_frequency", err: fmt.Errorf(`entities: validator failed for field "Service.round_frequency": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RoundDelay(); !ok {
		return &ValidationError{Name: "round_delay", err: errors.New(`entities: missing required field "Service.round_delay"`)}
	}
	if v, ok := sc.mutation.RoundDelay(); ok {
		if err := service.RoundDelayValidator(v); err != nil {
			return &ValidationError{Name: "round_delay", err: fmt.Errorf(`entities: validator failed for field "Service.round_delay": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := service.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Service.id": %w`, err)}
		}
	}
	return nil
}

func (sc *ServiceCreate) sqlSave(ctx context.Context) (*Service, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Service.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServiceCreate) createSpec() (*Service, *sqlgraph.CreateSpec) {
	var (
		_node = &Service{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(service.Table, sqlgraph.NewFieldSpec(service.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.DisplayName(); ok {
		_spec.SetField(service.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := sc.mutation.Pause(); ok {
		_spec.SetField(service.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := sc.mutation.Hidden(); ok {
		_spec.SetField(service.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(service.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(service.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Weight(); ok {
		_spec.SetField(service.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := sc.mutation.PointBoost(); ok {
		_spec.SetField(service.FieldPointBoost, field.TypeInt, value)
		_node.PointBoost = value
	}
	if value, ok := sc.mutation.RoundFrequency(); ok {
		_spec.SetField(service.FieldRoundFrequency, field.TypeInt, value)
		_node.RoundFrequency = value
	}
	if value, ok := sc.mutation.RoundDelay(); ok {
		_spec.SetField(service.FieldRoundDelay, field.TypeInt, value)
		_node.RoundDelay = value
	}
	if nodes := sc.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.HostservicesTable,
			Columns: []string{service.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.HostservicereportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.HostservicereportsTable,
			Columns: []string{service.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Service.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (sc *ServiceCreate) OnConflict(opts ...sql.ConflictOption) *ServiceUpsertOne {
	sc.conflict = opts
	return &ServiceUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ServiceCreate) OnConflictColumns(columns ...string) *ServiceUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ServiceUpsertOne{
		create: sc,
	}
}

type (
	// ServiceUpsertOne is the builder for "upsert"-ing
	//  one Service node.
	ServiceUpsertOne struct {
		create *ServiceCreate
	}

	// ServiceUpsert is the "OnConflict" setter.
	ServiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ServiceUpsert) SetName(v string) *ServiceUpsert {
	u.Set(service.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateName() *ServiceUpsert {
	u.SetExcluded(service.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *ServiceUpsert) SetDisplayName(v string) *ServiceUpsert {
	u.Set(service.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateDisplayName() *ServiceUpsert {
	u.SetExcluded(service.FieldDisplayName)
	return u
}

// SetPause sets the "pause" field.
func (u *ServiceUpsert) SetPause(v bool) *ServiceUpsert {
	u.Set(service.FieldPause, v)
	return u
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *ServiceUpsert) UpdatePause() *ServiceUpsert {
	u.SetExcluded(service.FieldPause)
	return u
}

// ClearPause clears the value of the "pause" field.
func (u *ServiceUpsert) ClearPause() *ServiceUpsert {
	u.SetNull(service.FieldPause)
	return u
}

// SetHidden sets the "hidden" field.
func (u *ServiceUpsert) SetHidden(v bool) *ServiceUpsert {
	u.Set(service.FieldHidden, v)
	return u
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateHidden() *ServiceUpsert {
	u.SetExcluded(service.FieldHidden)
	return u
}

// ClearHidden clears the value of the "hidden" field.
func (u *ServiceUpsert) ClearHidden() *ServiceUpsert {
	u.SetNull(service.FieldHidden)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ServiceUpsert) SetUpdateTime(v time.Time) *ServiceUpsert {
	u.Set(service.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateUpdateTime() *ServiceUpsert {
	u.SetExcluded(service.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *ServiceUpsert) ClearUpdateTime() *ServiceUpsert {
	u.SetNull(service.FieldUpdateTime)
	return u
}

// SetType sets the "type" field.
func (u *ServiceUpsert) SetType(v scorerservice.Service) *ServiceUpsert {
	u.Set(service.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateType() *ServiceUpsert {
	u.SetExcluded(service.FieldType)
	return u
}

// SetWeight sets the "weight" field.
func (u *ServiceUpsert) SetWeight(v int) *ServiceUpsert {
	u.Set(service.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateWeight() *ServiceUpsert {
	u.SetExcluded(service.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *ServiceUpsert) AddWeight(v int) *ServiceUpsert {
	u.Add(service.FieldWeight, v)
	return u
}

// SetPointBoost sets the "point_boost" field.
func (u *ServiceUpsert) SetPointBoost(v int) *ServiceUpsert {
	u.Set(service.FieldPointBoost, v)
	return u
}

// UpdatePointBoost sets the "point_boost" field to the value that was provided on create.
func (u *ServiceUpsert) UpdatePointBoost() *ServiceUpsert {
	u.SetExcluded(service.FieldPointBoost)
	return u
}

// AddPointBoost adds v to the "point_boost" field.
func (u *ServiceUpsert) AddPointBoost(v int) *ServiceUpsert {
	u.Add(service.FieldPointBoost, v)
	return u
}

// SetRoundFrequency sets the "round_frequency" field.
func (u *ServiceUpsert) SetRoundFrequency(v int) *ServiceUpsert {
	u.Set(service.FieldRoundFrequency, v)
	return u
}

// UpdateRoundFrequency sets the "round_frequency" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateRoundFrequency() *ServiceUpsert {
	u.SetExcluded(service.FieldRoundFrequency)
	return u
}

// AddRoundFrequency adds v to the "round_frequency" field.
func (u *ServiceUpsert) AddRoundFrequency(v int) *ServiceUpsert {
	u.Add(service.FieldRoundFrequency, v)
	return u
}

// SetRoundDelay sets the "round_delay" field.
func (u *ServiceUpsert) SetRoundDelay(v int) *ServiceUpsert {
	u.Set(service.FieldRoundDelay, v)
	return u
}

// UpdateRoundDelay sets the "round_delay" field to the value that was provided on create.
func (u *ServiceUpsert) UpdateRoundDelay() *ServiceUpsert {
	u.SetExcluded(service.FieldRoundDelay)
	return u
}

// AddRoundDelay adds v to the "round_delay" field.
func (u *ServiceUpsert) AddRoundDelay(v int) *ServiceUpsert {
	u.Add(service.FieldRoundDelay, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(service.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceUpsertOne) UpdateNewValues() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(service.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(service.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServiceUpsertOne) Ignore() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceUpsertOne) DoNothing() *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceCreate.OnConflict
// documentation for more info.
func (u *ServiceUpsertOne) Update(set func(*ServiceUpsert)) *ServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ServiceUpsertOne) SetName(v string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateName() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ServiceUpsertOne) SetDisplayName(v string) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateDisplayName() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateDisplayName()
	})
}

// SetPause sets the "pause" field.
func (u *ServiceUpsertOne) SetPause(v bool) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdatePause() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *ServiceUpsertOne) ClearPause() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearPause()
	})
}

// SetHidden sets the "hidden" field.
func (u *ServiceUpsertOne) SetHidden(v bool) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateHidden() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateHidden()
	})
}

// ClearHidden clears the value of the "hidden" field.
func (u *ServiceUpsertOne) ClearHidden() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearHidden()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ServiceUpsertOne) SetUpdateTime(v time.Time) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateUpdateTime() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *ServiceUpsertOne) ClearUpdateTime() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *ServiceUpsertOne) SetType(v scorerservice.Service) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateType() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *ServiceUpsertOne) SetWeight(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *ServiceUpsertOne) AddWeight(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateWeight() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateWeight()
	})
}

// SetPointBoost sets the "point_boost" field.
func (u *ServiceUpsertOne) SetPointBoost(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetPointBoost(v)
	})
}

// AddPointBoost adds v to the "point_boost" field.
func (u *ServiceUpsertOne) AddPointBoost(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.AddPointBoost(v)
	})
}

// UpdatePointBoost sets the "point_boost" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdatePointBoost() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdatePointBoost()
	})
}

// SetRoundFrequency sets the "round_frequency" field.
func (u *ServiceUpsertOne) SetRoundFrequency(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetRoundFrequency(v)
	})
}

// AddRoundFrequency adds v to the "round_frequency" field.
func (u *ServiceUpsertOne) AddRoundFrequency(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.AddRoundFrequency(v)
	})
}

// UpdateRoundFrequency sets the "round_frequency" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateRoundFrequency() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateRoundFrequency()
	})
}

// SetRoundDelay sets the "round_delay" field.
func (u *ServiceUpsertOne) SetRoundDelay(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.SetRoundDelay(v)
	})
}

// AddRoundDelay adds v to the "round_delay" field.
func (u *ServiceUpsertOne) AddRoundDelay(v int) *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.AddRoundDelay(v)
	})
}

// UpdateRoundDelay sets the "round_delay" field to the value that was provided on create.
func (u *ServiceUpsertOne) UpdateRoundDelay() *ServiceUpsertOne {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateRoundDelay()
	})
}

// Exec executes the query.
func (u *ServiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ServiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServiceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: ServiceUpsertOne.ID is not supported by MySQL driver. Use ServiceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServiceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServiceCreateBulk is the builder for creating many Service entities in bulk.
type ServiceCreateBulk struct {
	config
	builders []*ServiceCreate
	conflict []sql.ConflictOption
}

// Save creates the Service entities in the database.
func (scb *ServiceCreateBulk) Save(ctx context.Context) ([]*Service, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Service, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServiceCreateBulk) SaveX(ctx context.Context) []*Service {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServiceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Service.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServiceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (scb *ServiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServiceUpsertBulk {
	scb.conflict = opts
	return &ServiceUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ServiceCreateBulk) OnConflictColumns(columns ...string) *ServiceUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ServiceUpsertBulk{
		create: scb,
	}
}

// ServiceUpsertBulk is the builder for "upsert"-ing
// a bulk of Service nodes.
type ServiceUpsertBulk struct {
	create *ServiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(service.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServiceUpsertBulk) UpdateNewValues() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(service.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(service.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Service.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServiceUpsertBulk) Ignore() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServiceUpsertBulk) DoNothing() *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServiceCreateBulk.OnConflict
// documentation for more info.
func (u *ServiceUpsertBulk) Update(set func(*ServiceUpsert)) *ServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ServiceUpsertBulk) SetName(v string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateName() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *ServiceUpsertBulk) SetDisplayName(v string) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateDisplayName() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateDisplayName()
	})
}

// SetPause sets the "pause" field.
func (u *ServiceUpsertBulk) SetPause(v bool) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdatePause() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *ServiceUpsertBulk) ClearPause() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearPause()
	})
}

// SetHidden sets the "hidden" field.
func (u *ServiceUpsertBulk) SetHidden(v bool) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateHidden() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateHidden()
	})
}

// ClearHidden clears the value of the "hidden" field.
func (u *ServiceUpsertBulk) ClearHidden() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearHidden()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *ServiceUpsertBulk) SetUpdateTime(v time.Time) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateUpdateTime() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *ServiceUpsertBulk) ClearUpdateTime() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.ClearUpdateTime()
	})
}

// SetType sets the "type" field.
func (u *ServiceUpsertBulk) SetType(v scorerservice.Service) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateType() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateType()
	})
}

// SetWeight sets the "weight" field.
func (u *ServiceUpsertBulk) SetWeight(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *ServiceUpsertBulk) AddWeight(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateWeight() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateWeight()
	})
}

// SetPointBoost sets the "point_boost" field.
func (u *ServiceUpsertBulk) SetPointBoost(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetPointBoost(v)
	})
}

// AddPointBoost adds v to the "point_boost" field.
func (u *ServiceUpsertBulk) AddPointBoost(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.AddPointBoost(v)
	})
}

// UpdatePointBoost sets the "point_boost" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdatePointBoost() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdatePointBoost()
	})
}

// SetRoundFrequency sets the "round_frequency" field.
func (u *ServiceUpsertBulk) SetRoundFrequency(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetRoundFrequency(v)
	})
}

// AddRoundFrequency adds v to the "round_frequency" field.
func (u *ServiceUpsertBulk) AddRoundFrequency(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.AddRoundFrequency(v)
	})
}

// UpdateRoundFrequency sets the "round_frequency" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateRoundFrequency() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateRoundFrequency()
	})
}

// SetRoundDelay sets the "round_delay" field.
func (u *ServiceUpsertBulk) SetRoundDelay(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.SetRoundDelay(v)
	})
}

// AddRoundDelay adds v to the "round_delay" field.
func (u *ServiceUpsertBulk) AddRoundDelay(v int) *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.AddRoundDelay(v)
	})
}

// UpdateRoundDelay sets the "round_delay" field to the value that was provided on create.
func (u *ServiceUpsertBulk) UpdateRoundDelay() *ServiceUpsertBulk {
	return u.Update(func(s *ServiceUpsert) {
		s.UpdateRoundDelay()
	})
}

// Exec executes the query.
func (u *ServiceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the ServiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for ServiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
