// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/predicate"
)

// HostServiceReportDelete is the builder for deleting a HostServiceReport entity.
type HostServiceReportDelete struct {
	config
	hooks    []Hook
	mutation *HostServiceReportMutation
}

// Where appends a list predicates to the HostServiceReportDelete builder.
func (hsrd *HostServiceReportDelete) Where(ps ...predicate.HostServiceReport) *HostServiceReportDelete {
	hsrd.mutation.Where(ps...)
	return hsrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hsrd *HostServiceReportDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HostServiceReportMutation](ctx, hsrd.sqlExec, hsrd.mutation, hsrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hsrd *HostServiceReportDelete) ExecX(ctx context.Context) int {
	n, err := hsrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hsrd *HostServiceReportDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hostservicereport.Table, sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString))
	if ps := hsrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hsrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hsrd.mutation.done = true
	return affected, err
}

// HostServiceReportDeleteOne is the builder for deleting a single HostServiceReport entity.
type HostServiceReportDeleteOne struct {
	hsrd *HostServiceReportDelete
}

// Where appends a list predicates to the HostServiceReportDelete builder.
func (hsrdo *HostServiceReportDeleteOne) Where(ps ...predicate.HostServiceReport) *HostServiceReportDeleteOne {
	hsrdo.hsrd.mutation.Where(ps...)
	return hsrdo
}

// Exec executes the deletion query.
func (hsrdo *HostServiceReportDeleteOne) Exec(ctx context.Context) error {
	n, err := hsrdo.hsrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hostservicereport.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hsrdo *HostServiceReportDeleteOne) ExecX(ctx context.Context) {
	if err := hsrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
