// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "api-tokens"
				if l := len("api-tokens"); len(elem) >= l && elem[0:l] == "api-tokens" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListApiTokenRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateApiTokenRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteApiTokenRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadApiTokenRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateApiTokenRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
				}
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hecks"
					if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListCheckRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateCheckRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteCheckRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadCheckRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateCheckRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservice"
								if l := len("hostservice"); len(elem) >= l && elem[0:l] == "hostservice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadCheckHostserviceRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'r': // Prefix: "round"
								if l := len("round"); len(elem) >= l && elem[0:l] == "round" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadCheckRoundRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'o': // Prefix: "ompetitions"
					if l := len("ompetitions"); len(elem) >= l && elem[0:l] == "ompetitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleCreateCompetitionRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadCompetitionRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateCompetitionRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}
					}
				}
			case 'h': // Prefix: "host"
				if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-service"
					if l := len("-service"); len(elem) >= l && elem[0:l] == "-service" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-reports"
						if l := len("-reports"); len(elem) >= l && elem[0:l] == "-reports" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListHostServiceReportRequest([0]string{}, w, r)
							case "POST":
								s.handleCreateHostServiceReportRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteHostServiceReportRequest([1]string{
										args[0],
									}, w, r)
								case "GET":
									s.handleReadHostServiceReportRequest([1]string{
										args[0],
									}, w, r)
								case "PATCH":
									s.handleUpdateHostServiceReportRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'h': // Prefix: "hostservice"
									if l := len("hostservice"); len(elem) >= l && elem[0:l] == "hostservice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadHostServiceReportHostserviceRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "service"
									if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadHostServiceReportServiceRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 't': // Prefix: "team"
									if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleReadHostServiceReportTeamRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "report"
										if l := len("report"); len(elem) >= l && elem[0:l] == "report" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadHostServiceReportTeamreportRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleListHostServiceRequest([0]string{}, w, r)
							case "POST":
								s.handleCreateHostServiceRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteHostServiceRequest([1]string{
										args[0],
									}, w, r)
								case "GET":
									s.handleReadHostServiceRequest([1]string{
										args[0],
									}, w, r)
								case "PATCH":
									s.handleUpdateHostServiceRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "checks"
									if l := len("checks"); len(elem) >= l && elem[0:l] == "checks" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListHostServiceChecksRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'h': // Prefix: "host"
									if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleReadHostServiceHostRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 's': // Prefix: "servicereport"
										if l := len("servicereport"); len(elem) >= l && elem[0:l] == "servicereport" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadHostServiceHostservicereportRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'p': // Prefix: "properties"
									if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListHostServicePropertiesRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "service"
									if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadHostServiceServiceRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 't': // Prefix: "team"
									if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadHostServiceTeamRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListHostRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateHostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteHostRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadHostRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateHostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservices"
								if l := len("hostservices"); len(elem) >= l && elem[0:l] == "hostservices" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListHostHostservicesRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostTeamRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			case 'p': // Prefix: "properties"
				if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListPropertyRequest([0]string{}, w, r)
					case "POST":
						s.handleCreatePropertyRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeletePropertyRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadPropertyRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdatePropertyRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/hostservice"
						if l := len("/hostservice"); len(elem) >= l && elem[0:l] == "/hostservice" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleReadPropertyHostserviceRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'r': // Prefix: "rounds"
				if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListRoundRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateRoundRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "latest"
						if l := len("latest"); len(elem) >= l && elem[0:l] == "latest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleReadRoundLatestRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/checks"
							if l := len("/checks"); len(elem) >= l && elem[0:l] == "/checks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListRoundChecksLatestRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteRoundRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadRoundRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateRoundRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/checks"
						if l := len("/checks"); len(elem) >= l && elem[0:l] == "/checks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleListRoundChecksRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 's': // Prefix: "services"
				if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListServiceRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateServiceRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteServiceRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadServiceRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateServiceRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/hostservice"
						if l := len("/hostservice"); len(elem) >= l && elem[0:l] == "/hostservice" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "reports"
							if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListServiceHostservicereportsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListServiceHostservicesRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 't': // Prefix: "team"
				if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-reports"
					if l := len("-reports"); len(elem) >= l && elem[0:l] == "-reports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListTeamReportRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateTeamReportRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteTeamReportRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadTeamReportRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateTeamReportRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservicereports"
								if l := len("hostservicereports"); len(elem) >= l && elem[0:l] == "hostservicereports" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListTeamReportHostservicereportsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadTeamReportTeamRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListTeamRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateTeamRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteTeamRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadTeamRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateTeamRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hosts"
								if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListTeamHostsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "ervice"
									if l := len("ervice"); len(elem) >= l && elem[0:l] == "ervice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "reports"
										if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListTeamHostservicereportsRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListTeamHostservicesRequest([1]string{
													args[0],
												}, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 't': // Prefix: "teamreport"
								if l := len("teamreport"); len(elem) >= l && elem[0:l] == "teamreport" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadTeamTeamreportRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "api-tokens"
				if l := len("api-tokens"); len(elem) >= l && elem[0:l] == "api-tokens" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListApiToken"
						r.operationID = "listApiToken"
						r.pathPattern = "/api-tokens"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateApiToken"
						r.operationID = "createApiToken"
						r.pathPattern = "/api-tokens"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteApiToken
							r.name = "DeleteApiToken"
							r.operationID = "deleteApiToken"
							r.pathPattern = "/api-tokens/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: ReadApiToken
							r.name = "ReadApiToken"
							r.operationID = "readApiToken"
							r.pathPattern = "/api-tokens/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							// Leaf: UpdateApiToken
							r.name = "UpdateApiToken"
							r.operationID = "updateApiToken"
							r.pathPattern = "/api-tokens/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hecks"
					if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListCheck"
							r.operationID = "listCheck"
							r.pathPattern = "/checks"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateCheck"
							r.operationID = "createCheck"
							r.pathPattern = "/checks"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteCheck"
								r.operationID = "deleteCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadCheck"
								r.operationID = "readCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateCheck"
								r.operationID = "updateCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservice"
								if l := len("hostservice"); len(elem) >= l && elem[0:l] == "hostservice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadCheckHostservice
										r.name = "ReadCheckHostservice"
										r.operationID = "readCheckHostservice"
										r.pathPattern = "/checks/{id}/hostservice"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'r': // Prefix: "round"
								if l := len("round"); len(elem) >= l && elem[0:l] == "round" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadCheckRound
										r.name = "ReadCheckRound"
										r.operationID = "readCheckRound"
										r.pathPattern = "/checks/{id}/round"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'o': // Prefix: "ompetitions"
					if l := len("ompetitions"); len(elem) >= l && elem[0:l] == "ompetitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "CreateCompetition"
							r.operationID = "createCompetition"
							r.pathPattern = "/competitions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadCompetition
								r.name = "ReadCompetition"
								r.operationID = "readCompetition"
								r.pathPattern = "/competitions/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								// Leaf: UpdateCompetition
								r.name = "UpdateCompetition"
								r.operationID = "updateCompetition"
								r.pathPattern = "/competitions/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'h': // Prefix: "host"
				if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-service"
					if l := len("-service"); len(elem) >= l && elem[0:l] == "-service" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '-': // Prefix: "-reports"
						if l := len("-reports"); len(elem) >= l && elem[0:l] == "-reports" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListHostServiceReport"
								r.operationID = "listHostServiceReport"
								r.pathPattern = "/host-service-reports"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateHostServiceReport"
								r.operationID = "createHostServiceReport"
								r.pathPattern = "/host-service-reports"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteHostServiceReport"
									r.operationID = "deleteHostServiceReport"
									r.pathPattern = "/host-service-reports/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadHostServiceReport"
									r.operationID = "readHostServiceReport"
									r.pathPattern = "/host-service-reports/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateHostServiceReport"
									r.operationID = "updateHostServiceReport"
									r.pathPattern = "/host-service-reports/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'h': // Prefix: "hostservice"
									if l := len("hostservice"); len(elem) >= l && elem[0:l] == "hostservice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadHostServiceReportHostservice
											r.name = "ReadHostServiceReportHostservice"
											r.operationID = "readHostServiceReportHostservice"
											r.pathPattern = "/host-service-reports/{id}/hostservice"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "service"
									if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadHostServiceReportService
											r.name = "ReadHostServiceReportService"
											r.operationID = "readHostServiceReportService"
											r.pathPattern = "/host-service-reports/{id}/service"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 't': // Prefix: "team"
									if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ReadHostServiceReportTeam"
											r.operationID = "readHostServiceReportTeam"
											r.pathPattern = "/host-service-reports/{id}/team"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'r': // Prefix: "report"
										if l := len("report"); len(elem) >= l && elem[0:l] == "report" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadHostServiceReportTeamreport
												r.name = "ReadHostServiceReportTeamreport"
												r.operationID = "readHostServiceReportTeamreport"
												r.pathPattern = "/host-service-reports/{id}/teamreport"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ListHostService"
								r.operationID = "listHostService"
								r.pathPattern = "/host-services"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = "CreateHostService"
								r.operationID = "createHostService"
								r.pathPattern = "/host-services"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = "DeleteHostService"
									r.operationID = "deleteHostService"
									r.pathPattern = "/host-services/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "GET":
									r.name = "ReadHostService"
									r.operationID = "readHostService"
									r.pathPattern = "/host-services/{id}"
									r.args = args
									r.count = 1
									return r, true
								case "PATCH":
									r.name = "UpdateHostService"
									r.operationID = "updateHostService"
									r.pathPattern = "/host-services/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "checks"
									if l := len("checks"); len(elem) >= l && elem[0:l] == "checks" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListHostServiceChecks
											r.name = "ListHostServiceChecks"
											r.operationID = "listHostServiceChecks"
											r.pathPattern = "/host-services/{id}/checks"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'h': // Prefix: "host"
									if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ReadHostServiceHost"
											r.operationID = "readHostServiceHost"
											r.pathPattern = "/host-services/{id}/host"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 's': // Prefix: "servicereport"
										if l := len("servicereport"); len(elem) >= l && elem[0:l] == "servicereport" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadHostServiceHostservicereport
												r.name = "ReadHostServiceHostservicereport"
												r.operationID = "readHostServiceHostservicereport"
												r.pathPattern = "/host-services/{id}/hostservicereport"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'p': // Prefix: "properties"
									if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListHostServiceProperties
											r.name = "ListHostServiceProperties"
											r.operationID = "listHostServiceProperties"
											r.pathPattern = "/host-services/{id}/properties"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "service"
									if l := len("service"); len(elem) >= l && elem[0:l] == "service" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadHostServiceService
											r.name = "ReadHostServiceService"
											r.operationID = "readHostServiceService"
											r.pathPattern = "/host-services/{id}/service"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 't': // Prefix: "team"
									if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadHostServiceTeam
											r.name = "ReadHostServiceTeam"
											r.operationID = "readHostServiceTeam"
											r.pathPattern = "/host-services/{id}/team"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListHost"
							r.operationID = "listHost"
							r.pathPattern = "/hosts"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateHost"
							r.operationID = "createHost"
							r.pathPattern = "/hosts"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteHost"
								r.operationID = "deleteHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadHost"
								r.operationID = "readHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateHost"
								r.operationID = "updateHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservices"
								if l := len("hostservices"); len(elem) >= l && elem[0:l] == "hostservices" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListHostHostservices
										r.name = "ListHostHostservices"
										r.operationID = "listHostHostservices"
										r.pathPattern = "/hosts/{id}/hostservices"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostTeam
										r.name = "ReadHostTeam"
										r.operationID = "readHostTeam"
										r.pathPattern = "/hosts/{id}/team"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 'p': // Prefix: "properties"
				if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListProperty"
						r.operationID = "listProperty"
						r.pathPattern = "/properties"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateProperty"
						r.operationID = "createProperty"
						r.pathPattern = "/properties"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteProperty"
							r.operationID = "deleteProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadProperty"
							r.operationID = "readProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateProperty"
							r.operationID = "updateProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/hostservice"
						if l := len("/hostservice"); len(elem) >= l && elem[0:l] == "/hostservice" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ReadPropertyHostservice
								r.name = "ReadPropertyHostservice"
								r.operationID = "readPropertyHostservice"
								r.pathPattern = "/properties/{id}/hostservice"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'r': // Prefix: "rounds"
				if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListRound"
						r.operationID = "listRound"
						r.pathPattern = "/rounds"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateRound"
						r.operationID = "createRound"
						r.pathPattern = "/rounds"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "latest"
						if l := len("latest"); len(elem) >= l && elem[0:l] == "latest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "ReadRoundLatest"
								r.operationID = "readRoundLatest"
								r.pathPattern = "/rounds/latest"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/checks"
							if l := len("/checks"); len(elem) >= l && elem[0:l] == "/checks" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListRoundChecksLatest
									r.name = "ListRoundChecksLatest"
									r.operationID = "listRoundChecksLatest"
									r.pathPattern = "/rounds/latest/checks"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteRound"
							r.operationID = "deleteRound"
							r.pathPattern = "/rounds/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadRound"
							r.operationID = "readRound"
							r.pathPattern = "/rounds/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateRound"
							r.operationID = "updateRound"
							r.pathPattern = "/rounds/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/checks"
						if l := len("/checks"); len(elem) >= l && elem[0:l] == "/checks" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ListRoundChecks
								r.name = "ListRoundChecks"
								r.operationID = "listRoundChecks"
								r.pathPattern = "/rounds/{id}/checks"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 's': // Prefix: "services"
				if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListService"
						r.operationID = "listService"
						r.pathPattern = "/services"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateService"
						r.operationID = "createService"
						r.pathPattern = "/services"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteService"
							r.operationID = "deleteService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadService"
							r.operationID = "readService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateService"
							r.operationID = "updateService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/hostservice"
						if l := len("/hostservice"); len(elem) >= l && elem[0:l] == "/hostservice" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'r': // Prefix: "reports"
							if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListServiceHostservicereports
									r.name = "ListServiceHostservicereports"
									r.operationID = "listServiceHostservicereports"
									r.pathPattern = "/services/{id}/hostservicereports"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "s"
							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListServiceHostservices
									r.name = "ListServiceHostservices"
									r.operationID = "listServiceHostservices"
									r.pathPattern = "/services/{id}/hostservices"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 't': // Prefix: "team"
				if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-reports"
					if l := len("-reports"); len(elem) >= l && elem[0:l] == "-reports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListTeamReport"
							r.operationID = "listTeamReport"
							r.pathPattern = "/team-reports"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateTeamReport"
							r.operationID = "createTeamReport"
							r.pathPattern = "/team-reports"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteTeamReport"
								r.operationID = "deleteTeamReport"
								r.pathPattern = "/team-reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadTeamReport"
								r.operationID = "readTeamReport"
								r.pathPattern = "/team-reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateTeamReport"
								r.operationID = "updateTeamReport"
								r.pathPattern = "/team-reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hostservicereports"
								if l := len("hostservicereports"); len(elem) >= l && elem[0:l] == "hostservicereports" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListTeamReportHostservicereports
										r.name = "ListTeamReportHostservicereports"
										r.operationID = "listTeamReportHostservicereports"
										r.pathPattern = "/team-reports/{id}/hostservicereports"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadTeamReportTeam
										r.name = "ReadTeamReportTeam"
										r.operationID = "readTeamReportTeam"
										r.pathPattern = "/team-reports/{id}/team"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListTeam"
							r.operationID = "listTeam"
							r.pathPattern = "/teams"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateTeam"
							r.operationID = "createTeam"
							r.pathPattern = "/teams"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteTeam"
								r.operationID = "deleteTeam"
								r.pathPattern = "/teams/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadTeam"
								r.operationID = "readTeam"
								r.pathPattern = "/teams/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateTeam"
								r.operationID = "updateTeam"
								r.pathPattern = "/teams/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hosts"
								if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "ListTeamHosts"
										r.operationID = "listTeamHosts"
										r.pathPattern = "/teams/{id}/hosts"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'e': // Prefix: "ervice"
									if l := len("ervice"); len(elem) >= l && elem[0:l] == "ervice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'r': // Prefix: "reports"
										if l := len("reports"); len(elem) >= l && elem[0:l] == "reports" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListTeamHostservicereports
												r.name = "ListTeamHostservicereports"
												r.operationID = "listTeamHostservicereports"
												r.pathPattern = "/teams/{id}/hostservicereports"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListTeamHostservices
												r.name = "ListTeamHostservices"
												r.operationID = "listTeamHostservices"
												r.pathPattern = "/teams/{id}/hostservices"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							case 't': // Prefix: "teamreport"
								if l := len("teamreport"); len(elem) >= l && elem[0:l] == "teamreport" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadTeamTeamreport
										r.name = "ReadTeamTeamreport"
										r.operationID = "readTeamTeamreport"
										r.pathPattern = "/teams/{id}/teamreport"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
