// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CheckRoundRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CheckRoundReadStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *CreateRoundReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateRoundReqStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *CreateServiceReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateServiceReqType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *HostServiceReportServiceRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s HostServiceReportServiceReadType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *HostServiceServiceRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s HostServiceServiceReadType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s ListApiTokenOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListCheckOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostHostservicesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostServiceChecksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostServiceOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostServicePropertiesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListHostServiceReportOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListPropertyOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListRoundChecksLatestOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListRoundChecksOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListRoundOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ListServiceHostservicereportsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListServiceHostservicesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListServiceOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range s {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ListTeamHostsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTeamHostservicereportsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTeamHostservicesOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTeamOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTeamReportHostservicereportsOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}
func (s ListTeamReportOKApplicationJSON) Validate() error {
	if s == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *RoundCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RoundCreateStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *RoundList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RoundListStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *RoundRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RoundReadStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *RoundUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s RoundUpdateStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ServiceCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ServiceCreateType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ServiceList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ServiceListType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ServiceRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ServiceReadType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *ServiceUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ServiceUpdateType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *UpdateRoundReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UpdateRoundReqStatus) Validate() error {
	switch s {
	case "started":
		return nil
	case "ongoing":
		return nil
	case "finished":
		return nil
	case "incomplete":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *UpdateServiceReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UpdateServiceReqType) Validate() error {
	switch s {
	case "ftp":
		return nil
	case "ssh":
		return nil
	case "winrm":
		return nil
	case "ping":
		return nil
	case "http":
		return nil
	case "ldap":
		return nil
	case "dns":
		return nil
	case "smb":
		return nil
	case "imap":
		return nil
	case "sql":
		return nil
	case "caldav":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
