// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/ScoreTrak/ScoreTrak/pkg/entities"

func NewApiTokenCreate(e *entities.ApiToken) *ApiTokenCreate {
	if e == nil {
		return nil
	}
	var ret ApiTokenCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Token = e.Token
	ret.RoleID = e.RoleID
	ret.ExpiredAt = e.ExpiredAt
	ret.UserID = e.UserID
	return &ret
}

func NewApiTokenCreates(es []*entities.ApiToken) []ApiTokenCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiTokenCreate, len(es))
	for i, e := range es {
		r[i] = NewApiTokenCreate(e).Elem()
	}
	return r
}

func (at *ApiTokenCreate) Elem() ApiTokenCreate {
	if at == nil {
		return ApiTokenCreate{}
	}
	return *at
}

func NewApiTokenList(e *entities.ApiToken) *ApiTokenList {
	if e == nil {
		return nil
	}
	var ret ApiTokenList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Token = e.Token
	ret.RoleID = e.RoleID
	ret.ExpiredAt = e.ExpiredAt
	ret.UserID = e.UserID
	return &ret
}

func NewApiTokenLists(es []*entities.ApiToken) []ApiTokenList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiTokenList, len(es))
	for i, e := range es {
		r[i] = NewApiTokenList(e).Elem()
	}
	return r
}

func (at *ApiTokenList) Elem() ApiTokenList {
	if at == nil {
		return ApiTokenList{}
	}
	return *at
}

func NewApiTokenRead(e *entities.ApiToken) *ApiTokenRead {
	if e == nil {
		return nil
	}
	var ret ApiTokenRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Token = e.Token
	ret.RoleID = e.RoleID
	ret.ExpiredAt = e.ExpiredAt
	ret.UserID = e.UserID
	return &ret
}

func NewApiTokenReads(es []*entities.ApiToken) []ApiTokenRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiTokenRead, len(es))
	for i, e := range es {
		r[i] = NewApiTokenRead(e).Elem()
	}
	return r
}

func (at *ApiTokenRead) Elem() ApiTokenRead {
	if at == nil {
		return ApiTokenRead{}
	}
	return *at
}

func NewApiTokenUpdate(e *entities.ApiToken) *ApiTokenUpdate {
	if e == nil {
		return nil
	}
	var ret ApiTokenUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Token = e.Token
	ret.RoleID = e.RoleID
	ret.ExpiredAt = e.ExpiredAt
	ret.UserID = e.UserID
	return &ret
}

func NewApiTokenUpdates(es []*entities.ApiToken) []ApiTokenUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ApiTokenUpdate, len(es))
	for i, e := range es {
		r[i] = NewApiTokenUpdate(e).Elem()
	}
	return r
}

func (at *ApiTokenUpdate) Elem() ApiTokenUpdate {
	if at == nil {
		return ApiTokenUpdate{}
	}
	return *at
}

func NewCheckCreate(e *entities.Check) *CheckCreate {
	if e == nil {
		return nil
	}
	var ret CheckCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewCheckCreates(es []*entities.Check) []CheckCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckCreate, len(es))
	for i, e := range es {
		r[i] = NewCheckCreate(e).Elem()
	}
	return r
}

func (c *CheckCreate) Elem() CheckCreate {
	if c == nil {
		return CheckCreate{}
	}
	return *c
}

func NewCheckList(e *entities.Check) *CheckList {
	if e == nil {
		return nil
	}
	var ret CheckList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewCheckLists(es []*entities.Check) []CheckList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckList, len(es))
	for i, e := range es {
		r[i] = NewCheckList(e).Elem()
	}
	return r
}

func (c *CheckList) Elem() CheckList {
	if c == nil {
		return CheckList{}
	}
	return *c
}

func NewCheckRead(e *entities.Check) *CheckRead {
	if e == nil {
		return nil
	}
	var ret CheckRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewCheckReads(es []*entities.Check) []CheckRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckRead, len(es))
	for i, e := range es {
		r[i] = NewCheckRead(e).Elem()
	}
	return r
}

func (c *CheckRead) Elem() CheckRead {
	if c == nil {
		return CheckRead{}
	}
	return *c
}

func NewCheckUpdate(e *entities.Check) *CheckUpdate {
	if e == nil {
		return nil
	}
	var ret CheckUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewCheckUpdates(es []*entities.Check) []CheckUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckUpdate, len(es))
	for i, e := range es {
		r[i] = NewCheckUpdate(e).Elem()
	}
	return r
}

func (c *CheckUpdate) Elem() CheckUpdate {
	if c == nil {
		return CheckUpdate{}
	}
	return *c
}

func NewCheckHostserviceRead(e *entities.HostService) *CheckHostserviceRead {
	if e == nil {
		return nil
	}
	var ret CheckHostserviceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewCheckHostserviceReads(es []*entities.HostService) []CheckHostserviceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckHostserviceRead, len(es))
	for i, e := range es {
		r[i] = NewCheckHostserviceRead(e).Elem()
	}
	return r
}

func (hs *CheckHostserviceRead) Elem() CheckHostserviceRead {
	if hs == nil {
		return CheckHostserviceRead{}
	}
	return *hs
}

func NewCheckRoundRead(e *entities.Round) *CheckRoundRead {
	if e == nil {
		return nil
	}
	var ret CheckRoundRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.RoundNumber = e.RoundNumber
	ret.NumOfIntendedChecks = NewOptInt(e.NumOfIntendedChecks)
	ret.Status = CheckRoundReadStatus(e.Status)
	ret.StartedAt = e.StartedAt
	ret.FinishedAt = NewOptDateTime(e.FinishedAt)
	return &ret
}

func NewCheckRoundReads(es []*entities.Round) []CheckRoundRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CheckRoundRead, len(es))
	for i, e := range es {
		r[i] = NewCheckRoundRead(e).Elem()
	}
	return r
}

func (r *CheckRoundRead) Elem() CheckRoundRead {
	if r == nil {
		return CheckRoundRead{}
	}
	return *r
}

func NewCompetitionCreate(e *entities.Competition) *CompetitionCreate {
	if e == nil {
		return nil
	}
	var ret CompetitionCreate
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.RoundDuration = NewOptInt(e.RoundDuration)
	ret.CurrentRoundID = OptString{}
	if e.CurrentRoundID != nil {
		ret.CurrentRoundID.SetTo(*e.CurrentRoundID)
	}
	ret.ViewableToPublic = OptBool{}
	if e.ViewableToPublic != nil {
		ret.ViewableToPublic.SetTo(*e.ViewableToPublic)
	}
	ret.IgnoreIncompleteRoundInScoring = NewOptBool(e.IgnoreIncompleteRoundInScoring)
	ret.ToBeStartedAt = OptDateTime{}
	if e.ToBeStartedAt != nil {
		ret.ToBeStartedAt.SetTo(*e.ToBeStartedAt)
	}
	ret.StartedAt = OptDateTime{}
	if e.StartedAt != nil {
		ret.StartedAt.SetTo(*e.StartedAt)
	}
	ret.FinishedAt = OptDateTime{}
	if e.FinishedAt != nil {
		ret.FinishedAt.SetTo(*e.FinishedAt)
	}
	return &ret
}

func NewCompetitionCreates(es []*entities.Competition) []CompetitionCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CompetitionCreate, len(es))
	for i, e := range es {
		r[i] = NewCompetitionCreate(e).Elem()
	}
	return r
}

func (c *CompetitionCreate) Elem() CompetitionCreate {
	if c == nil {
		return CompetitionCreate{}
	}
	return *c
}

func NewCompetitionRead(e *entities.Competition) *CompetitionRead {
	if e == nil {
		return nil
	}
	var ret CompetitionRead
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.RoundDuration = NewOptInt(e.RoundDuration)
	ret.CurrentRoundID = OptString{}
	if e.CurrentRoundID != nil {
		ret.CurrentRoundID.SetTo(*e.CurrentRoundID)
	}
	ret.ViewableToPublic = OptBool{}
	if e.ViewableToPublic != nil {
		ret.ViewableToPublic.SetTo(*e.ViewableToPublic)
	}
	ret.IgnoreIncompleteRoundInScoring = NewOptBool(e.IgnoreIncompleteRoundInScoring)
	ret.ToBeStartedAt = OptDateTime{}
	if e.ToBeStartedAt != nil {
		ret.ToBeStartedAt.SetTo(*e.ToBeStartedAt)
	}
	ret.StartedAt = OptDateTime{}
	if e.StartedAt != nil {
		ret.StartedAt.SetTo(*e.StartedAt)
	}
	ret.FinishedAt = OptDateTime{}
	if e.FinishedAt != nil {
		ret.FinishedAt.SetTo(*e.FinishedAt)
	}
	return &ret
}

func NewCompetitionReads(es []*entities.Competition) []CompetitionRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CompetitionRead, len(es))
	for i, e := range es {
		r[i] = NewCompetitionRead(e).Elem()
	}
	return r
}

func (c *CompetitionRead) Elem() CompetitionRead {
	if c == nil {
		return CompetitionRead{}
	}
	return *c
}

func NewCompetitionUpdate(e *entities.Competition) *CompetitionUpdate {
	if e == nil {
		return nil
	}
	var ret CompetitionUpdate
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.RoundDuration = NewOptInt(e.RoundDuration)
	ret.CurrentRoundID = OptString{}
	if e.CurrentRoundID != nil {
		ret.CurrentRoundID.SetTo(*e.CurrentRoundID)
	}
	ret.ViewableToPublic = OptBool{}
	if e.ViewableToPublic != nil {
		ret.ViewableToPublic.SetTo(*e.ViewableToPublic)
	}
	ret.IgnoreIncompleteRoundInScoring = NewOptBool(e.IgnoreIncompleteRoundInScoring)
	ret.ToBeStartedAt = OptDateTime{}
	if e.ToBeStartedAt != nil {
		ret.ToBeStartedAt.SetTo(*e.ToBeStartedAt)
	}
	ret.StartedAt = OptDateTime{}
	if e.StartedAt != nil {
		ret.StartedAt.SetTo(*e.StartedAt)
	}
	ret.FinishedAt = OptDateTime{}
	if e.FinishedAt != nil {
		ret.FinishedAt.SetTo(*e.FinishedAt)
	}
	return &ret
}

func NewCompetitionUpdates(es []*entities.Competition) []CompetitionUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CompetitionUpdate, len(es))
	for i, e := range es {
		r[i] = NewCompetitionUpdate(e).Elem()
	}
	return r
}

func (c *CompetitionUpdate) Elem() CompetitionUpdate {
	if c == nil {
		return CompetitionUpdate{}
	}
	return *c
}

func NewHostCreate(e *entities.Host) *HostCreate {
	if e == nil {
		return nil
	}
	var ret HostCreate
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostCreates(es []*entities.Host) []HostCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostCreate, len(es))
	for i, e := range es {
		r[i] = NewHostCreate(e).Elem()
	}
	return r
}

func (h *HostCreate) Elem() HostCreate {
	if h == nil {
		return HostCreate{}
	}
	return *h
}

func NewHostList(e *entities.Host) *HostList {
	if e == nil {
		return nil
	}
	var ret HostList
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostLists(es []*entities.Host) []HostList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostList, len(es))
	for i, e := range es {
		r[i] = NewHostList(e).Elem()
	}
	return r
}

func (h *HostList) Elem() HostList {
	if h == nil {
		return HostList{}
	}
	return *h
}

func NewHostRead(e *entities.Host) *HostRead {
	if e == nil {
		return nil
	}
	var ret HostRead
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostReads(es []*entities.Host) []HostRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostRead, len(es))
	for i, e := range es {
		r[i] = NewHostRead(e).Elem()
	}
	return r
}

func (h *HostRead) Elem() HostRead {
	if h == nil {
		return HostRead{}
	}
	return *h
}

func NewHostServiceCreate(e *entities.HostService) *HostServiceCreate {
	if e == nil {
		return nil
	}
	var ret HostServiceCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceCreates(es []*entities.HostService) []HostServiceCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceCreate, len(es))
	for i, e := range es {
		r[i] = NewHostServiceCreate(e).Elem()
	}
	return r
}

func (hs *HostServiceCreate) Elem() HostServiceCreate {
	if hs == nil {
		return HostServiceCreate{}
	}
	return *hs
}

func NewHostServiceList(e *entities.HostService) *HostServiceList {
	if e == nil {
		return nil
	}
	var ret HostServiceList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceLists(es []*entities.HostService) []HostServiceList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceList, len(es))
	for i, e := range es {
		r[i] = NewHostServiceList(e).Elem()
	}
	return r
}

func (hs *HostServiceList) Elem() HostServiceList {
	if hs == nil {
		return HostServiceList{}
	}
	return *hs
}

func NewHostServiceRead(e *entities.HostService) *HostServiceRead {
	if e == nil {
		return nil
	}
	var ret HostServiceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceReads(es []*entities.HostService) []HostServiceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceRead(e).Elem()
	}
	return r
}

func (hs *HostServiceRead) Elem() HostServiceRead {
	if hs == nil {
		return HostServiceRead{}
	}
	return *hs
}

func NewHostServiceReportCreate(e *entities.HostServiceReport) *HostServiceReportCreate {
	if e == nil {
		return nil
	}
	var ret HostServiceReportCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewHostServiceReportCreates(es []*entities.HostServiceReport) []HostServiceReportCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportCreate, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportCreate(e).Elem()
	}
	return r
}

func (hsr *HostServiceReportCreate) Elem() HostServiceReportCreate {
	if hsr == nil {
		return HostServiceReportCreate{}
	}
	return *hsr
}

func NewHostServiceReportList(e *entities.HostServiceReport) *HostServiceReportList {
	if e == nil {
		return nil
	}
	var ret HostServiceReportList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewHostServiceReportLists(es []*entities.HostServiceReport) []HostServiceReportList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportList, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportList(e).Elem()
	}
	return r
}

func (hsr *HostServiceReportList) Elem() HostServiceReportList {
	if hsr == nil {
		return HostServiceReportList{}
	}
	return *hsr
}

func NewHostServiceReportRead(e *entities.HostServiceReport) *HostServiceReportRead {
	if e == nil {
		return nil
	}
	var ret HostServiceReportRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewHostServiceReportReads(es []*entities.HostServiceReport) []HostServiceReportRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportRead(e).Elem()
	}
	return r
}

func (hsr *HostServiceReportRead) Elem() HostServiceReportRead {
	if hsr == nil {
		return HostServiceReportRead{}
	}
	return *hsr
}

func NewHostServiceReportUpdate(e *entities.HostServiceReport) *HostServiceReportUpdate {
	if e == nil {
		return nil
	}
	var ret HostServiceReportUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewHostServiceReportUpdates(es []*entities.HostServiceReport) []HostServiceReportUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportUpdate, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportUpdate(e).Elem()
	}
	return r
}

func (hsr *HostServiceReportUpdate) Elem() HostServiceReportUpdate {
	if hsr == nil {
		return HostServiceReportUpdate{}
	}
	return *hsr
}

func NewHostServiceReportHostserviceRead(e *entities.HostService) *HostServiceReportHostserviceRead {
	if e == nil {
		return nil
	}
	var ret HostServiceReportHostserviceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceReportHostserviceReads(es []*entities.HostService) []HostServiceReportHostserviceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportHostserviceRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportHostserviceRead(e).Elem()
	}
	return r
}

func (hs *HostServiceReportHostserviceRead) Elem() HostServiceReportHostserviceRead {
	if hs == nil {
		return HostServiceReportHostserviceRead{}
	}
	return *hs
}

func NewHostServiceReportServiceRead(e *entities.Service) *HostServiceReportServiceRead {
	if e == nil {
		return nil
	}
	var ret HostServiceReportServiceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = HostServiceReportServiceReadType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewHostServiceReportServiceReads(es []*entities.Service) []HostServiceReportServiceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportServiceRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportServiceRead(e).Elem()
	}
	return r
}

func (s *HostServiceReportServiceRead) Elem() HostServiceReportServiceRead {
	if s == nil {
		return HostServiceReportServiceRead{}
	}
	return *s
}

func NewHostServiceReportTeamRead(e *entities.Team) *HostServiceReportTeamRead {
	if e == nil {
		return nil
	}
	var ret HostServiceReportTeamRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewHostServiceReportTeamReads(es []*entities.Team) []HostServiceReportTeamRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportTeamRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportTeamRead(e).Elem()
	}
	return r
}

func (t *HostServiceReportTeamRead) Elem() HostServiceReportTeamRead {
	if t == nil {
		return HostServiceReportTeamRead{}
	}
	return *t
}

func NewHostServiceReportTeamreportRead(e *entities.TeamReport) *HostServiceReportTeamreportRead {
	if e == nil {
		return nil
	}
	var ret HostServiceReportTeamreportRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceReportTeamreportReads(es []*entities.TeamReport) []HostServiceReportTeamreportRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceReportTeamreportRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceReportTeamreportRead(e).Elem()
	}
	return r
}

func (tr *HostServiceReportTeamreportRead) Elem() HostServiceReportTeamreportRead {
	if tr == nil {
		return HostServiceReportTeamreportRead{}
	}
	return *tr
}

func NewHostServiceUpdate(e *entities.HostService) *HostServiceUpdate {
	if e == nil {
		return nil
	}
	var ret HostServiceUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceUpdates(es []*entities.HostService) []HostServiceUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceUpdate, len(es))
	for i, e := range es {
		r[i] = NewHostServiceUpdate(e).Elem()
	}
	return r
}

func (hs *HostServiceUpdate) Elem() HostServiceUpdate {
	if hs == nil {
		return HostServiceUpdate{}
	}
	return *hs
}

func NewHostServiceChecksList(e *entities.Check) *HostServiceChecksList {
	if e == nil {
		return nil
	}
	var ret HostServiceChecksList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewHostServiceChecksLists(es []*entities.Check) []HostServiceChecksList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceChecksList, len(es))
	for i, e := range es {
		r[i] = NewHostServiceChecksList(e).Elem()
	}
	return r
}

func (c *HostServiceChecksList) Elem() HostServiceChecksList {
	if c == nil {
		return HostServiceChecksList{}
	}
	return *c
}

func NewHostServiceHostRead(e *entities.Host) *HostServiceHostRead {
	if e == nil {
		return nil
	}
	var ret HostServiceHostRead
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostServiceHostReads(es []*entities.Host) []HostServiceHostRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceHostRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceHostRead(e).Elem()
	}
	return r
}

func (h *HostServiceHostRead) Elem() HostServiceHostRead {
	if h == nil {
		return HostServiceHostRead{}
	}
	return *h
}

func NewHostServiceHostservicereportRead(e *entities.HostServiceReport) *HostServiceHostservicereportRead {
	if e == nil {
		return nil
	}
	var ret HostServiceHostservicereportRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewHostServiceHostservicereportReads(es []*entities.HostServiceReport) []HostServiceHostservicereportRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceHostservicereportRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceHostservicereportRead(e).Elem()
	}
	return r
}

func (hsr *HostServiceHostservicereportRead) Elem() HostServiceHostservicereportRead {
	if hsr == nil {
		return HostServiceHostservicereportRead{}
	}
	return *hsr
}

func NewHostServicePropertiesList(e *entities.Property) *HostServicePropertiesList {
	if e == nil {
		return nil
	}
	var ret HostServicePropertiesList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Key = e.Key
	ret.Value = e.Value
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewHostServicePropertiesLists(es []*entities.Property) []HostServicePropertiesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServicePropertiesList, len(es))
	for i, e := range es {
		r[i] = NewHostServicePropertiesList(e).Elem()
	}
	return r
}

func (pr *HostServicePropertiesList) Elem() HostServicePropertiesList {
	if pr == nil {
		return HostServicePropertiesList{}
	}
	return *pr
}

func NewHostServiceServiceRead(e *entities.Service) *HostServiceServiceRead {
	if e == nil {
		return nil
	}
	var ret HostServiceServiceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = HostServiceServiceReadType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewHostServiceServiceReads(es []*entities.Service) []HostServiceServiceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceServiceRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceServiceRead(e).Elem()
	}
	return r
}

func (s *HostServiceServiceRead) Elem() HostServiceServiceRead {
	if s == nil {
		return HostServiceServiceRead{}
	}
	return *s
}

func NewHostServiceTeamRead(e *entities.Team) *HostServiceTeamRead {
	if e == nil {
		return nil
	}
	var ret HostServiceTeamRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewHostServiceTeamReads(es []*entities.Team) []HostServiceTeamRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostServiceTeamRead, len(es))
	for i, e := range es {
		r[i] = NewHostServiceTeamRead(e).Elem()
	}
	return r
}

func (t *HostServiceTeamRead) Elem() HostServiceTeamRead {
	if t == nil {
		return HostServiceTeamRead{}
	}
	return *t
}

func NewHostUpdate(e *entities.Host) *HostUpdate {
	if e == nil {
		return nil
	}
	var ret HostUpdate
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostUpdates(es []*entities.Host) []HostUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostUpdate, len(es))
	for i, e := range es {
		r[i] = NewHostUpdate(e).Elem()
	}
	return r
}

func (h *HostUpdate) Elem() HostUpdate {
	if h == nil {
		return HostUpdate{}
	}
	return *h
}

func NewHostHostservicesList(e *entities.HostService) *HostHostservicesList {
	if e == nil {
		return nil
	}
	var ret HostHostservicesList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewHostHostservicesLists(es []*entities.HostService) []HostHostservicesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostHostservicesList, len(es))
	for i, e := range es {
		r[i] = NewHostHostservicesList(e).Elem()
	}
	return r
}

func (hs *HostHostservicesList) Elem() HostHostservicesList {
	if hs == nil {
		return HostHostservicesList{}
	}
	return *hs
}

func NewHostTeamRead(e *entities.Team) *HostTeamRead {
	if e == nil {
		return nil
	}
	var ret HostTeamRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewHostTeamReads(es []*entities.Team) []HostTeamRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]HostTeamRead, len(es))
	for i, e := range es {
		r[i] = NewHostTeamRead(e).Elem()
	}
	return r
}

func (t *HostTeamRead) Elem() HostTeamRead {
	if t == nil {
		return HostTeamRead{}
	}
	return *t
}

func NewPropertyCreate(e *entities.Property) *PropertyCreate {
	if e == nil {
		return nil
	}
	var ret PropertyCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Key = e.Key
	ret.Value = e.Value
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewPropertyCreates(es []*entities.Property) []PropertyCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PropertyCreate, len(es))
	for i, e := range es {
		r[i] = NewPropertyCreate(e).Elem()
	}
	return r
}

func (pr *PropertyCreate) Elem() PropertyCreate {
	if pr == nil {
		return PropertyCreate{}
	}
	return *pr
}

func NewPropertyList(e *entities.Property) *PropertyList {
	if e == nil {
		return nil
	}
	var ret PropertyList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Key = e.Key
	ret.Value = e.Value
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewPropertyLists(es []*entities.Property) []PropertyList {
	if len(es) == 0 {
		return nil
	}
	r := make([]PropertyList, len(es))
	for i, e := range es {
		r[i] = NewPropertyList(e).Elem()
	}
	return r
}

func (pr *PropertyList) Elem() PropertyList {
	if pr == nil {
		return PropertyList{}
	}
	return *pr
}

func NewPropertyRead(e *entities.Property) *PropertyRead {
	if e == nil {
		return nil
	}
	var ret PropertyRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Key = e.Key
	ret.Value = e.Value
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewPropertyReads(es []*entities.Property) []PropertyRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PropertyRead, len(es))
	for i, e := range es {
		r[i] = NewPropertyRead(e).Elem()
	}
	return r
}

func (pr *PropertyRead) Elem() PropertyRead {
	if pr == nil {
		return PropertyRead{}
	}
	return *pr
}

func NewPropertyUpdate(e *entities.Property) *PropertyUpdate {
	if e == nil {
		return nil
	}
	var ret PropertyUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Key = e.Key
	ret.Value = e.Value
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewPropertyUpdates(es []*entities.Property) []PropertyUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]PropertyUpdate, len(es))
	for i, e := range es {
		r[i] = NewPropertyUpdate(e).Elem()
	}
	return r
}

func (pr *PropertyUpdate) Elem() PropertyUpdate {
	if pr == nil {
		return PropertyUpdate{}
	}
	return *pr
}

func NewPropertyHostserviceRead(e *entities.HostService) *PropertyHostserviceRead {
	if e == nil {
		return nil
	}
	var ret PropertyHostserviceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewPropertyHostserviceReads(es []*entities.HostService) []PropertyHostserviceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]PropertyHostserviceRead, len(es))
	for i, e := range es {
		r[i] = NewPropertyHostserviceRead(e).Elem()
	}
	return r
}

func (hs *PropertyHostserviceRead) Elem() PropertyHostserviceRead {
	if hs == nil {
		return PropertyHostserviceRead{}
	}
	return *hs
}

func NewRoundCreate(e *entities.Round) *RoundCreate {
	if e == nil {
		return nil
	}
	var ret RoundCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.RoundNumber = e.RoundNumber
	ret.NumOfIntendedChecks = NewOptInt(e.NumOfIntendedChecks)
	ret.Status = RoundCreateStatus(e.Status)
	ret.StartedAt = e.StartedAt
	ret.FinishedAt = NewOptDateTime(e.FinishedAt)
	return &ret
}

func NewRoundCreates(es []*entities.Round) []RoundCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RoundCreate, len(es))
	for i, e := range es {
		r[i] = NewRoundCreate(e).Elem()
	}
	return r
}

func (r *RoundCreate) Elem() RoundCreate {
	if r == nil {
		return RoundCreate{}
	}
	return *r
}

func NewRoundList(e *entities.Round) *RoundList {
	if e == nil {
		return nil
	}
	var ret RoundList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.RoundNumber = e.RoundNumber
	ret.NumOfIntendedChecks = NewOptInt(e.NumOfIntendedChecks)
	ret.Status = RoundListStatus(e.Status)
	ret.StartedAt = e.StartedAt
	ret.FinishedAt = NewOptDateTime(e.FinishedAt)
	return &ret
}

func NewRoundLists(es []*entities.Round) []RoundList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RoundList, len(es))
	for i, e := range es {
		r[i] = NewRoundList(e).Elem()
	}
	return r
}

func (r *RoundList) Elem() RoundList {
	if r == nil {
		return RoundList{}
	}
	return *r
}

func NewRoundRead(e *entities.Round) *RoundRead {
	if e == nil {
		return nil
	}
	var ret RoundRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.RoundNumber = e.RoundNumber
	ret.NumOfIntendedChecks = NewOptInt(e.NumOfIntendedChecks)
	ret.Status = RoundReadStatus(e.Status)
	ret.StartedAt = e.StartedAt
	ret.FinishedAt = NewOptDateTime(e.FinishedAt)
	return &ret
}

func NewRoundReads(es []*entities.Round) []RoundRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]RoundRead, len(es))
	for i, e := range es {
		r[i] = NewRoundRead(e).Elem()
	}
	return r
}

func (r *RoundRead) Elem() RoundRead {
	if r == nil {
		return RoundRead{}
	}
	return *r
}

func NewRoundUpdate(e *entities.Round) *RoundUpdate {
	if e == nil {
		return nil
	}
	var ret RoundUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.RoundNumber = e.RoundNumber
	ret.NumOfIntendedChecks = NewOptInt(e.NumOfIntendedChecks)
	ret.Status = RoundUpdateStatus(e.Status)
	ret.StartedAt = e.StartedAt
	ret.FinishedAt = NewOptDateTime(e.FinishedAt)
	return &ret
}

func NewRoundUpdates(es []*entities.Round) []RoundUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]RoundUpdate, len(es))
	for i, e := range es {
		r[i] = NewRoundUpdate(e).Elem()
	}
	return r
}

func (r *RoundUpdate) Elem() RoundUpdate {
	if r == nil {
		return RoundUpdate{}
	}
	return *r
}

func NewRoundChecksList(e *entities.Check) *RoundChecksList {
	if e == nil {
		return nil
	}
	var ret RoundChecksList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Log = NewOptString(e.Log)
	ret.Error = NewOptString(e.Error)
	ret.Passed = e.Passed
	ret.RoundID = e.RoundID
	ret.HostServiceID = e.HostServiceID
	return &ret
}

func NewRoundChecksLists(es []*entities.Check) []RoundChecksList {
	if len(es) == 0 {
		return nil
	}
	r := make([]RoundChecksList, len(es))
	for i, e := range es {
		r[i] = NewRoundChecksList(e).Elem()
	}
	return r
}

func (c *RoundChecksList) Elem() RoundChecksList {
	if c == nil {
		return RoundChecksList{}
	}
	return *c
}

func NewServiceCreate(e *entities.Service) *ServiceCreate {
	if e == nil {
		return nil
	}
	var ret ServiceCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = ServiceCreateType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewServiceCreates(es []*entities.Service) []ServiceCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceCreate, len(es))
	for i, e := range es {
		r[i] = NewServiceCreate(e).Elem()
	}
	return r
}

func (s *ServiceCreate) Elem() ServiceCreate {
	if s == nil {
		return ServiceCreate{}
	}
	return *s
}

func NewServiceList(e *entities.Service) *ServiceList {
	if e == nil {
		return nil
	}
	var ret ServiceList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = ServiceListType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewServiceLists(es []*entities.Service) []ServiceList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceList, len(es))
	for i, e := range es {
		r[i] = NewServiceList(e).Elem()
	}
	return r
}

func (s *ServiceList) Elem() ServiceList {
	if s == nil {
		return ServiceList{}
	}
	return *s
}

func NewServiceRead(e *entities.Service) *ServiceRead {
	if e == nil {
		return nil
	}
	var ret ServiceRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = ServiceReadType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewServiceReads(es []*entities.Service) []ServiceRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceRead, len(es))
	for i, e := range es {
		r[i] = NewServiceRead(e).Elem()
	}
	return r
}

func (s *ServiceRead) Elem() ServiceRead {
	if s == nil {
		return ServiceRead{}
	}
	return *s
}

func NewServiceUpdate(e *entities.Service) *ServiceUpdate {
	if e == nil {
		return nil
	}
	var ret ServiceUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Type = ServiceUpdateType(e.Type)
	ret.Weight = e.Weight
	ret.PointBoost = e.PointBoost
	ret.RoundFrequency = e.RoundFrequency
	ret.RoundDelay = e.RoundDelay
	return &ret
}

func NewServiceUpdates(es []*entities.Service) []ServiceUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceUpdate, len(es))
	for i, e := range es {
		r[i] = NewServiceUpdate(e).Elem()
	}
	return r
}

func (s *ServiceUpdate) Elem() ServiceUpdate {
	if s == nil {
		return ServiceUpdate{}
	}
	return *s
}

func NewServiceHostservicereportsList(e *entities.HostServiceReport) *ServiceHostservicereportsList {
	if e == nil {
		return nil
	}
	var ret ServiceHostservicereportsList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewServiceHostservicereportsLists(es []*entities.HostServiceReport) []ServiceHostservicereportsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceHostservicereportsList, len(es))
	for i, e := range es {
		r[i] = NewServiceHostservicereportsList(e).Elem()
	}
	return r
}

func (hsr *ServiceHostservicereportsList) Elem() ServiceHostservicereportsList {
	if hsr == nil {
		return ServiceHostservicereportsList{}
	}
	return *hsr
}

func NewServiceHostservicesList(e *entities.HostService) *ServiceHostservicesList {
	if e == nil {
		return nil
	}
	var ret ServiceHostservicesList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewServiceHostservicesLists(es []*entities.HostService) []ServiceHostservicesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ServiceHostservicesList, len(es))
	for i, e := range es {
		r[i] = NewServiceHostservicesList(e).Elem()
	}
	return r
}

func (hs *ServiceHostservicesList) Elem() ServiceHostservicesList {
	if hs == nil {
		return ServiceHostservicesList{}
	}
	return *hs
}

func NewTeamCreate(e *entities.Team) *TeamCreate {
	if e == nil {
		return nil
	}
	var ret TeamCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewTeamCreates(es []*entities.Team) []TeamCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamCreate, len(es))
	for i, e := range es {
		r[i] = NewTeamCreate(e).Elem()
	}
	return r
}

func (t *TeamCreate) Elem() TeamCreate {
	if t == nil {
		return TeamCreate{}
	}
	return *t
}

func NewTeamList(e *entities.Team) *TeamList {
	if e == nil {
		return nil
	}
	var ret TeamList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewTeamLists(es []*entities.Team) []TeamList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamList, len(es))
	for i, e := range es {
		r[i] = NewTeamList(e).Elem()
	}
	return r
}

func (t *TeamList) Elem() TeamList {
	if t == nil {
		return TeamList{}
	}
	return *t
}

func NewTeamRead(e *entities.Team) *TeamRead {
	if e == nil {
		return nil
	}
	var ret TeamRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewTeamReads(es []*entities.Team) []TeamRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamRead, len(es))
	for i, e := range es {
		r[i] = NewTeamRead(e).Elem()
	}
	return r
}

func (t *TeamRead) Elem() TeamRead {
	if t == nil {
		return TeamRead{}
	}
	return *t
}

func NewTeamReportCreate(e *entities.TeamReport) *TeamReportCreate {
	if e == nil {
		return nil
	}
	var ret TeamReportCreate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamReportCreates(es []*entities.TeamReport) []TeamReportCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportCreate, len(es))
	for i, e := range es {
		r[i] = NewTeamReportCreate(e).Elem()
	}
	return r
}

func (tr *TeamReportCreate) Elem() TeamReportCreate {
	if tr == nil {
		return TeamReportCreate{}
	}
	return *tr
}

func NewTeamReportList(e *entities.TeamReport) *TeamReportList {
	if e == nil {
		return nil
	}
	var ret TeamReportList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamReportLists(es []*entities.TeamReport) []TeamReportList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportList, len(es))
	for i, e := range es {
		r[i] = NewTeamReportList(e).Elem()
	}
	return r
}

func (tr *TeamReportList) Elem() TeamReportList {
	if tr == nil {
		return TeamReportList{}
	}
	return *tr
}

func NewTeamReportRead(e *entities.TeamReport) *TeamReportRead {
	if e == nil {
		return nil
	}
	var ret TeamReportRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamReportReads(es []*entities.TeamReport) []TeamReportRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportRead, len(es))
	for i, e := range es {
		r[i] = NewTeamReportRead(e).Elem()
	}
	return r
}

func (tr *TeamReportRead) Elem() TeamReportRead {
	if tr == nil {
		return TeamReportRead{}
	}
	return *tr
}

func NewTeamReportUpdate(e *entities.TeamReport) *TeamReportUpdate {
	if e == nil {
		return nil
	}
	var ret TeamReportUpdate
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamReportUpdates(es []*entities.TeamReport) []TeamReportUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportUpdate, len(es))
	for i, e := range es {
		r[i] = NewTeamReportUpdate(e).Elem()
	}
	return r
}

func (tr *TeamReportUpdate) Elem() TeamReportUpdate {
	if tr == nil {
		return TeamReportUpdate{}
	}
	return *tr
}

func NewTeamReportHostservicereportsList(e *entities.HostServiceReport) *TeamReportHostservicereportsList {
	if e == nil {
		return nil
	}
	var ret TeamReportHostservicereportsList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewTeamReportHostservicereportsLists(es []*entities.HostServiceReport) []TeamReportHostservicereportsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportHostservicereportsList, len(es))
	for i, e := range es {
		r[i] = NewTeamReportHostservicereportsList(e).Elem()
	}
	return r
}

func (hsr *TeamReportHostservicereportsList) Elem() TeamReportHostservicereportsList {
	if hsr == nil {
		return TeamReportHostservicereportsList{}
	}
	return *hsr
}

func NewTeamReportTeamRead(e *entities.Team) *TeamReportTeamRead {
	if e == nil {
		return nil
	}
	var ret TeamReportTeamRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewTeamReportTeamReads(es []*entities.Team) []TeamReportTeamRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamReportTeamRead, len(es))
	for i, e := range es {
		r[i] = NewTeamReportTeamRead(e).Elem()
	}
	return r
}

func (t *TeamReportTeamRead) Elem() TeamReportTeamRead {
	if t == nil {
		return TeamReportTeamRead{}
	}
	return *t
}

func NewTeamUpdate(e *entities.Team) *TeamUpdate {
	if e == nil {
		return nil
	}
	var ret TeamUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Number = e.Number
	return &ret
}

func NewTeamUpdates(es []*entities.Team) []TeamUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamUpdate, len(es))
	for i, e := range es {
		r[i] = NewTeamUpdate(e).Elem()
	}
	return r
}

func (t *TeamUpdate) Elem() TeamUpdate {
	if t == nil {
		return TeamUpdate{}
	}
	return *t
}

func NewTeamHostsList(e *entities.Host) *TeamHostsList {
	if e == nil {
		return nil
	}
	var ret TeamHostsList
	ret.ID = e.ID
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Address = e.Address
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamHostsLists(es []*entities.Host) []TeamHostsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamHostsList, len(es))
	for i, e := range es {
		r[i] = NewTeamHostsList(e).Elem()
	}
	return r
}

func (h *TeamHostsList) Elem() TeamHostsList {
	if h == nil {
		return TeamHostsList{}
	}
	return *h
}

func NewTeamHostservicereportsList(e *entities.HostServiceReport) *TeamHostservicereportsList {
	if e == nil {
		return nil
	}
	var ret TeamHostservicereportsList
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.Passing = e.Passing
	ret.LatestCheckTime = e.LatestCheckTime
	ret.HostServiceID = e.HostServiceID
	ret.ServiceID = e.ServiceID
	ret.TeamID = e.TeamID
	ret.TeamReportID = NewOptString(e.TeamReportID)
	return &ret
}

func NewTeamHostservicereportsLists(es []*entities.HostServiceReport) []TeamHostservicereportsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamHostservicereportsList, len(es))
	for i, e := range es {
		r[i] = NewTeamHostservicereportsList(e).Elem()
	}
	return r
}

func (hsr *TeamHostservicereportsList) Elem() TeamHostservicereportsList {
	if hsr == nil {
		return TeamHostservicereportsList{}
	}
	return *hsr
}

func NewTeamHostservicesList(e *entities.HostService) *TeamHostservicesList {
	if e == nil {
		return nil
	}
	var ret TeamHostservicesList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.DisplayName = e.DisplayName
	ret.Pause = NewOptBool(e.Pause)
	ret.Hidden = NewOptBool(e.Hidden)
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.ServiceID = e.ServiceID
	ret.HostID = e.HostID
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamHostservicesLists(es []*entities.HostService) []TeamHostservicesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamHostservicesList, len(es))
	for i, e := range es {
		r[i] = NewTeamHostservicesList(e).Elem()
	}
	return r
}

func (hs *TeamHostservicesList) Elem() TeamHostservicesList {
	if hs == nil {
		return TeamHostservicesList{}
	}
	return *hs
}

func NewTeamTeamreportRead(e *entities.TeamReport) *TeamTeamreportRead {
	if e == nil {
		return nil
	}
	var ret TeamTeamreportRead
	ret.ID = e.ID
	ret.CreateTime = NewOptDateTime(e.CreateTime)
	ret.UpdateTime = NewOptDateTime(e.UpdateTime)
	ret.Points = e.Points
	ret.TeamID = e.TeamID
	return &ret
}

func NewTeamTeamreportReads(es []*entities.TeamReport) []TeamTeamreportRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]TeamTeamreportRead, len(es))
	for i, e := range es {
		r[i] = NewTeamTeamreportRead(e).Elem()
	}
	return r
}

func (tr *TeamTeamreportRead) Elem() TeamTeamreportRead {
	if tr == nil {
		return TeamTeamreportRead{}
	}
	return *tr
}
