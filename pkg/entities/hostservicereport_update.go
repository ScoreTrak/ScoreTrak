// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/predicate"
)

// HostServiceReportUpdate is the builder for updating HostServiceReport entities.
type HostServiceReportUpdate struct {
	config
	hooks    []Hook
	mutation *HostServiceReportMutation
}

// Where appends a list predicates to the HostServiceReportUpdate builder.
func (hsru *HostServiceReportUpdate) Where(ps ...predicate.HostServiceReport) *HostServiceReportUpdate {
	hsru.mutation.Where(ps...)
	return hsru
}

// SetUpdateTime sets the "update_time" field.
func (hsru *HostServiceReportUpdate) SetUpdateTime(t time.Time) *HostServiceReportUpdate {
	hsru.mutation.SetUpdateTime(t)
	return hsru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (hsru *HostServiceReportUpdate) ClearUpdateTime() *HostServiceReportUpdate {
	hsru.mutation.ClearUpdateTime()
	return hsru
}

// SetPoints sets the "points" field.
func (hsru *HostServiceReportUpdate) SetPoints(i int) *HostServiceReportUpdate {
	hsru.mutation.ResetPoints()
	hsru.mutation.SetPoints(i)
	return hsru
}

// AddPoints adds i to the "points" field.
func (hsru *HostServiceReportUpdate) AddPoints(i int) *HostServiceReportUpdate {
	hsru.mutation.AddPoints(i)
	return hsru
}

// SetPassing sets the "passing" field.
func (hsru *HostServiceReportUpdate) SetPassing(b bool) *HostServiceReportUpdate {
	hsru.mutation.SetPassing(b)
	return hsru
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (hsru *HostServiceReportUpdate) SetLatestCheckTime(t time.Time) *HostServiceReportUpdate {
	hsru.mutation.SetLatestCheckTime(t)
	return hsru
}

// Mutation returns the HostServiceReportMutation object of the builder.
func (hsru *HostServiceReportUpdate) Mutation() *HostServiceReportMutation {
	return hsru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hsru *HostServiceReportUpdate) Save(ctx context.Context) (int, error) {
	hsru.defaults()
	return withHooks[int, HostServiceReportMutation](ctx, hsru.sqlSave, hsru.mutation, hsru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsru *HostServiceReportUpdate) SaveX(ctx context.Context) int {
	affected, err := hsru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hsru *HostServiceReportUpdate) Exec(ctx context.Context) error {
	_, err := hsru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsru *HostServiceReportUpdate) ExecX(ctx context.Context) {
	if err := hsru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsru *HostServiceReportUpdate) defaults() {
	if _, ok := hsru.mutation.UpdateTime(); !ok && !hsru.mutation.UpdateTimeCleared() {
		v := hostservicereport.UpdateDefaultUpdateTime()
		hsru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsru *HostServiceReportUpdate) check() error {
	if _, ok := hsru.mutation.HostserviceID(); hsru.mutation.HostserviceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.hostservice"`)
	}
	if _, ok := hsru.mutation.ServiceID(); hsru.mutation.ServiceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.service"`)
	}
	if _, ok := hsru.mutation.TeamID(); hsru.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.team"`)
	}
	return nil
}

func (hsru *HostServiceReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hsru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostservicereport.Table, hostservicereport.Columns, sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString))
	if ps := hsru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hsru.mutation.CreateTimeCleared() {
		_spec.ClearField(hostservicereport.FieldCreateTime, field.TypeTime)
	}
	if value, ok := hsru.mutation.UpdateTime(); ok {
		_spec.SetField(hostservicereport.FieldUpdateTime, field.TypeTime, value)
	}
	if hsru.mutation.UpdateTimeCleared() {
		_spec.ClearField(hostservicereport.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := hsru.mutation.Points(); ok {
		_spec.SetField(hostservicereport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := hsru.mutation.AddedPoints(); ok {
		_spec.AddField(hostservicereport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := hsru.mutation.Passing(); ok {
		_spec.SetField(hostservicereport.FieldPassing, field.TypeBool, value)
	}
	if value, ok := hsru.mutation.LatestCheckTime(); ok {
		_spec.SetField(hostservicereport.FieldLatestCheckTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hsru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostservicereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hsru.mutation.done = true
	return n, nil
}

// HostServiceReportUpdateOne is the builder for updating a single HostServiceReport entity.
type HostServiceReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostServiceReportMutation
}

// SetUpdateTime sets the "update_time" field.
func (hsruo *HostServiceReportUpdateOne) SetUpdateTime(t time.Time) *HostServiceReportUpdateOne {
	hsruo.mutation.SetUpdateTime(t)
	return hsruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (hsruo *HostServiceReportUpdateOne) ClearUpdateTime() *HostServiceReportUpdateOne {
	hsruo.mutation.ClearUpdateTime()
	return hsruo
}

// SetPoints sets the "points" field.
func (hsruo *HostServiceReportUpdateOne) SetPoints(i int) *HostServiceReportUpdateOne {
	hsruo.mutation.ResetPoints()
	hsruo.mutation.SetPoints(i)
	return hsruo
}

// AddPoints adds i to the "points" field.
func (hsruo *HostServiceReportUpdateOne) AddPoints(i int) *HostServiceReportUpdateOne {
	hsruo.mutation.AddPoints(i)
	return hsruo
}

// SetPassing sets the "passing" field.
func (hsruo *HostServiceReportUpdateOne) SetPassing(b bool) *HostServiceReportUpdateOne {
	hsruo.mutation.SetPassing(b)
	return hsruo
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (hsruo *HostServiceReportUpdateOne) SetLatestCheckTime(t time.Time) *HostServiceReportUpdateOne {
	hsruo.mutation.SetLatestCheckTime(t)
	return hsruo
}

// Mutation returns the HostServiceReportMutation object of the builder.
func (hsruo *HostServiceReportUpdateOne) Mutation() *HostServiceReportMutation {
	return hsruo.mutation
}

// Where appends a list predicates to the HostServiceReportUpdate builder.
func (hsruo *HostServiceReportUpdateOne) Where(ps ...predicate.HostServiceReport) *HostServiceReportUpdateOne {
	hsruo.mutation.Where(ps...)
	return hsruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hsruo *HostServiceReportUpdateOne) Select(field string, fields ...string) *HostServiceReportUpdateOne {
	hsruo.fields = append([]string{field}, fields...)
	return hsruo
}

// Save executes the query and returns the updated HostServiceReport entity.
func (hsruo *HostServiceReportUpdateOne) Save(ctx context.Context) (*HostServiceReport, error) {
	hsruo.defaults()
	return withHooks[*HostServiceReport, HostServiceReportMutation](ctx, hsruo.sqlSave, hsruo.mutation, hsruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsruo *HostServiceReportUpdateOne) SaveX(ctx context.Context) *HostServiceReport {
	node, err := hsruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hsruo *HostServiceReportUpdateOne) Exec(ctx context.Context) error {
	_, err := hsruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsruo *HostServiceReportUpdateOne) ExecX(ctx context.Context) {
	if err := hsruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsruo *HostServiceReportUpdateOne) defaults() {
	if _, ok := hsruo.mutation.UpdateTime(); !ok && !hsruo.mutation.UpdateTimeCleared() {
		v := hostservicereport.UpdateDefaultUpdateTime()
		hsruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsruo *HostServiceReportUpdateOne) check() error {
	if _, ok := hsruo.mutation.HostserviceID(); hsruo.mutation.HostserviceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.hostservice"`)
	}
	if _, ok := hsruo.mutation.ServiceID(); hsruo.mutation.ServiceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.service"`)
	}
	if _, ok := hsruo.mutation.TeamID(); hsruo.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostServiceReport.team"`)
	}
	return nil
}

func (hsruo *HostServiceReportUpdateOne) sqlSave(ctx context.Context) (_node *HostServiceReport, err error) {
	if err := hsruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostservicereport.Table, hostservicereport.Columns, sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString))
	id, ok := hsruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "HostServiceReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hsruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostservicereport.FieldID)
		for _, f := range fields {
			if !hostservicereport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != hostservicereport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hsruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if hsruo.mutation.CreateTimeCleared() {
		_spec.ClearField(hostservicereport.FieldCreateTime, field.TypeTime)
	}
	if value, ok := hsruo.mutation.UpdateTime(); ok {
		_spec.SetField(hostservicereport.FieldUpdateTime, field.TypeTime, value)
	}
	if hsruo.mutation.UpdateTimeCleared() {
		_spec.ClearField(hostservicereport.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := hsruo.mutation.Points(); ok {
		_spec.SetField(hostservicereport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := hsruo.mutation.AddedPoints(); ok {
		_spec.AddField(hostservicereport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := hsruo.mutation.Passing(); ok {
		_spec.SetField(hostservicereport.FieldPassing, field.TypeBool, value)
	}
	if value, ok := hsruo.mutation.LatestCheckTime(); ok {
		_spec.SetField(hostservicereport.FieldLatestCheckTime, field.TypeTime, value)
	}
	_node = &HostServiceReport{config: hsruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hsruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostservicereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hsruo.mutation.done = true
	return _node, nil
}
