// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/team"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/teamreport"
)

// TeamReportQuery is the builder for querying TeamReport entities.
type TeamReportQuery struct {
	config
	ctx                    *QueryContext
	order                  []teamreport.OrderOption
	inters                 []Interceptor
	predicates             []predicate.TeamReport
	withTeam               *TeamQuery
	withHostservicereports *HostServiceReportQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TeamReportQuery builder.
func (trq *TeamReportQuery) Where(ps ...predicate.TeamReport) *TeamReportQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit the number of records to be returned by this query.
func (trq *TeamReportQuery) Limit(limit int) *TeamReportQuery {
	trq.ctx.Limit = &limit
	return trq
}

// Offset to start from.
func (trq *TeamReportQuery) Offset(offset int) *TeamReportQuery {
	trq.ctx.Offset = &offset
	return trq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (trq *TeamReportQuery) Unique(unique bool) *TeamReportQuery {
	trq.ctx.Unique = &unique
	return trq
}

// Order specifies how the records should be ordered.
func (trq *TeamReportQuery) Order(o ...teamreport.OrderOption) *TeamReportQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// QueryTeam chains the current query on the "team" edge.
func (trq *TeamReportQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teamreport.Table, teamreport.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, teamreport.TeamTable, teamreport.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostservicereports chains the current query on the "hostservicereports" edge.
func (trq *TeamReportQuery) QueryHostservicereports() *HostServiceReportQuery {
	query := (&HostServiceReportClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teamreport.Table, teamreport.FieldID, selector),
			sqlgraph.To(hostservicereport.Table, hostservicereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teamreport.HostservicereportsTable, teamreport.HostservicereportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TeamReport entity from the query.
// Returns a *NotFoundError when no TeamReport was found.
func (trq *TeamReportQuery) First(ctx context.Context) (*TeamReport, error) {
	nodes, err := trq.Limit(1).All(setContextOp(ctx, trq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{teamreport.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TeamReportQuery) FirstX(ctx context.Context) *TeamReport {
	node, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TeamReport ID from the query.
// Returns a *NotFoundError when no TeamReport ID was found.
func (trq *TeamReportQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = trq.Limit(1).IDs(setContextOp(ctx, trq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{teamreport.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (trq *TeamReportQuery) FirstIDX(ctx context.Context) string {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TeamReport entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TeamReport entity is found.
// Returns a *NotFoundError when no TeamReport entities are found.
func (trq *TeamReportQuery) Only(ctx context.Context) (*TeamReport, error) {
	nodes, err := trq.Limit(2).All(setContextOp(ctx, trq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{teamreport.Label}
	default:
		return nil, &NotSingularError{teamreport.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TeamReportQuery) OnlyX(ctx context.Context) *TeamReport {
	node, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TeamReport ID in the query.
// Returns a *NotSingularError when more than one TeamReport ID is found.
// Returns a *NotFoundError when no entities are found.
func (trq *TeamReportQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = trq.Limit(2).IDs(setContextOp(ctx, trq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{teamreport.Label}
	default:
		err = &NotSingularError{teamreport.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trq *TeamReportQuery) OnlyIDX(ctx context.Context) string {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TeamReports.
func (trq *TeamReportQuery) All(ctx context.Context) ([]*TeamReport, error) {
	ctx = setContextOp(ctx, trq.ctx, "All")
	if err := trq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TeamReport, *TeamReportQuery]()
	return withInterceptors[[]*TeamReport](ctx, trq, qr, trq.inters)
}

// AllX is like All, but panics if an error occurs.
func (trq *TeamReportQuery) AllX(ctx context.Context) []*TeamReport {
	nodes, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TeamReport IDs.
func (trq *TeamReportQuery) IDs(ctx context.Context) (ids []string, err error) {
	if trq.ctx.Unique == nil && trq.path != nil {
		trq.Unique(true)
	}
	ctx = setContextOp(ctx, trq.ctx, "IDs")
	if err = trq.Select(teamreport.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TeamReportQuery) IDsX(ctx context.Context) []string {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TeamReportQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, trq.ctx, "Count")
	if err := trq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, trq, querierCount[*TeamReportQuery](), trq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TeamReportQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TeamReportQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, trq.ctx, "Exist")
	switch _, err := trq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entities: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TeamReportQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TeamReportQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TeamReportQuery) Clone() *TeamReportQuery {
	if trq == nil {
		return nil
	}
	return &TeamReportQuery{
		config:                 trq.config,
		ctx:                    trq.ctx.Clone(),
		order:                  append([]teamreport.OrderOption{}, trq.order...),
		inters:                 append([]Interceptor{}, trq.inters...),
		predicates:             append([]predicate.TeamReport{}, trq.predicates...),
		withTeam:               trq.withTeam.Clone(),
		withHostservicereports: trq.withHostservicereports.Clone(),
		// clone intermediate query.
		sql:  trq.sql.Clone(),
		path: trq.path,
	}
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TeamReportQuery) WithTeam(opts ...func(*TeamQuery)) *TeamReportQuery {
	query := (&TeamClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withTeam = query
	return trq
}

// WithHostservicereports tells the query-builder to eager-load the nodes that are connected to
// the "hostservicereports" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TeamReportQuery) WithHostservicereports(opts ...func(*HostServiceReportQuery)) *TeamReportQuery {
	query := (&HostServiceReportClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withHostservicereports = query
	return trq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TeamReport.Query().
//		GroupBy(teamreport.FieldCreateTime).
//		Aggregate(entities.Count()).
//		Scan(ctx, &v)
func (trq *TeamReportQuery) GroupBy(field string, fields ...string) *TeamReportGroupBy {
	trq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TeamReportGroupBy{build: trq}
	grbuild.flds = &trq.ctx.Fields
	grbuild.label = teamreport.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.TeamReport.Query().
//		Select(teamreport.FieldCreateTime).
//		Scan(ctx, &v)
func (trq *TeamReportQuery) Select(fields ...string) *TeamReportSelect {
	trq.ctx.Fields = append(trq.ctx.Fields, fields...)
	sbuild := &TeamReportSelect{TeamReportQuery: trq}
	sbuild.label = teamreport.Label
	sbuild.flds, sbuild.scan = &trq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TeamReportSelect configured with the given aggregations.
func (trq *TeamReportQuery) Aggregate(fns ...AggregateFunc) *TeamReportSelect {
	return trq.Select().Aggregate(fns...)
}

func (trq *TeamReportQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range trq.inters {
		if inter == nil {
			return fmt.Errorf("entities: uninitialized interceptor (forgotten import entities/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, trq); err != nil {
				return err
			}
		}
	}
	for _, f := range trq.ctx.Fields {
		if !teamreport.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
		}
	}
	if trq.path != nil {
		prev, err := trq.path(ctx)
		if err != nil {
			return err
		}
		trq.sql = prev
	}
	return nil
}

func (trq *TeamReportQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TeamReport, error) {
	var (
		nodes       = []*TeamReport{}
		_spec       = trq.querySpec()
		loadedTypes = [2]bool{
			trq.withTeam != nil,
			trq.withHostservicereports != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TeamReport).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TeamReport{config: trq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := trq.withTeam; query != nil {
		if err := trq.loadTeam(ctx, query, nodes, nil,
			func(n *TeamReport, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	if query := trq.withHostservicereports; query != nil {
		if err := trq.loadHostservicereports(ctx, query, nodes,
			func(n *TeamReport) { n.Edges.Hostservicereports = []*HostServiceReport{} },
			func(n *TeamReport, e *HostServiceReport) {
				n.Edges.Hostservicereports = append(n.Edges.Hostservicereports, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (trq *TeamReportQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*TeamReport, init func(*TeamReport), assign func(*TeamReport, *Team)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TeamReport)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (trq *TeamReportQuery) loadHostservicereports(ctx context.Context, query *HostServiceReportQuery, nodes []*TeamReport, init func(*TeamReport), assign func(*TeamReport, *HostServiceReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TeamReport)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(hostservicereport.FieldTeamReportID)
	}
	query.Where(predicate.HostServiceReport(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(teamreport.HostservicereportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TeamReportID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "team_report_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (trq *TeamReportQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	_spec.Node.Columns = trq.ctx.Fields
	if len(trq.ctx.Fields) > 0 {
		_spec.Unique = trq.ctx.Unique != nil && *trq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TeamReportQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(teamreport.Table, teamreport.Columns, sqlgraph.NewFieldSpec(teamreport.FieldID, field.TypeString))
	_spec.From = trq.sql
	if unique := trq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if trq.path != nil {
		_spec.Unique = true
	}
	if fields := trq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamreport.FieldID)
		for i := range fields {
			if fields[i] != teamreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if trq.withTeam != nil {
			_spec.Node.AddColumnOnce(teamreport.FieldTeamID)
		}
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (trq *TeamReportQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(teamreport.Table)
	columns := trq.ctx.Fields
	if len(columns) == 0 {
		columns = teamreport.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if trq.ctx.Unique != nil && *trq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector)
	}
	if offset := trq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TeamReportGroupBy is the group-by builder for TeamReport entities.
type TeamReportGroupBy struct {
	selector
	build *TeamReportQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TeamReportGroupBy) Aggregate(fns ...AggregateFunc) *TeamReportGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the selector query and scans the result into the given value.
func (trgb *TeamReportGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trgb.build.ctx, "GroupBy")
	if err := trgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TeamReportQuery, *TeamReportGroupBy](ctx, trgb.build, trgb, trgb.build.inters, v)
}

func (trgb *TeamReportGroupBy) sqlScan(ctx context.Context, root *TeamReportQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(trgb.fns))
	for _, fn := range trgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*trgb.flds)+len(trgb.fns))
		for _, f := range *trgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*trgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TeamReportSelect is the builder for selecting fields of TeamReport entities.
type TeamReportSelect struct {
	*TeamReportQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (trs *TeamReportSelect) Aggregate(fns ...AggregateFunc) *TeamReportSelect {
	trs.fns = append(trs.fns, fns...)
	return trs
}

// Scan applies the selector query and scans the result into the given value.
func (trs *TeamReportSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, trs.ctx, "Select")
	if err := trs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TeamReportQuery, *TeamReportSelect](ctx, trs.TeamReportQuery, trs, trs.inters, v)
}

func (trs *TeamReportSelect) sqlScan(ctx context.Context, root *TeamReportQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(trs.fns))
	for _, fn := range trs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*trs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
