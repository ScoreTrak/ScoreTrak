// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/service"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/team"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/teamreport"
)

// HostServiceReportCreate is the builder for creating a HostServiceReport entity.
type HostServiceReportCreate struct {
	config
	mutation *HostServiceReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (hsrc *HostServiceReportCreate) SetCreateTime(t time.Time) *HostServiceReportCreate {
	hsrc.mutation.SetCreateTime(t)
	return hsrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (hsrc *HostServiceReportCreate) SetNillableCreateTime(t *time.Time) *HostServiceReportCreate {
	if t != nil {
		hsrc.SetCreateTime(*t)
	}
	return hsrc
}

// SetUpdateTime sets the "update_time" field.
func (hsrc *HostServiceReportCreate) SetUpdateTime(t time.Time) *HostServiceReportCreate {
	hsrc.mutation.SetUpdateTime(t)
	return hsrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (hsrc *HostServiceReportCreate) SetNillableUpdateTime(t *time.Time) *HostServiceReportCreate {
	if t != nil {
		hsrc.SetUpdateTime(*t)
	}
	return hsrc
}

// SetPoints sets the "points" field.
func (hsrc *HostServiceReportCreate) SetPoints(i int) *HostServiceReportCreate {
	hsrc.mutation.SetPoints(i)
	return hsrc
}

// SetPassing sets the "passing" field.
func (hsrc *HostServiceReportCreate) SetPassing(b bool) *HostServiceReportCreate {
	hsrc.mutation.SetPassing(b)
	return hsrc
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (hsrc *HostServiceReportCreate) SetLatestCheckTime(t time.Time) *HostServiceReportCreate {
	hsrc.mutation.SetLatestCheckTime(t)
	return hsrc
}

// SetHostServiceID sets the "host_service_id" field.
func (hsrc *HostServiceReportCreate) SetHostServiceID(s string) *HostServiceReportCreate {
	hsrc.mutation.SetHostServiceID(s)
	return hsrc
}

// SetServiceID sets the "service_id" field.
func (hsrc *HostServiceReportCreate) SetServiceID(s string) *HostServiceReportCreate {
	hsrc.mutation.SetServiceID(s)
	return hsrc
}

// SetTeamID sets the "team_id" field.
func (hsrc *HostServiceReportCreate) SetTeamID(s string) *HostServiceReportCreate {
	hsrc.mutation.SetTeamID(s)
	return hsrc
}

// SetTeamReportID sets the "team_report_id" field.
func (hsrc *HostServiceReportCreate) SetTeamReportID(s string) *HostServiceReportCreate {
	hsrc.mutation.SetTeamReportID(s)
	return hsrc
}

// SetNillableTeamReportID sets the "team_report_id" field if the given value is not nil.
func (hsrc *HostServiceReportCreate) SetNillableTeamReportID(s *string) *HostServiceReportCreate {
	if s != nil {
		hsrc.SetTeamReportID(*s)
	}
	return hsrc
}

// SetID sets the "id" field.
func (hsrc *HostServiceReportCreate) SetID(s string) *HostServiceReportCreate {
	hsrc.mutation.SetID(s)
	return hsrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hsrc *HostServiceReportCreate) SetNillableID(s *string) *HostServiceReportCreate {
	if s != nil {
		hsrc.SetID(*s)
	}
	return hsrc
}

// SetHostserviceID sets the "hostservice" edge to the HostService entity by ID.
func (hsrc *HostServiceReportCreate) SetHostserviceID(id string) *HostServiceReportCreate {
	hsrc.mutation.SetHostserviceID(id)
	return hsrc
}

// SetHostservice sets the "hostservice" edge to the HostService entity.
func (hsrc *HostServiceReportCreate) SetHostservice(h *HostService) *HostServiceReportCreate {
	return hsrc.SetHostserviceID(h.ID)
}

// SetService sets the "service" edge to the Service entity.
func (hsrc *HostServiceReportCreate) SetService(s *Service) *HostServiceReportCreate {
	return hsrc.SetServiceID(s.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (hsrc *HostServiceReportCreate) SetTeam(t *Team) *HostServiceReportCreate {
	return hsrc.SetTeamID(t.ID)
}

// SetTeamreportID sets the "teamreport" edge to the TeamReport entity by ID.
func (hsrc *HostServiceReportCreate) SetTeamreportID(id string) *HostServiceReportCreate {
	hsrc.mutation.SetTeamreportID(id)
	return hsrc
}

// SetNillableTeamreportID sets the "teamreport" edge to the TeamReport entity by ID if the given value is not nil.
func (hsrc *HostServiceReportCreate) SetNillableTeamreportID(id *string) *HostServiceReportCreate {
	if id != nil {
		hsrc = hsrc.SetTeamreportID(*id)
	}
	return hsrc
}

// SetTeamreport sets the "teamreport" edge to the TeamReport entity.
func (hsrc *HostServiceReportCreate) SetTeamreport(t *TeamReport) *HostServiceReportCreate {
	return hsrc.SetTeamreportID(t.ID)
}

// Mutation returns the HostServiceReportMutation object of the builder.
func (hsrc *HostServiceReportCreate) Mutation() *HostServiceReportMutation {
	return hsrc.mutation
}

// Save creates the HostServiceReport in the database.
func (hsrc *HostServiceReportCreate) Save(ctx context.Context) (*HostServiceReport, error) {
	hsrc.defaults()
	return withHooks[*HostServiceReport, HostServiceReportMutation](ctx, hsrc.sqlSave, hsrc.mutation, hsrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hsrc *HostServiceReportCreate) SaveX(ctx context.Context) *HostServiceReport {
	v, err := hsrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hsrc *HostServiceReportCreate) Exec(ctx context.Context) error {
	_, err := hsrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsrc *HostServiceReportCreate) ExecX(ctx context.Context) {
	if err := hsrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsrc *HostServiceReportCreate) defaults() {
	if _, ok := hsrc.mutation.CreateTime(); !ok {
		v := hostservicereport.DefaultCreateTime()
		hsrc.mutation.SetCreateTime(v)
	}
	if _, ok := hsrc.mutation.UpdateTime(); !ok {
		v := hostservicereport.DefaultUpdateTime()
		hsrc.mutation.SetUpdateTime(v)
	}
	if _, ok := hsrc.mutation.ID(); !ok {
		v := hostservicereport.DefaultID()
		hsrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsrc *HostServiceReportCreate) check() error {
	if _, ok := hsrc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`entities: missing required field "HostServiceReport.points"`)}
	}
	if _, ok := hsrc.mutation.Passing(); !ok {
		return &ValidationError{Name: "passing", err: errors.New(`entities: missing required field "HostServiceReport.passing"`)}
	}
	if _, ok := hsrc.mutation.LatestCheckTime(); !ok {
		return &ValidationError{Name: "latest_check_time", err: errors.New(`entities: missing required field "HostServiceReport.latest_check_time"`)}
	}
	if _, ok := hsrc.mutation.HostServiceID(); !ok {
		return &ValidationError{Name: "host_service_id", err: errors.New(`entities: missing required field "HostServiceReport.host_service_id"`)}
	}
	if _, ok := hsrc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service_id", err: errors.New(`entities: missing required field "HostServiceReport.service_id"`)}
	}
	if _, ok := hsrc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "HostServiceReport.team_id"`)}
	}
	if v, ok := hsrc.mutation.ID(); ok {
		if err := hostservicereport.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "HostServiceReport.id": %w`, err)}
		}
	}
	if _, ok := hsrc.mutation.HostserviceID(); !ok {
		return &ValidationError{Name: "hostservice", err: errors.New(`entities: missing required edge "HostServiceReport.hostservice"`)}
	}
	if _, ok := hsrc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New(`entities: missing required edge "HostServiceReport.service"`)}
	}
	if _, ok := hsrc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "HostServiceReport.team"`)}
	}
	return nil
}

func (hsrc *HostServiceReportCreate) sqlSave(ctx context.Context) (*HostServiceReport, error) {
	if err := hsrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hsrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hsrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HostServiceReport.ID type: %T", _spec.ID.Value)
		}
	}
	hsrc.mutation.id = &_node.ID
	hsrc.mutation.done = true
	return _node, nil
}

func (hsrc *HostServiceReportCreate) createSpec() (*HostServiceReport, *sqlgraph.CreateSpec) {
	var (
		_node = &HostServiceReport{config: hsrc.config}
		_spec = sqlgraph.NewCreateSpec(hostservicereport.Table, sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString))
	)
	_spec.OnConflict = hsrc.conflict
	if id, ok := hsrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hsrc.mutation.CreateTime(); ok {
		_spec.SetField(hostservicereport.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := hsrc.mutation.UpdateTime(); ok {
		_spec.SetField(hostservicereport.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := hsrc.mutation.Points(); ok {
		_spec.SetField(hostservicereport.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := hsrc.mutation.Passing(); ok {
		_spec.SetField(hostservicereport.FieldPassing, field.TypeBool, value)
		_node.Passing = value
	}
	if value, ok := hsrc.mutation.LatestCheckTime(); ok {
		_spec.SetField(hostservicereport.FieldLatestCheckTime, field.TypeTime, value)
		_node.LatestCheckTime = value
	}
	if nodes := hsrc.mutation.HostserviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostservicereport.HostserviceTable,
			Columns: []string{hostservicereport.HostserviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HostServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hsrc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostservicereport.ServiceTable,
			Columns: []string{hostservicereport.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(service.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hsrc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostservicereport.TeamTable,
			Columns: []string{hostservicereport.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hsrc.mutation.TeamreportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostservicereport.TeamreportTable,
			Columns: []string{hostservicereport.TeamreportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(teamreport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamReportID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostServiceReport.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostServiceReportUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (hsrc *HostServiceReportCreate) OnConflict(opts ...sql.ConflictOption) *HostServiceReportUpsertOne {
	hsrc.conflict = opts
	return &HostServiceReportUpsertOne{
		create: hsrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hsrc *HostServiceReportCreate) OnConflictColumns(columns ...string) *HostServiceReportUpsertOne {
	hsrc.conflict = append(hsrc.conflict, sql.ConflictColumns(columns...))
	return &HostServiceReportUpsertOne{
		create: hsrc,
	}
}

type (
	// HostServiceReportUpsertOne is the builder for "upsert"-ing
	//  one HostServiceReport node.
	HostServiceReportUpsertOne struct {
		create *HostServiceReportCreate
	}

	// HostServiceReportUpsert is the "OnConflict" setter.
	HostServiceReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *HostServiceReportUpsert) SetUpdateTime(v time.Time) *HostServiceReportUpsert {
	u.Set(hostservicereport.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HostServiceReportUpsert) UpdateUpdateTime() *HostServiceReportUpsert {
	u.SetExcluded(hostservicereport.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *HostServiceReportUpsert) ClearUpdateTime() *HostServiceReportUpsert {
	u.SetNull(hostservicereport.FieldUpdateTime)
	return u
}

// SetPoints sets the "points" field.
func (u *HostServiceReportUpsert) SetPoints(v int) *HostServiceReportUpsert {
	u.Set(hostservicereport.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *HostServiceReportUpsert) UpdatePoints() *HostServiceReportUpsert {
	u.SetExcluded(hostservicereport.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *HostServiceReportUpsert) AddPoints(v int) *HostServiceReportUpsert {
	u.Add(hostservicereport.FieldPoints, v)
	return u
}

// SetPassing sets the "passing" field.
func (u *HostServiceReportUpsert) SetPassing(v bool) *HostServiceReportUpsert {
	u.Set(hostservicereport.FieldPassing, v)
	return u
}

// UpdatePassing sets the "passing" field to the value that was provided on create.
func (u *HostServiceReportUpsert) UpdatePassing() *HostServiceReportUpsert {
	u.SetExcluded(hostservicereport.FieldPassing)
	return u
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (u *HostServiceReportUpsert) SetLatestCheckTime(v time.Time) *HostServiceReportUpsert {
	u.Set(hostservicereport.FieldLatestCheckTime, v)
	return u
}

// UpdateLatestCheckTime sets the "latest_check_time" field to the value that was provided on create.
func (u *HostServiceReportUpsert) UpdateLatestCheckTime() *HostServiceReportUpsert {
	u.SetExcluded(hostservicereport.FieldLatestCheckTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hostservicereport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HostServiceReportUpsertOne) UpdateNewValues() *HostServiceReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hostservicereport.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(hostservicereport.FieldCreateTime)
		}
		if _, exists := u.create.mutation.HostServiceID(); exists {
			s.SetIgnore(hostservicereport.FieldHostServiceID)
		}
		if _, exists := u.create.mutation.ServiceID(); exists {
			s.SetIgnore(hostservicereport.FieldServiceID)
		}
		if _, exists := u.create.mutation.TeamID(); exists {
			s.SetIgnore(hostservicereport.FieldTeamID)
		}
		if _, exists := u.create.mutation.TeamReportID(); exists {
			s.SetIgnore(hostservicereport.FieldTeamReportID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HostServiceReportUpsertOne) Ignore() *HostServiceReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostServiceReportUpsertOne) DoNothing() *HostServiceReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostServiceReportCreate.OnConflict
// documentation for more info.
func (u *HostServiceReportUpsertOne) Update(set func(*HostServiceReportUpsert)) *HostServiceReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostServiceReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *HostServiceReportUpsertOne) SetUpdateTime(v time.Time) *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HostServiceReportUpsertOne) UpdateUpdateTime() *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *HostServiceReportUpsertOne) ClearUpdateTime() *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.ClearUpdateTime()
	})
}

// SetPoints sets the "points" field.
func (u *HostServiceReportUpsertOne) SetPoints(v int) *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *HostServiceReportUpsertOne) AddPoints(v int) *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *HostServiceReportUpsertOne) UpdatePoints() *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdatePoints()
	})
}

// SetPassing sets the "passing" field.
func (u *HostServiceReportUpsertOne) SetPassing(v bool) *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetPassing(v)
	})
}

// UpdatePassing sets the "passing" field to the value that was provided on create.
func (u *HostServiceReportUpsertOne) UpdatePassing() *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdatePassing()
	})
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (u *HostServiceReportUpsertOne) SetLatestCheckTime(v time.Time) *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetLatestCheckTime(v)
	})
}

// UpdateLatestCheckTime sets the "latest_check_time" field to the value that was provided on create.
func (u *HostServiceReportUpsertOne) UpdateLatestCheckTime() *HostServiceReportUpsertOne {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdateLatestCheckTime()
	})
}

// Exec executes the query.
func (u *HostServiceReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for HostServiceReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostServiceReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HostServiceReportUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: HostServiceReportUpsertOne.ID is not supported by MySQL driver. Use HostServiceReportUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HostServiceReportUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HostServiceReportCreateBulk is the builder for creating many HostServiceReport entities in bulk.
type HostServiceReportCreateBulk struct {
	config
	builders []*HostServiceReportCreate
	conflict []sql.ConflictOption
}

// Save creates the HostServiceReport entities in the database.
func (hsrcb *HostServiceReportCreateBulk) Save(ctx context.Context) ([]*HostServiceReport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hsrcb.builders))
	nodes := make([]*HostServiceReport, len(hsrcb.builders))
	mutators := make([]Mutator, len(hsrcb.builders))
	for i := range hsrcb.builders {
		func(i int, root context.Context) {
			builder := hsrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostServiceReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hsrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hsrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hsrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hsrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hsrcb *HostServiceReportCreateBulk) SaveX(ctx context.Context) []*HostServiceReport {
	v, err := hsrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hsrcb *HostServiceReportCreateBulk) Exec(ctx context.Context) error {
	_, err := hsrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsrcb *HostServiceReportCreateBulk) ExecX(ctx context.Context) {
	if err := hsrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostServiceReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostServiceReportUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (hsrcb *HostServiceReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *HostServiceReportUpsertBulk {
	hsrcb.conflict = opts
	return &HostServiceReportUpsertBulk{
		create: hsrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hsrcb *HostServiceReportCreateBulk) OnConflictColumns(columns ...string) *HostServiceReportUpsertBulk {
	hsrcb.conflict = append(hsrcb.conflict, sql.ConflictColumns(columns...))
	return &HostServiceReportUpsertBulk{
		create: hsrcb,
	}
}

// HostServiceReportUpsertBulk is the builder for "upsert"-ing
// a bulk of HostServiceReport nodes.
type HostServiceReportUpsertBulk struct {
	create *HostServiceReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hostservicereport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HostServiceReportUpsertBulk) UpdateNewValues() *HostServiceReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hostservicereport.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(hostservicereport.FieldCreateTime)
			}
			if _, exists := b.mutation.HostServiceID(); exists {
				s.SetIgnore(hostservicereport.FieldHostServiceID)
			}
			if _, exists := b.mutation.ServiceID(); exists {
				s.SetIgnore(hostservicereport.FieldServiceID)
			}
			if _, exists := b.mutation.TeamID(); exists {
				s.SetIgnore(hostservicereport.FieldTeamID)
			}
			if _, exists := b.mutation.TeamReportID(); exists {
				s.SetIgnore(hostservicereport.FieldTeamReportID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostServiceReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HostServiceReportUpsertBulk) Ignore() *HostServiceReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostServiceReportUpsertBulk) DoNothing() *HostServiceReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostServiceReportCreateBulk.OnConflict
// documentation for more info.
func (u *HostServiceReportUpsertBulk) Update(set func(*HostServiceReportUpsert)) *HostServiceReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostServiceReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *HostServiceReportUpsertBulk) SetUpdateTime(v time.Time) *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *HostServiceReportUpsertBulk) UpdateUpdateTime() *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *HostServiceReportUpsertBulk) ClearUpdateTime() *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.ClearUpdateTime()
	})
}

// SetPoints sets the "points" field.
func (u *HostServiceReportUpsertBulk) SetPoints(v int) *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *HostServiceReportUpsertBulk) AddPoints(v int) *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *HostServiceReportUpsertBulk) UpdatePoints() *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdatePoints()
	})
}

// SetPassing sets the "passing" field.
func (u *HostServiceReportUpsertBulk) SetPassing(v bool) *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetPassing(v)
	})
}

// UpdatePassing sets the "passing" field to the value that was provided on create.
func (u *HostServiceReportUpsertBulk) UpdatePassing() *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdatePassing()
	})
}

// SetLatestCheckTime sets the "latest_check_time" field.
func (u *HostServiceReportUpsertBulk) SetLatestCheckTime(v time.Time) *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.SetLatestCheckTime(v)
	})
}

// UpdateLatestCheckTime sets the "latest_check_time" field to the value that was provided on create.
func (u *HostServiceReportUpsertBulk) UpdateLatestCheckTime() *HostServiceReportUpsertBulk {
	return u.Update(func(s *HostServiceReportUpsert) {
		s.UpdateLatestCheckTime()
	})
}

// Exec executes the query.
func (u *HostServiceReportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the HostServiceReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for HostServiceReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostServiceReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
