// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/ScoreTrak/ScoreTrak/pkg/entities/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/apitoken"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/check"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/host"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/hostservicereport"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/property"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/round"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/service"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/team"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/teamreport"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ApiToken is the client for interacting with the ApiToken builders.
	ApiToken *ApiTokenClient
	// Check is the client for interacting with the Check builders.
	Check *CheckClient
	// Competition is the client for interacting with the Competition builders.
	Competition *CompetitionClient
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// HostService is the client for interacting with the HostService builders.
	HostService *HostServiceClient
	// HostServiceReport is the client for interacting with the HostServiceReport builders.
	HostServiceReport *HostServiceReportClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// Round is the client for interacting with the Round builders.
	Round *RoundClient
	// Service is the client for interacting with the Service builders.
	Service *ServiceClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
	// TeamReport is the client for interacting with the TeamReport builders.
	TeamReport *TeamReportClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ApiToken = NewApiTokenClient(c.config)
	c.Check = NewCheckClient(c.config)
	c.Competition = NewCompetitionClient(c.config)
	c.Host = NewHostClient(c.config)
	c.HostService = NewHostServiceClient(c.config)
	c.HostServiceReport = NewHostServiceReportClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.Round = NewRoundClient(c.config)
	c.Service = NewServiceClient(c.config)
	c.Team = NewTeamClient(c.config)
	c.TeamReport = NewTeamReportClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("entities: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entities: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ApiToken:          NewApiTokenClient(cfg),
		Check:             NewCheckClient(cfg),
		Competition:       NewCompetitionClient(cfg),
		Host:              NewHostClient(cfg),
		HostService:       NewHostServiceClient(cfg),
		HostServiceReport: NewHostServiceReportClient(cfg),
		Property:          NewPropertyClient(cfg),
		Round:             NewRoundClient(cfg),
		Service:           NewServiceClient(cfg),
		Team:              NewTeamClient(cfg),
		TeamReport:        NewTeamReportClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		ApiToken:          NewApiTokenClient(cfg),
		Check:             NewCheckClient(cfg),
		Competition:       NewCompetitionClient(cfg),
		Host:              NewHostClient(cfg),
		HostService:       NewHostServiceClient(cfg),
		HostServiceReport: NewHostServiceReportClient(cfg),
		Property:          NewPropertyClient(cfg),
		Round:             NewRoundClient(cfg),
		Service:           NewServiceClient(cfg),
		Team:              NewTeamClient(cfg),
		TeamReport:        NewTeamReportClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ApiToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.ApiToken, c.Check, c.Competition, c.Host, c.HostService, c.HostServiceReport,
		c.Property, c.Round, c.Service, c.Team, c.TeamReport,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.ApiToken, c.Check, c.Competition, c.Host, c.HostService, c.HostServiceReport,
		c.Property, c.Round, c.Service, c.Team, c.TeamReport,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ApiTokenMutation:
		return c.ApiToken.mutate(ctx, m)
	case *CheckMutation:
		return c.Check.mutate(ctx, m)
	case *CompetitionMutation:
		return c.Competition.mutate(ctx, m)
	case *HostMutation:
		return c.Host.mutate(ctx, m)
	case *HostServiceMutation:
		return c.HostService.mutate(ctx, m)
	case *HostServiceReportMutation:
		return c.HostServiceReport.mutate(ctx, m)
	case *PropertyMutation:
		return c.Property.mutate(ctx, m)
	case *RoundMutation:
		return c.Round.mutate(ctx, m)
	case *ServiceMutation:
		return c.Service.mutate(ctx, m)
	case *TeamMutation:
		return c.Team.mutate(ctx, m)
	case *TeamReportMutation:
		return c.TeamReport.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entities: unknown mutation type %T", m)
	}
}

// ApiTokenClient is a client for the ApiToken schema.
type ApiTokenClient struct {
	config
}

// NewApiTokenClient returns a client for the ApiToken from the given config.
func NewApiTokenClient(c config) *ApiTokenClient {
	return &ApiTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apitoken.Hooks(f(g(h())))`.
func (c *ApiTokenClient) Use(hooks ...Hook) {
	c.hooks.ApiToken = append(c.hooks.ApiToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apitoken.Intercept(f(g(h())))`.
func (c *ApiTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.ApiToken = append(c.inters.ApiToken, interceptors...)
}

// Create returns a builder for creating a ApiToken entity.
func (c *ApiTokenClient) Create() *ApiTokenCreate {
	mutation := newApiTokenMutation(c.config, OpCreate)
	return &ApiTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ApiToken entities.
func (c *ApiTokenClient) CreateBulk(builders ...*ApiTokenCreate) *ApiTokenCreateBulk {
	return &ApiTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ApiToken.
func (c *ApiTokenClient) Update() *ApiTokenUpdate {
	mutation := newApiTokenMutation(c.config, OpUpdate)
	return &ApiTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiTokenClient) UpdateOne(at *ApiToken) *ApiTokenUpdateOne {
	mutation := newApiTokenMutation(c.config, OpUpdateOne, withApiToken(at))
	return &ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiTokenClient) UpdateOneID(id string) *ApiTokenUpdateOne {
	mutation := newApiTokenMutation(c.config, OpUpdateOne, withApiTokenID(id))
	return &ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ApiToken.
func (c *ApiTokenClient) Delete() *ApiTokenDelete {
	mutation := newApiTokenMutation(c.config, OpDelete)
	return &ApiTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApiTokenClient) DeleteOne(at *ApiToken) *ApiTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApiTokenClient) DeleteOneID(id string) *ApiTokenDeleteOne {
	builder := c.Delete().Where(apitoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApiTokenDeleteOne{builder}
}

// Query returns a query builder for ApiToken.
func (c *ApiTokenClient) Query() *ApiTokenQuery {
	return &ApiTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApiToken},
		inters: c.Interceptors(),
	}
}

// Get returns a ApiToken entity by its id.
func (c *ApiTokenClient) Get(ctx context.Context, id string) (*ApiToken, error) {
	return c.Query().Where(apitoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiTokenClient) GetX(ctx context.Context, id string) *ApiToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApiTokenClient) Hooks() []Hook {
	return c.hooks.ApiToken
}

// Interceptors returns the client interceptors.
func (c *ApiTokenClient) Interceptors() []Interceptor {
	return c.inters.ApiToken
}

func (c *ApiTokenClient) mutate(ctx context.Context, m *ApiTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApiTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApiTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApiTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApiTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown ApiToken mutation op: %q", m.Op())
	}
}

// CheckClient is a client for the Check schema.
type CheckClient struct {
	config
}

// NewCheckClient returns a client for the Check from the given config.
func NewCheckClient(c config) *CheckClient {
	return &CheckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `check.Hooks(f(g(h())))`.
func (c *CheckClient) Use(hooks ...Hook) {
	c.hooks.Check = append(c.hooks.Check, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `check.Intercept(f(g(h())))`.
func (c *CheckClient) Intercept(interceptors ...Interceptor) {
	c.inters.Check = append(c.inters.Check, interceptors...)
}

// Create returns a builder for creating a Check entity.
func (c *CheckClient) Create() *CheckCreate {
	mutation := newCheckMutation(c.config, OpCreate)
	return &CheckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Check entities.
func (c *CheckClient) CreateBulk(builders ...*CheckCreate) *CheckCreateBulk {
	return &CheckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Check.
func (c *CheckClient) Update() *CheckUpdate {
	mutation := newCheckMutation(c.config, OpUpdate)
	return &CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckClient) UpdateOne(ch *Check) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheck(ch))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckClient) UpdateOneID(id string) *CheckUpdateOne {
	mutation := newCheckMutation(c.config, OpUpdateOne, withCheckID(id))
	return &CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Check.
func (c *CheckClient) Delete() *CheckDelete {
	mutation := newCheckMutation(c.config, OpDelete)
	return &CheckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CheckClient) DeleteOne(ch *Check) *CheckDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CheckClient) DeleteOneID(id string) *CheckDeleteOne {
	builder := c.Delete().Where(check.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckDeleteOne{builder}
}

// Query returns a query builder for Check.
func (c *CheckClient) Query() *CheckQuery {
	return &CheckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCheck},
		inters: c.Interceptors(),
	}
}

// Get returns a Check entity by its id.
func (c *CheckClient) Get(ctx context.Context, id string) (*Check, error) {
	return c.Query().Where(check.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckClient) GetX(ctx context.Context, id string) *Check {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRound queries the round edge of a Check.
func (c *CheckClient) QueryRound(ch *Check) *RoundQuery {
	query := (&RoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(check.Table, check.FieldID, id),
			sqlgraph.To(round.Table, round.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, check.RoundTable, check.RoundColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservice queries the hostservice edge of a Check.
func (c *CheckClient) QueryHostservice(ch *Check) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(check.Table, check.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, check.HostserviceTable, check.HostserviceColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckClient) Hooks() []Hook {
	return c.hooks.Check
}

// Interceptors returns the client interceptors.
func (c *CheckClient) Interceptors() []Interceptor {
	return c.inters.Check
}

func (c *CheckClient) mutate(ctx context.Context, m *CheckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CheckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CheckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CheckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Check mutation op: %q", m.Op())
	}
}

// CompetitionClient is a client for the Competition schema.
type CompetitionClient struct {
	config
}

// NewCompetitionClient returns a client for the Competition from the given config.
func NewCompetitionClient(c config) *CompetitionClient {
	return &CompetitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `competition.Hooks(f(g(h())))`.
func (c *CompetitionClient) Use(hooks ...Hook) {
	c.hooks.Competition = append(c.hooks.Competition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `competition.Intercept(f(g(h())))`.
func (c *CompetitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Competition = append(c.inters.Competition, interceptors...)
}

// Create returns a builder for creating a Competition entity.
func (c *CompetitionClient) Create() *CompetitionCreate {
	mutation := newCompetitionMutation(c.config, OpCreate)
	return &CompetitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Competition entities.
func (c *CompetitionClient) CreateBulk(builders ...*CompetitionCreate) *CompetitionCreateBulk {
	return &CompetitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Competition.
func (c *CompetitionClient) Update() *CompetitionUpdate {
	mutation := newCompetitionMutation(c.config, OpUpdate)
	return &CompetitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompetitionClient) UpdateOne(co *Competition) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetition(co))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompetitionClient) UpdateOneID(id string) *CompetitionUpdateOne {
	mutation := newCompetitionMutation(c.config, OpUpdateOne, withCompetitionID(id))
	return &CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Competition.
func (c *CompetitionClient) Delete() *CompetitionDelete {
	mutation := newCompetitionMutation(c.config, OpDelete)
	return &CompetitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompetitionClient) DeleteOne(co *Competition) *CompetitionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompetitionClient) DeleteOneID(id string) *CompetitionDeleteOne {
	builder := c.Delete().Where(competition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompetitionDeleteOne{builder}
}

// Query returns a query builder for Competition.
func (c *CompetitionClient) Query() *CompetitionQuery {
	return &CompetitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompetition},
		inters: c.Interceptors(),
	}
}

// Get returns a Competition entity by its id.
func (c *CompetitionClient) Get(ctx context.Context, id string) (*Competition, error) {
	return c.Query().Where(competition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompetitionClient) GetX(ctx context.Context, id string) *Competition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CompetitionClient) Hooks() []Hook {
	hooks := c.hooks.Competition
	return append(hooks[:len(hooks):len(hooks)], competition.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CompetitionClient) Interceptors() []Interceptor {
	return c.inters.Competition
}

func (c *CompetitionClient) mutate(ctx context.Context, m *CompetitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompetitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompetitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompetitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompetitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Competition mutation op: %q", m.Op())
	}
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `host.Intercept(f(g(h())))`.
func (c *HostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Host = append(c.inters.Host, interceptors...)
}

// Create returns a builder for creating a Host entity.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id string) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostClient) DeleteOneID(id string) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHost},
		inters: c.Interceptors(),
	}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id string) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id string) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostservices queries the hostservices edge of a Host.
func (c *HostClient) QueryHostservices(h *Host) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.HostservicesTable, host.HostservicesColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeam queries the team edge of a Host.
func (c *HostClient) QueryTeam(h *Host) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, host.TeamTable, host.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// Interceptors returns the client interceptors.
func (c *HostClient) Interceptors() []Interceptor {
	return c.inters.Host
}

func (c *HostClient) mutate(ctx context.Context, m *HostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Host mutation op: %q", m.Op())
	}
}

// HostServiceClient is a client for the HostService schema.
type HostServiceClient struct {
	config
}

// NewHostServiceClient returns a client for the HostService from the given config.
func NewHostServiceClient(c config) *HostServiceClient {
	return &HostServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostservice.Hooks(f(g(h())))`.
func (c *HostServiceClient) Use(hooks ...Hook) {
	c.hooks.HostService = append(c.hooks.HostService, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostservice.Intercept(f(g(h())))`.
func (c *HostServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostService = append(c.inters.HostService, interceptors...)
}

// Create returns a builder for creating a HostService entity.
func (c *HostServiceClient) Create() *HostServiceCreate {
	mutation := newHostServiceMutation(c.config, OpCreate)
	return &HostServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostService entities.
func (c *HostServiceClient) CreateBulk(builders ...*HostServiceCreate) *HostServiceCreateBulk {
	return &HostServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostService.
func (c *HostServiceClient) Update() *HostServiceUpdate {
	mutation := newHostServiceMutation(c.config, OpUpdate)
	return &HostServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostServiceClient) UpdateOne(hs *HostService) *HostServiceUpdateOne {
	mutation := newHostServiceMutation(c.config, OpUpdateOne, withHostService(hs))
	return &HostServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostServiceClient) UpdateOneID(id string) *HostServiceUpdateOne {
	mutation := newHostServiceMutation(c.config, OpUpdateOne, withHostServiceID(id))
	return &HostServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostService.
func (c *HostServiceClient) Delete() *HostServiceDelete {
	mutation := newHostServiceMutation(c.config, OpDelete)
	return &HostServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostServiceClient) DeleteOne(hs *HostService) *HostServiceDeleteOne {
	return c.DeleteOneID(hs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostServiceClient) DeleteOneID(id string) *HostServiceDeleteOne {
	builder := c.Delete().Where(hostservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostServiceDeleteOne{builder}
}

// Query returns a query builder for HostService.
func (c *HostServiceClient) Query() *HostServiceQuery {
	return &HostServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostService},
		inters: c.Interceptors(),
	}
}

// Get returns a HostService entity by its id.
func (c *HostServiceClient) Get(ctx context.Context, id string) (*HostService, error) {
	return c.Query().Where(hostservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostServiceClient) GetX(ctx context.Context, id string) *HostService {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecks queries the checks edge of a HostService.
func (c *HostServiceClient) QueryChecks(hs *HostService) *CheckQuery {
	query := (&CheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(check.Table, check.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hostservice.ChecksTable, hostservice.ChecksColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProperties queries the properties edge of a HostService.
func (c *HostServiceClient) QueryProperties(hs *HostService) *PropertyQuery {
	query := (&PropertyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hostservice.PropertiesTable, hostservice.PropertiesColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservicereport queries the hostservicereport edge of a HostService.
func (c *HostServiceClient) QueryHostservicereport(hs *HostService) *HostServiceReportQuery {
	query := (&HostServiceReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(hostservicereport.Table, hostservicereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hostservice.HostservicereportTable, hostservice.HostservicereportColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a HostService.
func (c *HostServiceClient) QueryService(hs *HostService) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservice.ServiceTable, hostservice.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHost queries the host edge of a HostService.
func (c *HostServiceClient) QueryHost(hs *HostService) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservice.HostTable, hostservice.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeam queries the team edge of a HostService.
func (c *HostServiceClient) QueryTeam(hs *HostService) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservice.TeamTable, hostservice.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(hs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostServiceClient) Hooks() []Hook {
	return c.hooks.HostService
}

// Interceptors returns the client interceptors.
func (c *HostServiceClient) Interceptors() []Interceptor {
	return c.inters.HostService
}

func (c *HostServiceClient) mutate(ctx context.Context, m *HostServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown HostService mutation op: %q", m.Op())
	}
}

// HostServiceReportClient is a client for the HostServiceReport schema.
type HostServiceReportClient struct {
	config
}

// NewHostServiceReportClient returns a client for the HostServiceReport from the given config.
func NewHostServiceReportClient(c config) *HostServiceReportClient {
	return &HostServiceReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostservicereport.Hooks(f(g(h())))`.
func (c *HostServiceReportClient) Use(hooks ...Hook) {
	c.hooks.HostServiceReport = append(c.hooks.HostServiceReport, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostservicereport.Intercept(f(g(h())))`.
func (c *HostServiceReportClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostServiceReport = append(c.inters.HostServiceReport, interceptors...)
}

// Create returns a builder for creating a HostServiceReport entity.
func (c *HostServiceReportClient) Create() *HostServiceReportCreate {
	mutation := newHostServiceReportMutation(c.config, OpCreate)
	return &HostServiceReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostServiceReport entities.
func (c *HostServiceReportClient) CreateBulk(builders ...*HostServiceReportCreate) *HostServiceReportCreateBulk {
	return &HostServiceReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostServiceReport.
func (c *HostServiceReportClient) Update() *HostServiceReportUpdate {
	mutation := newHostServiceReportMutation(c.config, OpUpdate)
	return &HostServiceReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostServiceReportClient) UpdateOne(hsr *HostServiceReport) *HostServiceReportUpdateOne {
	mutation := newHostServiceReportMutation(c.config, OpUpdateOne, withHostServiceReport(hsr))
	return &HostServiceReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostServiceReportClient) UpdateOneID(id string) *HostServiceReportUpdateOne {
	mutation := newHostServiceReportMutation(c.config, OpUpdateOne, withHostServiceReportID(id))
	return &HostServiceReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostServiceReport.
func (c *HostServiceReportClient) Delete() *HostServiceReportDelete {
	mutation := newHostServiceReportMutation(c.config, OpDelete)
	return &HostServiceReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostServiceReportClient) DeleteOne(hsr *HostServiceReport) *HostServiceReportDeleteOne {
	return c.DeleteOneID(hsr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostServiceReportClient) DeleteOneID(id string) *HostServiceReportDeleteOne {
	builder := c.Delete().Where(hostservicereport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostServiceReportDeleteOne{builder}
}

// Query returns a query builder for HostServiceReport.
func (c *HostServiceReportClient) Query() *HostServiceReportQuery {
	return &HostServiceReportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostServiceReport},
		inters: c.Interceptors(),
	}
}

// Get returns a HostServiceReport entity by its id.
func (c *HostServiceReportClient) Get(ctx context.Context, id string) (*HostServiceReport, error) {
	return c.Query().Where(hostservicereport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostServiceReportClient) GetX(ctx context.Context, id string) *HostServiceReport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostservice queries the hostservice edge of a HostServiceReport.
func (c *HostServiceReportClient) QueryHostservice(hsr *HostServiceReport) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservicereport.Table, hostservicereport.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hostservicereport.HostserviceTable, hostservicereport.HostserviceColumn),
		)
		fromV = sqlgraph.Neighbors(hsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryService queries the service edge of a HostServiceReport.
func (c *HostServiceReportClient) QueryService(hsr *HostServiceReport) *ServiceQuery {
	query := (&ServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservicereport.Table, hostservicereport.FieldID, id),
			sqlgraph.To(service.Table, service.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservicereport.ServiceTable, hostservicereport.ServiceColumn),
		)
		fromV = sqlgraph.Neighbors(hsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeam queries the team edge of a HostServiceReport.
func (c *HostServiceReportClient) QueryTeam(hsr *HostServiceReport) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservicereport.Table, hostservicereport.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservicereport.TeamTable, hostservicereport.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(hsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamreport queries the teamreport edge of a HostServiceReport.
func (c *HostServiceReportClient) QueryTeamreport(hsr *HostServiceReport) *TeamReportQuery {
	query := (&TeamReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservicereport.Table, hostservicereport.FieldID, id),
			sqlgraph.To(teamreport.Table, teamreport.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservicereport.TeamreportTable, hostservicereport.TeamreportColumn),
		)
		fromV = sqlgraph.Neighbors(hsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostServiceReportClient) Hooks() []Hook {
	return c.hooks.HostServiceReport
}

// Interceptors returns the client interceptors.
func (c *HostServiceReportClient) Interceptors() []Interceptor {
	return c.inters.HostServiceReport
}

func (c *HostServiceReportClient) mutate(ctx context.Context, m *HostServiceReportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostServiceReportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostServiceReportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostServiceReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostServiceReportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown HostServiceReport mutation op: %q", m.Op())
	}
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `property.Intercept(f(g(h())))`.
func (c *PropertyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Property = append(c.inters.Property, interceptors...)
}

// Create returns a builder for creating a Property entity.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id string) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PropertyClient) DeleteOneID(id string) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Query returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProperty},
		inters: c.Interceptors(),
	}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id string) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id string) *Property {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostservice queries the hostservice edge of a Property.
func (c *PropertyClient) QueryHostservice(pr *Property) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(property.Table, property.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, property.HostserviceTable, property.HostserviceColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	return c.hooks.Property
}

// Interceptors returns the client interceptors.
func (c *PropertyClient) Interceptors() []Interceptor {
	return c.inters.Property
}

func (c *PropertyClient) mutate(ctx context.Context, m *PropertyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Property mutation op: %q", m.Op())
	}
}

// RoundClient is a client for the Round schema.
type RoundClient struct {
	config
}

// NewRoundClient returns a client for the Round from the given config.
func NewRoundClient(c config) *RoundClient {
	return &RoundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `round.Hooks(f(g(h())))`.
func (c *RoundClient) Use(hooks ...Hook) {
	c.hooks.Round = append(c.hooks.Round, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `round.Intercept(f(g(h())))`.
func (c *RoundClient) Intercept(interceptors ...Interceptor) {
	c.inters.Round = append(c.inters.Round, interceptors...)
}

// Create returns a builder for creating a Round entity.
func (c *RoundClient) Create() *RoundCreate {
	mutation := newRoundMutation(c.config, OpCreate)
	return &RoundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Round entities.
func (c *RoundClient) CreateBulk(builders ...*RoundCreate) *RoundCreateBulk {
	return &RoundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Round.
func (c *RoundClient) Update() *RoundUpdate {
	mutation := newRoundMutation(c.config, OpUpdate)
	return &RoundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoundClient) UpdateOne(r *Round) *RoundUpdateOne {
	mutation := newRoundMutation(c.config, OpUpdateOne, withRound(r))
	return &RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoundClient) UpdateOneID(id string) *RoundUpdateOne {
	mutation := newRoundMutation(c.config, OpUpdateOne, withRoundID(id))
	return &RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Round.
func (c *RoundClient) Delete() *RoundDelete {
	mutation := newRoundMutation(c.config, OpDelete)
	return &RoundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoundClient) DeleteOne(r *Round) *RoundDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoundClient) DeleteOneID(id string) *RoundDeleteOne {
	builder := c.Delete().Where(round.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoundDeleteOne{builder}
}

// Query returns a query builder for Round.
func (c *RoundClient) Query() *RoundQuery {
	return &RoundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRound},
		inters: c.Interceptors(),
	}
}

// Get returns a Round entity by its id.
func (c *RoundClient) Get(ctx context.Context, id string) (*Round, error) {
	return c.Query().Where(round.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoundClient) GetX(ctx context.Context, id string) *Round {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChecks queries the checks edge of a Round.
func (c *RoundClient) QueryChecks(r *Round) *CheckQuery {
	query := (&CheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(round.Table, round.FieldID, id),
			sqlgraph.To(check.Table, check.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, round.ChecksTable, round.ChecksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoundClient) Hooks() []Hook {
	return c.hooks.Round
}

// Interceptors returns the client interceptors.
func (c *RoundClient) Interceptors() []Interceptor {
	return c.inters.Round
}

func (c *RoundClient) mutate(ctx context.Context, m *RoundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Round mutation op: %q", m.Op())
	}
}

// ServiceClient is a client for the Service schema.
type ServiceClient struct {
	config
}

// NewServiceClient returns a client for the Service from the given config.
func NewServiceClient(c config) *ServiceClient {
	return &ServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `service.Hooks(f(g(h())))`.
func (c *ServiceClient) Use(hooks ...Hook) {
	c.hooks.Service = append(c.hooks.Service, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `service.Intercept(f(g(h())))`.
func (c *ServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Service = append(c.inters.Service, interceptors...)
}

// Create returns a builder for creating a Service entity.
func (c *ServiceClient) Create() *ServiceCreate {
	mutation := newServiceMutation(c.config, OpCreate)
	return &ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Service entities.
func (c *ServiceClient) CreateBulk(builders ...*ServiceCreate) *ServiceCreateBulk {
	return &ServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Service.
func (c *ServiceClient) Update() *ServiceUpdate {
	mutation := newServiceMutation(c.config, OpUpdate)
	return &ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ServiceClient) UpdateOne(s *Service) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withService(s))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ServiceClient) UpdateOneID(id string) *ServiceUpdateOne {
	mutation := newServiceMutation(c.config, OpUpdateOne, withServiceID(id))
	return &ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Service.
func (c *ServiceClient) Delete() *ServiceDelete {
	mutation := newServiceMutation(c.config, OpDelete)
	return &ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ServiceClient) DeleteOne(s *Service) *ServiceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ServiceClient) DeleteOneID(id string) *ServiceDeleteOne {
	builder := c.Delete().Where(service.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ServiceDeleteOne{builder}
}

// Query returns a query builder for Service.
func (c *ServiceClient) Query() *ServiceQuery {
	return &ServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeService},
		inters: c.Interceptors(),
	}
}

// Get returns a Service entity by its id.
func (c *ServiceClient) Get(ctx context.Context, id string) (*Service, error) {
	return c.Query().Where(service.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ServiceClient) GetX(ctx context.Context, id string) *Service {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostservices queries the hostservices edge of a Service.
func (c *ServiceClient) QueryHostservices(s *Service) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.HostservicesTable, service.HostservicesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservicereports queries the hostservicereports edge of a Service.
func (c *ServiceClient) QueryHostservicereports(s *Service) *HostServiceReportQuery {
	query := (&HostServiceReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(service.Table, service.FieldID, id),
			sqlgraph.To(hostservicereport.Table, hostservicereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, service.HostservicereportsTable, service.HostservicereportsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ServiceClient) Hooks() []Hook {
	return c.hooks.Service
}

// Interceptors returns the client interceptors.
func (c *ServiceClient) Interceptors() []Interceptor {
	return c.inters.Service
}

func (c *ServiceClient) mutate(ctx context.Context, m *ServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Service mutation op: %q", m.Op())
	}
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `team.Intercept(f(g(h())))`.
func (c *TeamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Team = append(c.inters.Team, interceptors...)
}

// Create returns a builder for creating a Team entity.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id string) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamClient) DeleteOneID(id string) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeam},
		inters: c.Interceptors(),
	}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id string) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id string) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHosts queries the hosts edge of a Team.
func (c *TeamClient) QueryHosts(t *Team) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.HostsTable, team.HostsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservices queries the hostservices edge of a Team.
func (c *TeamClient) QueryHostservices(t *Team) *HostServiceQuery {
	query := (&HostServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(hostservice.Table, hostservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.HostservicesTable, team.HostservicesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTeamreport queries the teamreport edge of a Team.
func (c *TeamClient) QueryTeamreport(t *Team) *TeamReportQuery {
	query := (&TeamReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(teamreport.Table, teamreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, team.TeamreportTable, team.TeamreportColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservicereports queries the hostservicereports edge of a Team.
func (c *TeamClient) QueryHostservicereports(t *Team) *HostServiceReportQuery {
	query := (&HostServiceReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(hostservicereport.Table, hostservicereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.HostservicereportsTable, team.HostservicereportsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// Interceptors returns the client interceptors.
func (c *TeamClient) Interceptors() []Interceptor {
	return c.inters.Team
}

func (c *TeamClient) mutate(ctx context.Context, m *TeamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown Team mutation op: %q", m.Op())
	}
}

// TeamReportClient is a client for the TeamReport schema.
type TeamReportClient struct {
	config
}

// NewTeamReportClient returns a client for the TeamReport from the given config.
func NewTeamReportClient(c config) *TeamReportClient {
	return &TeamReportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `teamreport.Hooks(f(g(h())))`.
func (c *TeamReportClient) Use(hooks ...Hook) {
	c.hooks.TeamReport = append(c.hooks.TeamReport, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `teamreport.Intercept(f(g(h())))`.
func (c *TeamReportClient) Intercept(interceptors ...Interceptor) {
	c.inters.TeamReport = append(c.inters.TeamReport, interceptors...)
}

// Create returns a builder for creating a TeamReport entity.
func (c *TeamReportClient) Create() *TeamReportCreate {
	mutation := newTeamReportMutation(c.config, OpCreate)
	return &TeamReportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TeamReport entities.
func (c *TeamReportClient) CreateBulk(builders ...*TeamReportCreate) *TeamReportCreateBulk {
	return &TeamReportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TeamReport.
func (c *TeamReportClient) Update() *TeamReportUpdate {
	mutation := newTeamReportMutation(c.config, OpUpdate)
	return &TeamReportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamReportClient) UpdateOne(tr *TeamReport) *TeamReportUpdateOne {
	mutation := newTeamReportMutation(c.config, OpUpdateOne, withTeamReport(tr))
	return &TeamReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamReportClient) UpdateOneID(id string) *TeamReportUpdateOne {
	mutation := newTeamReportMutation(c.config, OpUpdateOne, withTeamReportID(id))
	return &TeamReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TeamReport.
func (c *TeamReportClient) Delete() *TeamReportDelete {
	mutation := newTeamReportMutation(c.config, OpDelete)
	return &TeamReportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamReportClient) DeleteOne(tr *TeamReport) *TeamReportDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamReportClient) DeleteOneID(id string) *TeamReportDeleteOne {
	builder := c.Delete().Where(teamreport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamReportDeleteOne{builder}
}

// Query returns a query builder for TeamReport.
func (c *TeamReportClient) Query() *TeamReportQuery {
	return &TeamReportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeamReport},
		inters: c.Interceptors(),
	}
}

// Get returns a TeamReport entity by its id.
func (c *TeamReportClient) Get(ctx context.Context, id string) (*TeamReport, error) {
	return c.Query().Where(teamreport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamReportClient) GetX(ctx context.Context, id string) *TeamReport {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeam queries the team edge of a TeamReport.
func (c *TeamReportClient) QueryTeam(tr *TeamReport) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teamreport.Table, teamreport.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, teamreport.TeamTable, teamreport.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostservicereports queries the hostservicereports edge of a TeamReport.
func (c *TeamReportClient) QueryHostservicereports(tr *TeamReport) *HostServiceReportQuery {
	query := (&HostServiceReportClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(teamreport.Table, teamreport.FieldID, id),
			sqlgraph.To(hostservicereport.Table, hostservicereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teamreport.HostservicereportsTable, teamreport.HostservicereportsColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamReportClient) Hooks() []Hook {
	return c.hooks.TeamReport
}

// Interceptors returns the client interceptors.
func (c *TeamReportClient) Interceptors() []Interceptor {
	return c.inters.TeamReport
}

func (c *TeamReportClient) mutate(ctx context.Context, m *TeamReportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamReportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamReportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamReportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamReportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entities: unknown TeamReport mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ApiToken, Check, Competition, Host, HostService, HostServiceReport, Property,
		Round, Service, Team, TeamReport []ent.Hook
	}
	inters struct {
		ApiToken, Check, Competition, Host, HostService, HostServiceReport, Property,
		Round, Service, Team, TeamReport []ent.Interceptor
	}
)
