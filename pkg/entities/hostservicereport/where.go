// Code generated by ent, DO NOT EDIT.

package hostservicereport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/pkg/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldUpdateTime, v))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldPoints, v))
}

// Passing applies equality check predicate on the "passing" field. It's identical to PassingEQ.
func Passing(v bool) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldPassing, v))
}

// LatestCheckTime applies equality check predicate on the "latest_check_time" field. It's identical to LatestCheckTimeEQ.
func LatestCheckTime(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldLatestCheckTime, v))
}

// HostServiceID applies equality check predicate on the "host_service_id" field. It's identical to HostServiceIDEQ.
func HostServiceID(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldHostServiceID, v))
}

// ServiceID applies equality check predicate on the "service_id" field. It's identical to ServiceIDEQ.
func ServiceID(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldServiceID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldTeamID, v))
}

// TeamReportID applies equality check predicate on the "team_report_id" field. It's identical to TeamReportIDEQ.
func TeamReportID(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldTeamReportID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotNull(FieldUpdateTime))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldPoints, v))
}

// PassingEQ applies the EQ predicate on the "passing" field.
func PassingEQ(v bool) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldPassing, v))
}

// PassingNEQ applies the NEQ predicate on the "passing" field.
func PassingNEQ(v bool) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldPassing, v))
}

// LatestCheckTimeEQ applies the EQ predicate on the "latest_check_time" field.
func LatestCheckTimeEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldLatestCheckTime, v))
}

// LatestCheckTimeNEQ applies the NEQ predicate on the "latest_check_time" field.
func LatestCheckTimeNEQ(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldLatestCheckTime, v))
}

// LatestCheckTimeIn applies the In predicate on the "latest_check_time" field.
func LatestCheckTimeIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldLatestCheckTime, vs...))
}

// LatestCheckTimeNotIn applies the NotIn predicate on the "latest_check_time" field.
func LatestCheckTimeNotIn(vs ...time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldLatestCheckTime, vs...))
}

// LatestCheckTimeGT applies the GT predicate on the "latest_check_time" field.
func LatestCheckTimeGT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldLatestCheckTime, v))
}

// LatestCheckTimeGTE applies the GTE predicate on the "latest_check_time" field.
func LatestCheckTimeGTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldLatestCheckTime, v))
}

// LatestCheckTimeLT applies the LT predicate on the "latest_check_time" field.
func LatestCheckTimeLT(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldLatestCheckTime, v))
}

// LatestCheckTimeLTE applies the LTE predicate on the "latest_check_time" field.
func LatestCheckTimeLTE(v time.Time) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldLatestCheckTime, v))
}

// HostServiceIDEQ applies the EQ predicate on the "host_service_id" field.
func HostServiceIDEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldHostServiceID, v))
}

// HostServiceIDNEQ applies the NEQ predicate on the "host_service_id" field.
func HostServiceIDNEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldHostServiceID, v))
}

// HostServiceIDIn applies the In predicate on the "host_service_id" field.
func HostServiceIDIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldHostServiceID, vs...))
}

// HostServiceIDNotIn applies the NotIn predicate on the "host_service_id" field.
func HostServiceIDNotIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldHostServiceID, vs...))
}

// HostServiceIDGT applies the GT predicate on the "host_service_id" field.
func HostServiceIDGT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldHostServiceID, v))
}

// HostServiceIDGTE applies the GTE predicate on the "host_service_id" field.
func HostServiceIDGTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldHostServiceID, v))
}

// HostServiceIDLT applies the LT predicate on the "host_service_id" field.
func HostServiceIDLT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldHostServiceID, v))
}

// HostServiceIDLTE applies the LTE predicate on the "host_service_id" field.
func HostServiceIDLTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldHostServiceID, v))
}

// HostServiceIDContains applies the Contains predicate on the "host_service_id" field.
func HostServiceIDContains(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContains(FieldHostServiceID, v))
}

// HostServiceIDHasPrefix applies the HasPrefix predicate on the "host_service_id" field.
func HostServiceIDHasPrefix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasPrefix(FieldHostServiceID, v))
}

// HostServiceIDHasSuffix applies the HasSuffix predicate on the "host_service_id" field.
func HostServiceIDHasSuffix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasSuffix(FieldHostServiceID, v))
}

// HostServiceIDEqualFold applies the EqualFold predicate on the "host_service_id" field.
func HostServiceIDEqualFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEqualFold(FieldHostServiceID, v))
}

// HostServiceIDContainsFold applies the ContainsFold predicate on the "host_service_id" field.
func HostServiceIDContainsFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContainsFold(FieldHostServiceID, v))
}

// ServiceIDEQ applies the EQ predicate on the "service_id" field.
func ServiceIDEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldServiceID, v))
}

// ServiceIDNEQ applies the NEQ predicate on the "service_id" field.
func ServiceIDNEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldServiceID, v))
}

// ServiceIDIn applies the In predicate on the "service_id" field.
func ServiceIDIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldServiceID, vs...))
}

// ServiceIDNotIn applies the NotIn predicate on the "service_id" field.
func ServiceIDNotIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldServiceID, vs...))
}

// ServiceIDGT applies the GT predicate on the "service_id" field.
func ServiceIDGT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldServiceID, v))
}

// ServiceIDGTE applies the GTE predicate on the "service_id" field.
func ServiceIDGTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldServiceID, v))
}

// ServiceIDLT applies the LT predicate on the "service_id" field.
func ServiceIDLT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldServiceID, v))
}

// ServiceIDLTE applies the LTE predicate on the "service_id" field.
func ServiceIDLTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldServiceID, v))
}

// ServiceIDContains applies the Contains predicate on the "service_id" field.
func ServiceIDContains(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContains(FieldServiceID, v))
}

// ServiceIDHasPrefix applies the HasPrefix predicate on the "service_id" field.
func ServiceIDHasPrefix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasPrefix(FieldServiceID, v))
}

// ServiceIDHasSuffix applies the HasSuffix predicate on the "service_id" field.
func ServiceIDHasSuffix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasSuffix(FieldServiceID, v))
}

// ServiceIDEqualFold applies the EqualFold predicate on the "service_id" field.
func ServiceIDEqualFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEqualFold(FieldServiceID, v))
}

// ServiceIDContainsFold applies the ContainsFold predicate on the "service_id" field.
func ServiceIDContainsFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContainsFold(FieldServiceID, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContainsFold(FieldTeamID, v))
}

// TeamReportIDEQ applies the EQ predicate on the "team_report_id" field.
func TeamReportIDEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEQ(FieldTeamReportID, v))
}

// TeamReportIDNEQ applies the NEQ predicate on the "team_report_id" field.
func TeamReportIDNEQ(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNEQ(FieldTeamReportID, v))
}

// TeamReportIDIn applies the In predicate on the "team_report_id" field.
func TeamReportIDIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIn(FieldTeamReportID, vs...))
}

// TeamReportIDNotIn applies the NotIn predicate on the "team_report_id" field.
func TeamReportIDNotIn(vs ...string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotIn(FieldTeamReportID, vs...))
}

// TeamReportIDGT applies the GT predicate on the "team_report_id" field.
func TeamReportIDGT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGT(FieldTeamReportID, v))
}

// TeamReportIDGTE applies the GTE predicate on the "team_report_id" field.
func TeamReportIDGTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldGTE(FieldTeamReportID, v))
}

// TeamReportIDLT applies the LT predicate on the "team_report_id" field.
func TeamReportIDLT(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLT(FieldTeamReportID, v))
}

// TeamReportIDLTE applies the LTE predicate on the "team_report_id" field.
func TeamReportIDLTE(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldLTE(FieldTeamReportID, v))
}

// TeamReportIDContains applies the Contains predicate on the "team_report_id" field.
func TeamReportIDContains(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContains(FieldTeamReportID, v))
}

// TeamReportIDHasPrefix applies the HasPrefix predicate on the "team_report_id" field.
func TeamReportIDHasPrefix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasPrefix(FieldTeamReportID, v))
}

// TeamReportIDHasSuffix applies the HasSuffix predicate on the "team_report_id" field.
func TeamReportIDHasSuffix(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldHasSuffix(FieldTeamReportID, v))
}

// TeamReportIDIsNil applies the IsNil predicate on the "team_report_id" field.
func TeamReportIDIsNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldIsNull(FieldTeamReportID))
}

// TeamReportIDNotNil applies the NotNil predicate on the "team_report_id" field.
func TeamReportIDNotNil() predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldNotNull(FieldTeamReportID))
}

// TeamReportIDEqualFold applies the EqualFold predicate on the "team_report_id" field.
func TeamReportIDEqualFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldEqualFold(FieldTeamReportID, v))
}

// TeamReportIDContainsFold applies the ContainsFold predicate on the "team_report_id" field.
func TeamReportIDContainsFold(v string) predicate.HostServiceReport {
	return predicate.HostServiceReport(sql.FieldContainsFold(FieldTeamReportID, v))
}

// HasHostservice applies the HasEdge predicate on the "hostservice" edge.
func HasHostservice() predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HostserviceTable, HostserviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostserviceWith applies the HasEdge predicate on the "hostservice" edge with a given conditions (other predicates).
func HasHostserviceWith(preds ...predicate.HostService) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := newHostserviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := newServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeamreport applies the HasEdge predicate on the "teamreport" edge.
func HasTeamreport() predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamreportTable, TeamreportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamreportWith applies the HasEdge predicate on the "teamreport" edge with a given conditions (other predicates).
func HasTeamreportWith(preds ...predicate.TeamReport) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		step := newTeamreportStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HostServiceReport) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HostServiceReport) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HostServiceReport) predicate.HostServiceReport {
	return predicate.HostServiceReport(func(s *sql.Selector) {
		p(s.Not())
	})
}
