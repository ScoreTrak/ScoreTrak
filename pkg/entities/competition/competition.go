// Code generated by ent, DO NOT EDIT.

package competition

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the competition type in the database.
	Label = "competition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPause holds the string denoting the pause field in the database.
	FieldPause = "pause"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldRoundDuration holds the string denoting the round_duration field in the database.
	FieldRoundDuration = "round_duration"
	// FieldCurrentRoundID holds the string denoting the current_round_id field in the database.
	FieldCurrentRoundID = "current_round_id"
	// FieldViewableToPublic holds the string denoting the viewable_to_public field in the database.
	FieldViewableToPublic = "viewable_to_public"
	// FieldIgnoreIncompleteRoundInScoring holds the string denoting the ignore_incomplete_round_in_scoring field in the database.
	FieldIgnoreIncompleteRoundInScoring = "ignore_incomplete_round_in_scoring"
	// FieldToBeStartedAt holds the string denoting the to_be_started_at field in the database.
	FieldToBeStartedAt = "to_be_started_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finished_at field in the database.
	FieldFinishedAt = "finished_at"
	// Table holds the table name of the competition in the database.
	Table = "competitions"
)

// Columns holds all SQL columns for competition fields.
var Columns = []string{
	FieldID,
	FieldPause,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldDisplayName,
	FieldRoundDuration,
	FieldCurrentRoundID,
	FieldViewableToPublic,
	FieldIgnoreIncompleteRoundInScoring,
	FieldToBeStartedAt,
	FieldStartedAt,
	FieldFinishedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/ScoreTrak/ScoreTrak/pkg/entities/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultPause holds the default value on creation for the "pause" field.
	DefaultPause bool
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultRoundDuration holds the default value on creation for the "round_duration" field.
	DefaultRoundDuration int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Competition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPause orders the results by the pause field.
func ByPause(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPause, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByRoundDuration orders the results by the round_duration field.
func ByRoundDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundDuration, opts...).ToFunc()
}

// ByCurrentRoundID orders the results by the current_round_id field.
func ByCurrentRoundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentRoundID, opts...).ToFunc()
}

// ByViewableToPublic orders the results by the viewable_to_public field.
func ByViewableToPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewableToPublic, opts...).ToFunc()
}

// ByIgnoreIncompleteRoundInScoring orders the results by the ignore_incomplete_round_in_scoring field.
func ByIgnoreIncompleteRoundInScoring(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIgnoreIncompleteRoundInScoring, opts...).ToFunc()
}

// ByToBeStartedAt orders the results by the to_be_started_at field.
func ByToBeStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToBeStartedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finished_at field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}
