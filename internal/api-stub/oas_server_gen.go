// Code generated by ogen, DO NOT EDIT.

package api_stub

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateCompetition implements createCompetition operation.
	//
	// POST /v1/competitions
	CreateCompetition(ctx context.Context, req *CreateCompetitionRequest) (*Competition, error)
	// GetCompetition implements getCompetition operation.
	//
	// GET /v1/competitions/{id}
	GetCompetition(ctx context.Context, params GetCompetitionParams) (*Competition, error)
	// UpdateCompetition implements updateCompetition operation.
	//
	// PUT /v1/competitions/{id}
	UpdateCompetition(ctx context.Context, req *UpdateCompetitionRequest, params UpdateCompetitionParams) (*Competition, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
