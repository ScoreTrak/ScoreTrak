// Code generated by ent, DO NOT EDIT.

package service

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPause holds the string denoting the pause field in the database.
	FieldPause = "pause"
	// FieldHidden holds the string denoting the hidden field in the database.
	FieldHidden = "hidden"
	// FieldCompetitionID holds the string denoting the competition_id field in the database.
	FieldCompetitionID = "competition_id"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldPointBoost holds the string denoting the point_boost field in the database.
	FieldPointBoost = "point_boost"
	// FieldRoundUnits holds the string denoting the round_units field in the database.
	FieldRoundUnits = "round_units"
	// FieldRoundDelay holds the string denoting the round_delay field in the database.
	FieldRoundDelay = "round_delay"
	// EdgeCompetition holds the string denoting the competition edge name in mutations.
	EdgeCompetition = "competition"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeHosts holds the string denoting the hosts edge name in mutations.
	EdgeHosts = "hosts"
	// EdgeChecks holds the string denoting the checks edge name in mutations.
	EdgeChecks = "checks"
	// EdgeProperties holds the string denoting the properties edge name in mutations.
	EdgeProperties = "properties"
	// Table holds the table name of the service in the database.
	Table = "services"
	// CompetitionTable is the table that holds the competition relation/edge.
	CompetitionTable = "services"
	// CompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	CompetitionInverseTable = "competitions"
	// CompetitionColumn is the table column denoting the competition relation/edge.
	CompetitionColumn = "competition_id"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "services"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// HostsTable is the table that holds the hosts relation/edge.
	HostsTable = "services"
	// HostsInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostsInverseTable = "hosts"
	// HostsColumn is the table column denoting the hosts relation/edge.
	HostsColumn = "host_services"
	// ChecksTable is the table that holds the checks relation/edge.
	ChecksTable = "checks"
	// ChecksInverseTable is the table name for the Check entity.
	// It exists in this package in order to avoid circular dependency with the "check" package.
	ChecksInverseTable = "checks"
	// ChecksColumn is the table column denoting the checks relation/edge.
	ChecksColumn = "service_checks"
	// PropertiesTable is the table that holds the properties relation/edge.
	PropertiesTable = "properties"
	// PropertiesInverseTable is the table name for the Property entity.
	// It exists in this package in order to avoid circular dependency with the "property" package.
	PropertiesInverseTable = "properties"
	// PropertiesColumn is the table column denoting the properties relation/edge.
	PropertiesColumn = "service_properties"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldPause,
	FieldHidden,
	FieldCompetitionID,
	FieldTeamID,
	FieldName,
	FieldDisplayName,
	FieldWeight,
	FieldPointBoost,
	FieldRoundUnits,
	FieldRoundDelay,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"host_services",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Order defines the ordering method for the Service queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPause orders the results by the pause field.
func ByPause(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPause, opts...).ToFunc()
}

// ByHidden orders the results by the hidden field.
func ByHidden(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldHidden, opts...).ToFunc()
}

// ByCompetitionID orders the results by the competition_id field.
func ByCompetitionID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCompetitionID, opts...).ToFunc()
}

// ByTeamID orders the results by the team_id field.
func ByTeamID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldTeamID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByPointBoost orders the results by the point_boost field.
func ByPointBoost(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPointBoost, opts...).ToFunc()
}

// ByRoundUnits orders the results by the round_units field.
func ByRoundUnits(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRoundUnits, opts...).ToFunc()
}

// ByRoundDelay orders the results by the round_delay field.
func ByRoundDelay(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRoundDelay, opts...).ToFunc()
}

// ByCompetitionField orders the results by competition field.
func ByCompetitionField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompetitionStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostsField orders the results by hosts field.
func ByHostsField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostsStep(), sql.OrderByField(field, opts...))
	}
}

// ByChecksCount orders the results by checks count.
func ByChecksCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChecksStep(), opts...)
	}
}

// ByChecks orders the results by checks terms.
func ByChecks(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPropertiesCount orders the results by properties count.
func ByPropertiesCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPropertiesStep(), opts...)
	}
}

// ByProperties orders the results by properties terms.
func ByProperties(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPropertiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCompetitionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompetitionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TeamTable, TeamColumn),
	)
}
func newHostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HostsTable, HostsColumn),
	)
}
func newChecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChecksTable, ChecksColumn),
	)
}
func newPropertiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PropertiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PropertiesTable, PropertiesColumn),
	)
}
