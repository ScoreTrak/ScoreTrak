// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostgroup"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// HostGroupCreate is the builder for creating a HostGroup entity.
type HostGroupCreate struct {
	config
	mutation *HostGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPause sets the "pause" field.
func (hgc *HostGroupCreate) SetPause(b bool) *HostGroupCreate {
	hgc.mutation.SetPause(b)
	return hgc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (hgc *HostGroupCreate) SetNillablePause(b *bool) *HostGroupCreate {
	if b != nil {
		hgc.SetPause(*b)
	}
	return hgc
}

// SetHidden sets the "hidden" field.
func (hgc *HostGroupCreate) SetHidden(b bool) *HostGroupCreate {
	hgc.mutation.SetHidden(b)
	return hgc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (hgc *HostGroupCreate) SetNillableHidden(b *bool) *HostGroupCreate {
	if b != nil {
		hgc.SetHidden(*b)
	}
	return hgc
}

// SetCompetitionID sets the "competition_id" field.
func (hgc *HostGroupCreate) SetCompetitionID(s string) *HostGroupCreate {
	hgc.mutation.SetCompetitionID(s)
	return hgc
}

// SetTeamID sets the "team_id" field.
func (hgc *HostGroupCreate) SetTeamID(s string) *HostGroupCreate {
	hgc.mutation.SetTeamID(s)
	return hgc
}

// SetName sets the "name" field.
func (hgc *HostGroupCreate) SetName(s string) *HostGroupCreate {
	hgc.mutation.SetName(s)
	return hgc
}

// SetID sets the "id" field.
func (hgc *HostGroupCreate) SetID(s string) *HostGroupCreate {
	hgc.mutation.SetID(s)
	return hgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hgc *HostGroupCreate) SetNillableID(s *string) *HostGroupCreate {
	if s != nil {
		hgc.SetID(*s)
	}
	return hgc
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (hgc *HostGroupCreate) SetCompetition(c *Competition) *HostGroupCreate {
	return hgc.SetCompetitionID(c.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (hgc *HostGroupCreate) SetTeam(t *Team) *HostGroupCreate {
	return hgc.SetTeamID(t.ID)
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (hgc *HostGroupCreate) AddHostIDs(ids ...string) *HostGroupCreate {
	hgc.mutation.AddHostIDs(ids...)
	return hgc
}

// AddHosts adds the "hosts" edges to the Host entity.
func (hgc *HostGroupCreate) AddHosts(h ...*Host) *HostGroupCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hgc.AddHostIDs(ids...)
}

// Mutation returns the HostGroupMutation object of the builder.
func (hgc *HostGroupCreate) Mutation() *HostGroupMutation {
	return hgc.mutation
}

// Save creates the HostGroup in the database.
func (hgc *HostGroupCreate) Save(ctx context.Context) (*HostGroup, error) {
	hgc.defaults()
	return withHooks[*HostGroup, HostGroupMutation](ctx, hgc.sqlSave, hgc.mutation, hgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hgc *HostGroupCreate) SaveX(ctx context.Context) *HostGroup {
	v, err := hgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hgc *HostGroupCreate) Exec(ctx context.Context) error {
	_, err := hgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hgc *HostGroupCreate) ExecX(ctx context.Context) {
	if err := hgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hgc *HostGroupCreate) defaults() {
	if _, ok := hgc.mutation.ID(); !ok {
		v := hostgroup.DefaultID()
		hgc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hgc *HostGroupCreate) check() error {
	if _, ok := hgc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition_id", err: errors.New(`entities: missing required field "HostGroup.competition_id"`)}
	}
	if _, ok := hgc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "HostGroup.team_id"`)}
	}
	if _, ok := hgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "HostGroup.name"`)}
	}
	if v, ok := hgc.mutation.ID(); ok {
		if err := hostgroup.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "HostGroup.id": %w`, err)}
		}
	}
	if _, ok := hgc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition", err: errors.New(`entities: missing required edge "HostGroup.competition"`)}
	}
	if _, ok := hgc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "HostGroup.team"`)}
	}
	return nil
}

func (hgc *HostGroupCreate) sqlSave(ctx context.Context) (*HostGroup, error) {
	if err := hgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected HostGroup.ID type: %T", _spec.ID.Value)
		}
	}
	hgc.mutation.id = &_node.ID
	hgc.mutation.done = true
	return _node, nil
}

func (hgc *HostGroupCreate) createSpec() (*HostGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &HostGroup{config: hgc.config}
		_spec = sqlgraph.NewCreateSpec(hostgroup.Table, sqlgraph.NewFieldSpec(hostgroup.FieldID, field.TypeString))
	)
	_spec.OnConflict = hgc.conflict
	if id, ok := hgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hgc.mutation.Pause(); ok {
		_spec.SetField(hostgroup.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := hgc.mutation.Hidden(); ok {
		_spec.SetField(hostgroup.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := hgc.mutation.Name(); ok {
		_spec.SetField(hostgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := hgc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgroup.CompetitionTable,
			Columns: []string{hostgroup.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompetitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hgc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgroup.TeamTable,
			Columns: []string{hostgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hgc.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostgroup.HostsTable,
			Columns: []string{hostgroup.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostGroup.Create().
//		SetPause(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostGroupUpsert) {
//			SetPause(v+v).
//		}).
//		Exec(ctx)
func (hgc *HostGroupCreate) OnConflict(opts ...sql.ConflictOption) *HostGroupUpsertOne {
	hgc.conflict = opts
	return &HostGroupUpsertOne{
		create: hgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hgc *HostGroupCreate) OnConflictColumns(columns ...string) *HostGroupUpsertOne {
	hgc.conflict = append(hgc.conflict, sql.ConflictColumns(columns...))
	return &HostGroupUpsertOne{
		create: hgc,
	}
}

type (
	// HostGroupUpsertOne is the builder for "upsert"-ing
	//  one HostGroup node.
	HostGroupUpsertOne struct {
		create *HostGroupCreate
	}

	// HostGroupUpsert is the "OnConflict" setter.
	HostGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetPause sets the "pause" field.
func (u *HostGroupUpsert) SetPause(v bool) *HostGroupUpsert {
	u.Set(hostgroup.FieldPause, v)
	return u
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *HostGroupUpsert) UpdatePause() *HostGroupUpsert {
	u.SetExcluded(hostgroup.FieldPause)
	return u
}

// ClearPause clears the value of the "pause" field.
func (u *HostGroupUpsert) ClearPause() *HostGroupUpsert {
	u.SetNull(hostgroup.FieldPause)
	return u
}

// SetHidden sets the "hidden" field.
func (u *HostGroupUpsert) SetHidden(v bool) *HostGroupUpsert {
	u.Set(hostgroup.FieldHidden, v)
	return u
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *HostGroupUpsert) UpdateHidden() *HostGroupUpsert {
	u.SetExcluded(hostgroup.FieldHidden)
	return u
}

// ClearHidden clears the value of the "hidden" field.
func (u *HostGroupUpsert) ClearHidden() *HostGroupUpsert {
	u.SetNull(hostgroup.FieldHidden)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *HostGroupUpsert) SetTeamID(v string) *HostGroupUpsert {
	u.Set(hostgroup.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *HostGroupUpsert) UpdateTeamID() *HostGroupUpsert {
	u.SetExcluded(hostgroup.FieldTeamID)
	return u
}

// SetName sets the "name" field.
func (u *HostGroupUpsert) SetName(v string) *HostGroupUpsert {
	u.Set(hostgroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostGroupUpsert) UpdateName() *HostGroupUpsert {
	u.SetExcluded(hostgroup.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hostgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HostGroupUpsertOne) UpdateNewValues() *HostGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hostgroup.FieldID)
		}
		if _, exists := u.create.mutation.CompetitionID(); exists {
			s.SetIgnore(hostgroup.FieldCompetitionID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HostGroupUpsertOne) Ignore() *HostGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostGroupUpsertOne) DoNothing() *HostGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostGroupCreate.OnConflict
// documentation for more info.
func (u *HostGroupUpsertOne) Update(set func(*HostGroupUpsert)) *HostGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetPause sets the "pause" field.
func (u *HostGroupUpsertOne) SetPause(v bool) *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *HostGroupUpsertOne) UpdatePause() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *HostGroupUpsertOne) ClearPause() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.ClearPause()
	})
}

// SetHidden sets the "hidden" field.
func (u *HostGroupUpsertOne) SetHidden(v bool) *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *HostGroupUpsertOne) UpdateHidden() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateHidden()
	})
}

// ClearHidden clears the value of the "hidden" field.
func (u *HostGroupUpsertOne) ClearHidden() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.ClearHidden()
	})
}

// SetTeamID sets the "team_id" field.
func (u *HostGroupUpsertOne) SetTeamID(v string) *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *HostGroupUpsertOne) UpdateTeamID() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *HostGroupUpsertOne) SetName(v string) *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostGroupUpsertOne) UpdateName() *HostGroupUpsertOne {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *HostGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for HostGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HostGroupUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: HostGroupUpsertOne.ID is not supported by MySQL driver. Use HostGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HostGroupUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HostGroupCreateBulk is the builder for creating many HostGroup entities in bulk.
type HostGroupCreateBulk struct {
	config
	builders []*HostGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the HostGroup entities in the database.
func (hgcb *HostGroupCreateBulk) Save(ctx context.Context) ([]*HostGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hgcb.builders))
	nodes := make([]*HostGroup, len(hgcb.builders))
	mutators := make([]Mutator, len(hgcb.builders))
	for i := range hgcb.builders {
		func(i int, root context.Context) {
			builder := hgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = hgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hgcb *HostGroupCreateBulk) SaveX(ctx context.Context) []*HostGroup {
	v, err := hgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hgcb *HostGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := hgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hgcb *HostGroupCreateBulk) ExecX(ctx context.Context) {
	if err := hgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HostGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HostGroupUpsert) {
//			SetPause(v+v).
//		}).
//		Exec(ctx)
func (hgcb *HostGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *HostGroupUpsertBulk {
	hgcb.conflict = opts
	return &HostGroupUpsertBulk{
		create: hgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (hgcb *HostGroupCreateBulk) OnConflictColumns(columns ...string) *HostGroupUpsertBulk {
	hgcb.conflict = append(hgcb.conflict, sql.ConflictColumns(columns...))
	return &HostGroupUpsertBulk{
		create: hgcb,
	}
}

// HostGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of HostGroup nodes.
type HostGroupUpsertBulk struct {
	create *HostGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hostgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HostGroupUpsertBulk) UpdateNewValues() *HostGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hostgroup.FieldID)
			}
			if _, exists := b.mutation.CompetitionID(); exists {
				s.SetIgnore(hostgroup.FieldCompetitionID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HostGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HostGroupUpsertBulk) Ignore() *HostGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HostGroupUpsertBulk) DoNothing() *HostGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HostGroupCreateBulk.OnConflict
// documentation for more info.
func (u *HostGroupUpsertBulk) Update(set func(*HostGroupUpsert)) *HostGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HostGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetPause sets the "pause" field.
func (u *HostGroupUpsertBulk) SetPause(v bool) *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *HostGroupUpsertBulk) UpdatePause() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *HostGroupUpsertBulk) ClearPause() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.ClearPause()
	})
}

// SetHidden sets the "hidden" field.
func (u *HostGroupUpsertBulk) SetHidden(v bool) *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetHidden(v)
	})
}

// UpdateHidden sets the "hidden" field to the value that was provided on create.
func (u *HostGroupUpsertBulk) UpdateHidden() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateHidden()
	})
}

// ClearHidden clears the value of the "hidden" field.
func (u *HostGroupUpsertBulk) ClearHidden() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.ClearHidden()
	})
}

// SetTeamID sets the "team_id" field.
func (u *HostGroupUpsertBulk) SetTeamID(v string) *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *HostGroupUpsertBulk) UpdateTeamID() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateTeamID()
	})
}

// SetName sets the "name" field.
func (u *HostGroupUpsertBulk) SetName(v string) *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HostGroupUpsertBulk) UpdateName() *HostGroupUpsertBulk {
	return u.Update(func(s *HostGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *HostGroupUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the HostGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for HostGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HostGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
