// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostgroup"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// HostGroupCreate is the builder for creating a HostGroup entity.
type HostGroupCreate struct {
	config
	mutation *HostGroupMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (hgc *HostGroupCreate) SetCreateTime(t time.Time) *HostGroupCreate {
	hgc.mutation.SetCreateTime(t)
	return hgc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (hgc *HostGroupCreate) SetNillableCreateTime(t *time.Time) *HostGroupCreate {
	if t != nil {
		hgc.SetCreateTime(*t)
	}
	return hgc
}

// SetUpdateTime sets the "update_time" field.
func (hgc *HostGroupCreate) SetUpdateTime(t time.Time) *HostGroupCreate {
	hgc.mutation.SetUpdateTime(t)
	return hgc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (hgc *HostGroupCreate) SetNillableUpdateTime(t *time.Time) *HostGroupCreate {
	if t != nil {
		hgc.SetUpdateTime(*t)
	}
	return hgc
}

// SetPause sets the "pause" field.
func (hgc *HostGroupCreate) SetPause(b bool) *HostGroupCreate {
	hgc.mutation.SetPause(b)
	return hgc
}

// SetHidden sets the "hidden" field.
func (hgc *HostGroupCreate) SetHidden(b bool) *HostGroupCreate {
	hgc.mutation.SetHidden(b)
	return hgc
}

// SetCompetitionID sets the "competition_id" field.
func (hgc *HostGroupCreate) SetCompetitionID(i int) *HostGroupCreate {
	hgc.mutation.SetCompetitionID(i)
	return hgc
}

// SetTeamID sets the "team_id" field.
func (hgc *HostGroupCreate) SetTeamID(i int) *HostGroupCreate {
	hgc.mutation.SetTeamID(i)
	return hgc
}

// SetName sets the "name" field.
func (hgc *HostGroupCreate) SetName(s string) *HostGroupCreate {
	hgc.mutation.SetName(s)
	return hgc
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (hgc *HostGroupCreate) SetCompetition(c *Competition) *HostGroupCreate {
	return hgc.SetCompetitionID(c.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (hgc *HostGroupCreate) SetTeam(t *Team) *HostGroupCreate {
	return hgc.SetTeamID(t.ID)
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (hgc *HostGroupCreate) AddHostIDs(ids ...int) *HostGroupCreate {
	hgc.mutation.AddHostIDs(ids...)
	return hgc
}

// AddHosts adds the "hosts" edges to the Host entity.
func (hgc *HostGroupCreate) AddHosts(h ...*Host) *HostGroupCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hgc.AddHostIDs(ids...)
}

// Mutation returns the HostGroupMutation object of the builder.
func (hgc *HostGroupCreate) Mutation() *HostGroupMutation {
	return hgc.mutation
}

// Save creates the HostGroup in the database.
func (hgc *HostGroupCreate) Save(ctx context.Context) (*HostGroup, error) {
	hgc.defaults()
	return withHooks[*HostGroup, HostGroupMutation](ctx, hgc.sqlSave, hgc.mutation, hgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hgc *HostGroupCreate) SaveX(ctx context.Context) *HostGroup {
	v, err := hgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hgc *HostGroupCreate) Exec(ctx context.Context) error {
	_, err := hgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hgc *HostGroupCreate) ExecX(ctx context.Context) {
	if err := hgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hgc *HostGroupCreate) defaults() {
	if _, ok := hgc.mutation.CreateTime(); !ok {
		v := hostgroup.DefaultCreateTime()
		hgc.mutation.SetCreateTime(v)
	}
	if _, ok := hgc.mutation.UpdateTime(); !ok {
		v := hostgroup.DefaultUpdateTime()
		hgc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hgc *HostGroupCreate) check() error {
	if _, ok := hgc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`entities: missing required field "HostGroup.create_time"`)}
	}
	if _, ok := hgc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`entities: missing required field "HostGroup.update_time"`)}
	}
	if _, ok := hgc.mutation.Pause(); !ok {
		return &ValidationError{Name: "pause", err: errors.New(`entities: missing required field "HostGroup.pause"`)}
	}
	if _, ok := hgc.mutation.Hidden(); !ok {
		return &ValidationError{Name: "hidden", err: errors.New(`entities: missing required field "HostGroup.hidden"`)}
	}
	if _, ok := hgc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition_id", err: errors.New(`entities: missing required field "HostGroup.competition_id"`)}
	}
	if _, ok := hgc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "HostGroup.team_id"`)}
	}
	if _, ok := hgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "HostGroup.name"`)}
	}
	if _, ok := hgc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition", err: errors.New(`entities: missing required edge "HostGroup.competition"`)}
	}
	if _, ok := hgc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "HostGroup.team"`)}
	}
	return nil
}

func (hgc *HostGroupCreate) sqlSave(ctx context.Context) (*HostGroup, error) {
	if err := hgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hgc.mutation.id = &_node.ID
	hgc.mutation.done = true
	return _node, nil
}

func (hgc *HostGroupCreate) createSpec() (*HostGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &HostGroup{config: hgc.config}
		_spec = sqlgraph.NewCreateSpec(hostgroup.Table, sqlgraph.NewFieldSpec(hostgroup.FieldID, field.TypeInt))
	)
	if value, ok := hgc.mutation.CreateTime(); ok {
		_spec.SetField(hostgroup.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := hgc.mutation.UpdateTime(); ok {
		_spec.SetField(hostgroup.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := hgc.mutation.Pause(); ok {
		_spec.SetField(hostgroup.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := hgc.mutation.Hidden(); ok {
		_spec.SetField(hostgroup.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := hgc.mutation.Name(); ok {
		_spec.SetField(hostgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := hgc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgroup.CompetitionTable,
			Columns: []string{hostgroup.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompetitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hgc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgroup.TeamTable,
			Columns: []string{hostgroup.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hgc.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostgroup.HostsTable,
			Columns: []string{hostgroup.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostGroupCreateBulk is the builder for creating many HostGroup entities in bulk.
type HostGroupCreateBulk struct {
	config
	builders []*HostGroupCreate
}

// Save creates the HostGroup entities in the database.
func (hgcb *HostGroupCreateBulk) Save(ctx context.Context) ([]*HostGroup, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hgcb.builders))
	nodes := make([]*HostGroup, len(hgcb.builders))
	mutators := make([]Mutator, len(hgcb.builders))
	for i := range hgcb.builders {
		func(i int, root context.Context) {
			builder := hgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hgcb *HostGroupCreateBulk) SaveX(ctx context.Context) []*HostGroup {
	v, err := hgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hgcb *HostGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := hgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hgcb *HostGroupCreateBulk) ExecX(ctx context.Context) {
	if err := hgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
