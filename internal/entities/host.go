// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostgroup"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// Host is the model entity for the Host schema.
type Host struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Pause holds the value of the "pause" field.
	Pause bool `json:"pause,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty"`
	// TeamID holds the value of the "team_id" field.
	TeamID string `json:"team_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// AddressListRange holds the value of the "address_list_range" field.
	AddressListRange string `json:"address_list_range,omitempty"`
	// Editable holds the value of the "editable" field.
	Editable bool `json:"editable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostQuery when eager-loading is set.
	Edges            HostEdges `json:"edges"`
	host_group_hosts *string
	team_hosts       *string
	selectValues     sql.SelectValues
}

// HostEdges holds the relations/edges for other nodes in the graph.
type HostEdges struct {
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// HostGroup holds the value of the host_group edge.
	HostGroup *HostGroup `json:"host_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[0] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[2] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// HostGroupOrErr returns the HostGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostEdges) HostGroupOrErr() (*HostGroup, error) {
	if e.loadedTypes[3] {
		if e.HostGroup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: hostgroup.Label}
		}
		return e.HostGroup, nil
	}
	return nil, &NotLoadedError{edge: "host_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Host) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case host.FieldPause, host.FieldHidden, host.FieldEditable:
			values[i] = new(sql.NullBool)
		case host.FieldID, host.FieldCompetitionID, host.FieldTeamID, host.FieldAddress, host.FieldAddressListRange:
			values[i] = new(sql.NullString)
		case host.ForeignKeys[0]: // host_group_hosts
			values[i] = new(sql.NullString)
		case host.ForeignKeys[1]: // team_hosts
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Host fields.
func (h *Host) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				h.ID = value.String
			}
		case host.FieldPause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause", values[i])
			} else if value.Valid {
				h.Pause = value.Bool
			}
		case host.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				h.Hidden = value.Bool
			}
		case host.FieldCompetitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				h.CompetitionID = value.String
			}
		case host.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				h.TeamID = value.String
			}
		case host.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				h.Address = value.String
			}
		case host.FieldAddressListRange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address_list_range", values[i])
			} else if value.Valid {
				h.AddressListRange = value.String
			}
		case host.FieldEditable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field editable", values[i])
			} else if value.Valid {
				h.Editable = value.Bool
			}
		case host.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_group_hosts", values[i])
			} else if value.Valid {
				h.host_group_hosts = new(string)
				*h.host_group_hosts = value.String
			}
		case host.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_hosts", values[i])
			} else if value.Valid {
				h.team_hosts = new(string)
				*h.team_hosts = value.String
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Host.
// This includes values selected through modifiers, order, etc.
func (h *Host) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryCompetition queries the "competition" edge of the Host entity.
func (h *Host) QueryCompetition() *CompetitionQuery {
	return NewHostClient(h.config).QueryCompetition(h)
}

// QueryTeam queries the "team" edge of the Host entity.
func (h *Host) QueryTeam() *TeamQuery {
	return NewHostClient(h.config).QueryTeam(h)
}

// QueryServices queries the "services" edge of the Host entity.
func (h *Host) QueryServices() *ServiceQuery {
	return NewHostClient(h.config).QueryServices(h)
}

// QueryHostGroup queries the "host_group" edge of the Host entity.
func (h *Host) QueryHostGroup() *HostGroupQuery {
	return NewHostClient(h.config).QueryHostGroup(h)
}

// Update returns a builder for updating this Host.
// Note that you need to call Host.Unwrap() before calling this method if this Host
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Host) Update() *HostUpdateOne {
	return NewHostClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Host entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Host) Unwrap() *Host {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("entities: Host is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Host) String() string {
	var builder strings.Builder
	builder.WriteString("Host(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("pause=")
	builder.WriteString(fmt.Sprintf("%v", h.Pause))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", h.Hidden))
	builder.WriteString(", ")
	builder.WriteString("competition_id=")
	builder.WriteString(h.CompetitionID)
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(h.TeamID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(h.Address)
	builder.WriteString(", ")
	builder.WriteString("address_list_range=")
	builder.WriteString(h.AddressListRange)
	builder.WriteString(", ")
	builder.WriteString("editable=")
	builder.WriteString(fmt.Sprintf("%v", h.Editable))
	builder.WriteByte(')')
	return builder.String()
}

// Hosts is a parsable slice of Host.
type Hosts []*Host
