// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/check"
	"github.com/scoretrak/scoretrak/internal/entities/hostservice"
	"github.com/scoretrak/scoretrak/internal/entities/hostservicereport"
	"github.com/scoretrak/scoretrak/internal/entities/predicate"
	"github.com/scoretrak/scoretrak/internal/entities/property"
)

// HostServiceUpdate is the builder for updating HostService entities.
type HostServiceUpdate struct {
	config
	hooks    []Hook
	mutation *HostServiceMutation
}

// Where appends a list predicates to the HostServiceUpdate builder.
func (hsu *HostServiceUpdate) Where(ps ...predicate.HostService) *HostServiceUpdate {
	hsu.mutation.Where(ps...)
	return hsu
}

// SetName sets the "name" field.
func (hsu *HostServiceUpdate) SetName(s string) *HostServiceUpdate {
	hsu.mutation.SetName(s)
	return hsu
}

// SetDisplayName sets the "display_name" field.
func (hsu *HostServiceUpdate) SetDisplayName(s string) *HostServiceUpdate {
	hsu.mutation.SetDisplayName(s)
	return hsu
}

// SetPause sets the "pause" field.
func (hsu *HostServiceUpdate) SetPause(b bool) *HostServiceUpdate {
	hsu.mutation.SetPause(b)
	return hsu
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (hsu *HostServiceUpdate) SetNillablePause(b *bool) *HostServiceUpdate {
	if b != nil {
		hsu.SetPause(*b)
	}
	return hsu
}

// ClearPause clears the value of the "pause" field.
func (hsu *HostServiceUpdate) ClearPause() *HostServiceUpdate {
	hsu.mutation.ClearPause()
	return hsu
}

// SetHidden sets the "hidden" field.
func (hsu *HostServiceUpdate) SetHidden(b bool) *HostServiceUpdate {
	hsu.mutation.SetHidden(b)
	return hsu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (hsu *HostServiceUpdate) SetNillableHidden(b *bool) *HostServiceUpdate {
	if b != nil {
		hsu.SetHidden(*b)
	}
	return hsu
}

// ClearHidden clears the value of the "hidden" field.
func (hsu *HostServiceUpdate) ClearHidden() *HostServiceUpdate {
	hsu.mutation.ClearHidden()
	return hsu
}

// SetUpdateTime sets the "update_time" field.
func (hsu *HostServiceUpdate) SetUpdateTime(t time.Time) *HostServiceUpdate {
	hsu.mutation.SetUpdateTime(t)
	return hsu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (hsu *HostServiceUpdate) ClearUpdateTime() *HostServiceUpdate {
	hsu.mutation.ClearUpdateTime()
	return hsu
}

// AddCheckIDs adds the "checks" edge to the Check entity by IDs.
func (hsu *HostServiceUpdate) AddCheckIDs(ids ...string) *HostServiceUpdate {
	hsu.mutation.AddCheckIDs(ids...)
	return hsu
}

// AddChecks adds the "checks" edges to the Check entity.
func (hsu *HostServiceUpdate) AddChecks(c ...*Check) *HostServiceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hsu.AddCheckIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (hsu *HostServiceUpdate) AddPropertyIDs(ids ...string) *HostServiceUpdate {
	hsu.mutation.AddPropertyIDs(ids...)
	return hsu
}

// AddProperties adds the "properties" edges to the Property entity.
func (hsu *HostServiceUpdate) AddProperties(p ...*Property) *HostServiceUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hsu.AddPropertyIDs(ids...)
}

// SetHostservicereportID sets the "hostservicereport" edge to the HostServiceReport entity by ID.
func (hsu *HostServiceUpdate) SetHostservicereportID(id string) *HostServiceUpdate {
	hsu.mutation.SetHostservicereportID(id)
	return hsu
}

// SetNillableHostservicereportID sets the "hostservicereport" edge to the HostServiceReport entity by ID if the given value is not nil.
func (hsu *HostServiceUpdate) SetNillableHostservicereportID(id *string) *HostServiceUpdate {
	if id != nil {
		hsu = hsu.SetHostservicereportID(*id)
	}
	return hsu
}

// SetHostservicereport sets the "hostservicereport" edge to the HostServiceReport entity.
func (hsu *HostServiceUpdate) SetHostservicereport(h *HostServiceReport) *HostServiceUpdate {
	return hsu.SetHostservicereportID(h.ID)
}

// Mutation returns the HostServiceMutation object of the builder.
func (hsu *HostServiceUpdate) Mutation() *HostServiceMutation {
	return hsu.mutation
}

// ClearChecks clears all "checks" edges to the Check entity.
func (hsu *HostServiceUpdate) ClearChecks() *HostServiceUpdate {
	hsu.mutation.ClearChecks()
	return hsu
}

// RemoveCheckIDs removes the "checks" edge to Check entities by IDs.
func (hsu *HostServiceUpdate) RemoveCheckIDs(ids ...string) *HostServiceUpdate {
	hsu.mutation.RemoveCheckIDs(ids...)
	return hsu
}

// RemoveChecks removes "checks" edges to Check entities.
func (hsu *HostServiceUpdate) RemoveChecks(c ...*Check) *HostServiceUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hsu.RemoveCheckIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (hsu *HostServiceUpdate) ClearProperties() *HostServiceUpdate {
	hsu.mutation.ClearProperties()
	return hsu
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (hsu *HostServiceUpdate) RemovePropertyIDs(ids ...string) *HostServiceUpdate {
	hsu.mutation.RemovePropertyIDs(ids...)
	return hsu
}

// RemoveProperties removes "properties" edges to Property entities.
func (hsu *HostServiceUpdate) RemoveProperties(p ...*Property) *HostServiceUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hsu.RemovePropertyIDs(ids...)
}

// ClearHostservicereport clears the "hostservicereport" edge to the HostServiceReport entity.
func (hsu *HostServiceUpdate) ClearHostservicereport() *HostServiceUpdate {
	hsu.mutation.ClearHostservicereport()
	return hsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hsu *HostServiceUpdate) Save(ctx context.Context) (int, error) {
	hsu.defaults()
	return withHooks[int, HostServiceMutation](ctx, hsu.sqlSave, hsu.mutation, hsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsu *HostServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := hsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hsu *HostServiceUpdate) Exec(ctx context.Context) error {
	_, err := hsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsu *HostServiceUpdate) ExecX(ctx context.Context) {
	if err := hsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsu *HostServiceUpdate) defaults() {
	if _, ok := hsu.mutation.UpdateTime(); !ok && !hsu.mutation.UpdateTimeCleared() {
		v := hostservice.UpdateDefaultUpdateTime()
		hsu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsu *HostServiceUpdate) check() error {
	if _, ok := hsu.mutation.ServiceID(); hsu.mutation.ServiceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.service"`)
	}
	if _, ok := hsu.mutation.HostID(); hsu.mutation.HostCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.host"`)
	}
	if _, ok := hsu.mutation.TeamID(); hsu.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.team"`)
	}
	return nil
}

func (hsu *HostServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostservice.Table, hostservice.Columns, sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString))
	if ps := hsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsu.mutation.Name(); ok {
		_spec.SetField(hostservice.FieldName, field.TypeString, value)
	}
	if value, ok := hsu.mutation.DisplayName(); ok {
		_spec.SetField(hostservice.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := hsu.mutation.Pause(); ok {
		_spec.SetField(hostservice.FieldPause, field.TypeBool, value)
	}
	if hsu.mutation.PauseCleared() {
		_spec.ClearField(hostservice.FieldPause, field.TypeBool)
	}
	if value, ok := hsu.mutation.Hidden(); ok {
		_spec.SetField(hostservice.FieldHidden, field.TypeBool, value)
	}
	if hsu.mutation.HiddenCleared() {
		_spec.ClearField(hostservice.FieldHidden, field.TypeBool)
	}
	if hsu.mutation.CreateTimeCleared() {
		_spec.ClearField(hostservice.FieldCreateTime, field.TypeTime)
	}
	if value, ok := hsu.mutation.UpdateTime(); ok {
		_spec.SetField(hostservice.FieldUpdateTime, field.TypeTime, value)
	}
	if hsu.mutation.UpdateTimeCleared() {
		_spec.ClearField(hostservice.FieldUpdateTime, field.TypeTime)
	}
	if hsu.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.RemovedChecksIDs(); len(nodes) > 0 && !hsu.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.ChecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hsu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !hsu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hsu.mutation.HostservicereportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hostservice.HostservicereportTable,
			Columns: []string{hostservice.HostservicereportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsu.mutation.HostservicereportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hostservice.HostservicereportTable,
			Columns: []string{hostservice.HostservicereportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hsu.mutation.done = true
	return n, nil
}

// HostServiceUpdateOne is the builder for updating a single HostService entity.
type HostServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostServiceMutation
}

// SetName sets the "name" field.
func (hsuo *HostServiceUpdateOne) SetName(s string) *HostServiceUpdateOne {
	hsuo.mutation.SetName(s)
	return hsuo
}

// SetDisplayName sets the "display_name" field.
func (hsuo *HostServiceUpdateOne) SetDisplayName(s string) *HostServiceUpdateOne {
	hsuo.mutation.SetDisplayName(s)
	return hsuo
}

// SetPause sets the "pause" field.
func (hsuo *HostServiceUpdateOne) SetPause(b bool) *HostServiceUpdateOne {
	hsuo.mutation.SetPause(b)
	return hsuo
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (hsuo *HostServiceUpdateOne) SetNillablePause(b *bool) *HostServiceUpdateOne {
	if b != nil {
		hsuo.SetPause(*b)
	}
	return hsuo
}

// ClearPause clears the value of the "pause" field.
func (hsuo *HostServiceUpdateOne) ClearPause() *HostServiceUpdateOne {
	hsuo.mutation.ClearPause()
	return hsuo
}

// SetHidden sets the "hidden" field.
func (hsuo *HostServiceUpdateOne) SetHidden(b bool) *HostServiceUpdateOne {
	hsuo.mutation.SetHidden(b)
	return hsuo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (hsuo *HostServiceUpdateOne) SetNillableHidden(b *bool) *HostServiceUpdateOne {
	if b != nil {
		hsuo.SetHidden(*b)
	}
	return hsuo
}

// ClearHidden clears the value of the "hidden" field.
func (hsuo *HostServiceUpdateOne) ClearHidden() *HostServiceUpdateOne {
	hsuo.mutation.ClearHidden()
	return hsuo
}

// SetUpdateTime sets the "update_time" field.
func (hsuo *HostServiceUpdateOne) SetUpdateTime(t time.Time) *HostServiceUpdateOne {
	hsuo.mutation.SetUpdateTime(t)
	return hsuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (hsuo *HostServiceUpdateOne) ClearUpdateTime() *HostServiceUpdateOne {
	hsuo.mutation.ClearUpdateTime()
	return hsuo
}

// AddCheckIDs adds the "checks" edge to the Check entity by IDs.
func (hsuo *HostServiceUpdateOne) AddCheckIDs(ids ...string) *HostServiceUpdateOne {
	hsuo.mutation.AddCheckIDs(ids...)
	return hsuo
}

// AddChecks adds the "checks" edges to the Check entity.
func (hsuo *HostServiceUpdateOne) AddChecks(c ...*Check) *HostServiceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hsuo.AddCheckIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (hsuo *HostServiceUpdateOne) AddPropertyIDs(ids ...string) *HostServiceUpdateOne {
	hsuo.mutation.AddPropertyIDs(ids...)
	return hsuo
}

// AddProperties adds the "properties" edges to the Property entity.
func (hsuo *HostServiceUpdateOne) AddProperties(p ...*Property) *HostServiceUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hsuo.AddPropertyIDs(ids...)
}

// SetHostservicereportID sets the "hostservicereport" edge to the HostServiceReport entity by ID.
func (hsuo *HostServiceUpdateOne) SetHostservicereportID(id string) *HostServiceUpdateOne {
	hsuo.mutation.SetHostservicereportID(id)
	return hsuo
}

// SetNillableHostservicereportID sets the "hostservicereport" edge to the HostServiceReport entity by ID if the given value is not nil.
func (hsuo *HostServiceUpdateOne) SetNillableHostservicereportID(id *string) *HostServiceUpdateOne {
	if id != nil {
		hsuo = hsuo.SetHostservicereportID(*id)
	}
	return hsuo
}

// SetHostservicereport sets the "hostservicereport" edge to the HostServiceReport entity.
func (hsuo *HostServiceUpdateOne) SetHostservicereport(h *HostServiceReport) *HostServiceUpdateOne {
	return hsuo.SetHostservicereportID(h.ID)
}

// Mutation returns the HostServiceMutation object of the builder.
func (hsuo *HostServiceUpdateOne) Mutation() *HostServiceMutation {
	return hsuo.mutation
}

// ClearChecks clears all "checks" edges to the Check entity.
func (hsuo *HostServiceUpdateOne) ClearChecks() *HostServiceUpdateOne {
	hsuo.mutation.ClearChecks()
	return hsuo
}

// RemoveCheckIDs removes the "checks" edge to Check entities by IDs.
func (hsuo *HostServiceUpdateOne) RemoveCheckIDs(ids ...string) *HostServiceUpdateOne {
	hsuo.mutation.RemoveCheckIDs(ids...)
	return hsuo
}

// RemoveChecks removes "checks" edges to Check entities.
func (hsuo *HostServiceUpdateOne) RemoveChecks(c ...*Check) *HostServiceUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return hsuo.RemoveCheckIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (hsuo *HostServiceUpdateOne) ClearProperties() *HostServiceUpdateOne {
	hsuo.mutation.ClearProperties()
	return hsuo
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (hsuo *HostServiceUpdateOne) RemovePropertyIDs(ids ...string) *HostServiceUpdateOne {
	hsuo.mutation.RemovePropertyIDs(ids...)
	return hsuo
}

// RemoveProperties removes "properties" edges to Property entities.
func (hsuo *HostServiceUpdateOne) RemoveProperties(p ...*Property) *HostServiceUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return hsuo.RemovePropertyIDs(ids...)
}

// ClearHostservicereport clears the "hostservicereport" edge to the HostServiceReport entity.
func (hsuo *HostServiceUpdateOne) ClearHostservicereport() *HostServiceUpdateOne {
	hsuo.mutation.ClearHostservicereport()
	return hsuo
}

// Where appends a list predicates to the HostServiceUpdate builder.
func (hsuo *HostServiceUpdateOne) Where(ps ...predicate.HostService) *HostServiceUpdateOne {
	hsuo.mutation.Where(ps...)
	return hsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hsuo *HostServiceUpdateOne) Select(field string, fields ...string) *HostServiceUpdateOne {
	hsuo.fields = append([]string{field}, fields...)
	return hsuo
}

// Save executes the query and returns the updated HostService entity.
func (hsuo *HostServiceUpdateOne) Save(ctx context.Context) (*HostService, error) {
	hsuo.defaults()
	return withHooks[*HostService, HostServiceMutation](ctx, hsuo.sqlSave, hsuo.mutation, hsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hsuo *HostServiceUpdateOne) SaveX(ctx context.Context) *HostService {
	node, err := hsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hsuo *HostServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := hsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hsuo *HostServiceUpdateOne) ExecX(ctx context.Context) {
	if err := hsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hsuo *HostServiceUpdateOne) defaults() {
	if _, ok := hsuo.mutation.UpdateTime(); !ok && !hsuo.mutation.UpdateTimeCleared() {
		v := hostservice.UpdateDefaultUpdateTime()
		hsuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hsuo *HostServiceUpdateOne) check() error {
	if _, ok := hsuo.mutation.ServiceID(); hsuo.mutation.ServiceCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.service"`)
	}
	if _, ok := hsuo.mutation.HostID(); hsuo.mutation.HostCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.host"`)
	}
	if _, ok := hsuo.mutation.TeamID(); hsuo.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "HostService.team"`)
	}
	return nil
}

func (hsuo *HostServiceUpdateOne) sqlSave(ctx context.Context) (_node *HostService, err error) {
	if err := hsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostservice.Table, hostservice.Columns, sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString))
	id, ok := hsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "HostService.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostservice.FieldID)
		for _, f := range fields {
			if !hostservice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != hostservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hsuo.mutation.Name(); ok {
		_spec.SetField(hostservice.FieldName, field.TypeString, value)
	}
	if value, ok := hsuo.mutation.DisplayName(); ok {
		_spec.SetField(hostservice.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := hsuo.mutation.Pause(); ok {
		_spec.SetField(hostservice.FieldPause, field.TypeBool, value)
	}
	if hsuo.mutation.PauseCleared() {
		_spec.ClearField(hostservice.FieldPause, field.TypeBool)
	}
	if value, ok := hsuo.mutation.Hidden(); ok {
		_spec.SetField(hostservice.FieldHidden, field.TypeBool, value)
	}
	if hsuo.mutation.HiddenCleared() {
		_spec.ClearField(hostservice.FieldHidden, field.TypeBool)
	}
	if hsuo.mutation.CreateTimeCleared() {
		_spec.ClearField(hostservice.FieldCreateTime, field.TypeTime)
	}
	if value, ok := hsuo.mutation.UpdateTime(); ok {
		_spec.SetField(hostservice.FieldUpdateTime, field.TypeTime, value)
	}
	if hsuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(hostservice.FieldUpdateTime, field.TypeTime)
	}
	if hsuo.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.RemovedChecksIDs(); len(nodes) > 0 && !hsuo.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.ChecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.ChecksTable,
			Columns: []string{hostservice.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hsuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !hsuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hostservice.PropertiesTable,
			Columns: []string{hostservice.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hsuo.mutation.HostservicereportCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hostservice.HostservicereportTable,
			Columns: []string{hostservice.HostservicereportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hsuo.mutation.HostservicereportIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hostservice.HostservicereportTable,
			Columns: []string{hostservice.HostservicereportColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostService{config: hsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hsuo.mutation.done = true
	return _node, nil
}
