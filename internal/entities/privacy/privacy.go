// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/ScoreTrak/ScoreTrak/internal/entities"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, entities.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, entities.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, entities.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, entities.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ entities.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ entities.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op entities.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m entities.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op entities.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m entities.Mutation) error {
		return Denyf("entities/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The CheckQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckQueryRuleFunc func(context.Context, *entities.CheckQuery) error

// EvalQuery return f(ctx, q).
func (f CheckQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.CheckQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.CheckQuery", q)
}

// The CheckMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckMutationRuleFunc func(context.Context, *entities.CheckMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.CheckMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.CheckMutation", m)
}

// The CompetitionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CompetitionQueryRuleFunc func(context.Context, *entities.CompetitionQuery) error

// EvalQuery return f(ctx, q).
func (f CompetitionQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.CompetitionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.CompetitionQuery", q)
}

// The CompetitionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CompetitionMutationRuleFunc func(context.Context, *entities.CompetitionMutation) error

// EvalMutation calls f(ctx, m).
func (f CompetitionMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.CompetitionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.CompetitionMutation", m)
}

// The HostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HostQueryRuleFunc func(context.Context, *entities.HostQuery) error

// EvalQuery return f(ctx, q).
func (f HostQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.HostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.HostQuery", q)
}

// The HostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HostMutationRuleFunc func(context.Context, *entities.HostMutation) error

// EvalMutation calls f(ctx, m).
func (f HostMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.HostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.HostMutation", m)
}

// The HostGroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HostGroupQueryRuleFunc func(context.Context, *entities.HostGroupQuery) error

// EvalQuery return f(ctx, q).
func (f HostGroupQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.HostGroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.HostGroupQuery", q)
}

// The HostGroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HostGroupMutationRuleFunc func(context.Context, *entities.HostGroupMutation) error

// EvalMutation calls f(ctx, m).
func (f HostGroupMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.HostGroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.HostGroupMutation", m)
}

// The PropertyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PropertyQueryRuleFunc func(context.Context, *entities.PropertyQuery) error

// EvalQuery return f(ctx, q).
func (f PropertyQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.PropertyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.PropertyQuery", q)
}

// The PropertyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PropertyMutationRuleFunc func(context.Context, *entities.PropertyMutation) error

// EvalMutation calls f(ctx, m).
func (f PropertyMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.PropertyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.PropertyMutation", m)
}

// The ReportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReportQueryRuleFunc func(context.Context, *entities.ReportQuery) error

// EvalQuery return f(ctx, q).
func (f ReportQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.ReportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.ReportQuery", q)
}

// The ReportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReportMutationRuleFunc func(context.Context, *entities.ReportMutation) error

// EvalMutation calls f(ctx, m).
func (f ReportMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.ReportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.ReportMutation", m)
}

// The RoundQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoundQueryRuleFunc func(context.Context, *entities.RoundQuery) error

// EvalQuery return f(ctx, q).
func (f RoundQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.RoundQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.RoundQuery", q)
}

// The RoundMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoundMutationRuleFunc func(context.Context, *entities.RoundMutation) error

// EvalMutation calls f(ctx, m).
func (f RoundMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.RoundMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.RoundMutation", m)
}

// The ServiceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceQueryRuleFunc func(context.Context, *entities.ServiceQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.ServiceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.ServiceQuery", q)
}

// The ServiceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceMutationRuleFunc func(context.Context, *entities.ServiceMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.ServiceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.ServiceMutation", m)
}

// The TeamQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TeamQueryRuleFunc func(context.Context, *entities.TeamQuery) error

// EvalQuery return f(ctx, q).
func (f TeamQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.TeamQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.TeamQuery", q)
}

// The TeamMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TeamMutationRuleFunc func(context.Context, *entities.TeamMutation) error

// EvalMutation calls f(ctx, m).
func (f TeamMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.TeamMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.TeamMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *entities.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	if q, ok := q.(*entities.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("entities/privacy: unexpected query type %T, expect *entities.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *entities.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	if m, ok := m.(*entities.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("entities/privacy: unexpected mutation type %T, expect *entities.UserMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q entities.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m entities.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q entities.Query) (Filter, error) {
	switch q := q.(type) {
	case *entities.CheckQuery:
		return q.Filter(), nil
	case *entities.CompetitionQuery:
		return q.Filter(), nil
	case *entities.HostQuery:
		return q.Filter(), nil
	case *entities.HostGroupQuery:
		return q.Filter(), nil
	case *entities.PropertyQuery:
		return q.Filter(), nil
	case *entities.ReportQuery:
		return q.Filter(), nil
	case *entities.RoundQuery:
		return q.Filter(), nil
	case *entities.ServiceQuery:
		return q.Filter(), nil
	case *entities.TeamQuery:
		return q.Filter(), nil
	case *entities.UserQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("entities/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m entities.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *entities.CheckMutation:
		return m.Filter(), nil
	case *entities.CompetitionMutation:
		return m.Filter(), nil
	case *entities.HostMutation:
		return m.Filter(), nil
	case *entities.HostGroupMutation:
		return m.Filter(), nil
	case *entities.PropertyMutation:
		return m.Filter(), nil
	case *entities.ReportMutation:
		return m.Filter(), nil
	case *entities.RoundMutation:
		return m.Filter(), nil
	case *entities.ServiceMutation:
		return m.Filter(), nil
	case *entities.TeamMutation:
		return m.Filter(), nil
	case *entities.UserMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("entities/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
