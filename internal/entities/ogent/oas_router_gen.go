// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hecks"
					if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListCheckRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateCheckRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteCheckRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadCheckRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateCheckRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadCheckCompetitionRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'r': // Prefix: "rounds"
								if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadCheckRoundsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 's': // Prefix: "services"
								if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadCheckServicesRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 'o': // Prefix: "ompetitions"
					if l := len("ompetitions"); len(elem) >= l && elem[0:l] == "ompetitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListCompetitionRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateCompetitionRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteCompetitionRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadCompetitionRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateCompetitionRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 't': // Prefix: "teams"
								if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCompetitionTeamsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'u': // Prefix: "users"
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCompetitionUsersRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			case 'h': // Prefix: "host"
				if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-groups"
					if l := len("-groups"); len(elem) >= l && elem[0:l] == "-groups" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListHostGroupRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateHostGroupRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteHostGroupRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadHostGroupRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateHostGroupRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostGroupCompetitionRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'h': // Prefix: "hosts"
								if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListHostGroupHostsRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostGroupTeamRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListHostRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateHostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteHostRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadHostRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateHostRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostCompetitionRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'h': // Prefix: "host-group"
								if l := len("host-group"); len(elem) >= l && elem[0:l] == "host-group" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostHostGroupRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 's': // Prefix: "services"
								if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListHostServicesRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadHostTeamRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			case 'p': // Prefix: "properties"
				if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListPropertyRequest([0]string{}, w, r)
					case "POST":
						s.handleCreatePropertyRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeletePropertyRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadPropertyRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdatePropertyRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competition"
							if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadPropertyCompetitionRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 's': // Prefix: "services"
							if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadPropertyServicesRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 't': // Prefix: "team"
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadPropertyTeamRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "eports"
					if l := len("eports"); len(elem) >= l && elem[0:l] == "eports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListReportRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateReportRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteReportRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadReportRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateReportRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
					}
				case 'o': // Prefix: "ounds"
					if l := len("ounds"); len(elem) >= l && elem[0:l] == "ounds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleListRoundRequest([0]string{}, w, r)
						case "POST":
							s.handleCreateRoundRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteRoundRequest([1]string{
									args[0],
								}, w, r)
							case "GET":
								s.handleReadRoundRequest([1]string{
									args[0],
								}, w, r)
							case "PATCH":
								s.handleUpdateRoundRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/c"
							if l := len("/c"); len(elem) >= l && elem[0:l] == "/c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hecks"
								if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListRoundChecksRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'o': // Prefix: "ompetition"
								if l := len("ompetition"); len(elem) >= l && elem[0:l] == "ompetition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadRoundCompetitionRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					}
				}
			case 's': // Prefix: "services"
				if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListServiceRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateServiceRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteServiceRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadServiceRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateServiceRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "c"
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hecks"
								if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListServiceChecksRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'o': // Prefix: "ompetition"
								if l := len("ompetition"); len(elem) >= l && elem[0:l] == "ompetition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleReadServiceCompetitionRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 'h': // Prefix: "hosts"
							if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadServiceHostsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'p': // Prefix: "properties"
							if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListServicePropertiesRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 't': // Prefix: "team"
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadServiceTeamRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 't': // Prefix: "teams"
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListTeamRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateTeamRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteTeamRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadTeamRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateTeamRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competition"
							if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleReadTeamCompetitionRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'h': // Prefix: "hosts"
							if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListTeamHostsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'u': // Prefix: "users"
							if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListTeamUsersRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleListUserRequest([0]string{}, w, r)
					case "POST":
						s.handleCreateUserRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteUserRequest([1]string{
								args[0],
							}, w, r)
						case "GET":
							s.handleReadUserRequest([1]string{
								args[0],
							}, w, r)
						case "PATCH":
							s.handleUpdateUserRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competitions"
							if l := len("competitions"); len(elem) >= l && elem[0:l] == "competitions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserCompetitionsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 't': // Prefix: "teams"
							if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListUserTeamsRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'h': // Prefix: "hecks"
					if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListCheck"
							r.operationID = "listCheck"
							r.pathPattern = "/checks"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateCheck"
							r.operationID = "createCheck"
							r.pathPattern = "/checks"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteCheck"
								r.operationID = "deleteCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadCheck"
								r.operationID = "readCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateCheck"
								r.operationID = "updateCheck"
								r.pathPattern = "/checks/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadCheckCompetition
										r.name = "ReadCheckCompetition"
										r.operationID = "readCheckCompetition"
										r.pathPattern = "/checks/{id}/competition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'r': // Prefix: "rounds"
								if l := len("rounds"); len(elem) >= l && elem[0:l] == "rounds" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadCheckRounds
										r.name = "ReadCheckRounds"
										r.operationID = "readCheckRounds"
										r.pathPattern = "/checks/{id}/rounds"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "services"
								if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadCheckServices
										r.name = "ReadCheckServices"
										r.operationID = "readCheckServices"
										r.pathPattern = "/checks/{id}/services"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 'o': // Prefix: "ompetitions"
					if l := len("ompetitions"); len(elem) >= l && elem[0:l] == "ompetitions" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListCompetition"
							r.operationID = "listCompetition"
							r.pathPattern = "/competitions"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateCompetition"
							r.operationID = "createCompetition"
							r.pathPattern = "/competitions"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteCompetition"
								r.operationID = "deleteCompetition"
								r.pathPattern = "/competitions/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadCompetition"
								r.operationID = "readCompetition"
								r.pathPattern = "/competitions/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateCompetition"
								r.operationID = "updateCompetition"
								r.pathPattern = "/competitions/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 't': // Prefix: "teams"
								if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCompetitionTeams
										r.name = "ListCompetitionTeams"
										r.operationID = "listCompetitionTeams"
										r.pathPattern = "/competitions/{id}/teams"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'u': // Prefix: "users"
								if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCompetitionUsers
										r.name = "ListCompetitionUsers"
										r.operationID = "listCompetitionUsers"
										r.pathPattern = "/competitions/{id}/users"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 'h': // Prefix: "host"
				if l := len("host"); len(elem) >= l && elem[0:l] == "host" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-groups"
					if l := len("-groups"); len(elem) >= l && elem[0:l] == "-groups" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListHostGroup"
							r.operationID = "listHostGroup"
							r.pathPattern = "/host-groups"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateHostGroup"
							r.operationID = "createHostGroup"
							r.pathPattern = "/host-groups"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteHostGroup"
								r.operationID = "deleteHostGroup"
								r.pathPattern = "/host-groups/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadHostGroup"
								r.operationID = "readHostGroup"
								r.pathPattern = "/host-groups/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateHostGroup"
								r.operationID = "updateHostGroup"
								r.pathPattern = "/host-groups/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostGroupCompetition
										r.name = "ReadHostGroupCompetition"
										r.operationID = "readHostGroupCompetition"
										r.pathPattern = "/host-groups/{id}/competition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'h': // Prefix: "hosts"
								if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListHostGroupHosts
										r.name = "ListHostGroupHosts"
										r.operationID = "listHostGroupHosts"
										r.pathPattern = "/host-groups/{id}/hosts"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostGroupTeam
										r.name = "ReadHostGroupTeam"
										r.operationID = "readHostGroupTeam"
										r.pathPattern = "/host-groups/{id}/team"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListHost"
							r.operationID = "listHost"
							r.pathPattern = "/hosts"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateHost"
							r.operationID = "createHost"
							r.pathPattern = "/hosts"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteHost"
								r.operationID = "deleteHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadHost"
								r.operationID = "readHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateHost"
								r.operationID = "updateHost"
								r.pathPattern = "/hosts/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "competition"
								if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostCompetition
										r.name = "ReadHostCompetition"
										r.operationID = "readHostCompetition"
										r.pathPattern = "/hosts/{id}/competition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'h': // Prefix: "host-group"
								if l := len("host-group"); len(elem) >= l && elem[0:l] == "host-group" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostHostGroup
										r.name = "ReadHostHostGroup"
										r.operationID = "readHostHostGroup"
										r.pathPattern = "/hosts/{id}/host-group"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "services"
								if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListHostServices
										r.name = "ListHostServices"
										r.operationID = "listHostServices"
										r.pathPattern = "/hosts/{id}/services"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 't': // Prefix: "team"
								if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadHostTeam
										r.name = "ReadHostTeam"
										r.operationID = "readHostTeam"
										r.pathPattern = "/hosts/{id}/team"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 'p': // Prefix: "properties"
				if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListProperty"
						r.operationID = "listProperty"
						r.pathPattern = "/properties"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateProperty"
						r.operationID = "createProperty"
						r.pathPattern = "/properties"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteProperty"
							r.operationID = "deleteProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadProperty"
							r.operationID = "readProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateProperty"
							r.operationID = "updateProperty"
							r.pathPattern = "/properties/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competition"
							if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadPropertyCompetition
									r.name = "ReadPropertyCompetition"
									r.operationID = "readPropertyCompetition"
									r.pathPattern = "/properties/{id}/competition"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "services"
							if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadPropertyServices
									r.name = "ReadPropertyServices"
									r.operationID = "readPropertyServices"
									r.pathPattern = "/properties/{id}/services"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "team"
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadPropertyTeam
									r.name = "ReadPropertyTeam"
									r.operationID = "readPropertyTeam"
									r.pathPattern = "/properties/{id}/team"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'r': // Prefix: "r"
				if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "eports"
					if l := len("eports"); len(elem) >= l && elem[0:l] == "eports" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListReport"
							r.operationID = "listReport"
							r.pathPattern = "/reports"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateReport"
							r.operationID = "createReport"
							r.pathPattern = "/reports"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: DeleteReport
								r.name = "DeleteReport"
								r.operationID = "deleteReport"
								r.pathPattern = "/reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								// Leaf: ReadReport
								r.name = "ReadReport"
								r.operationID = "readReport"
								r.pathPattern = "/reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								// Leaf: UpdateReport
								r.name = "UpdateReport"
								r.operationID = "updateReport"
								r.pathPattern = "/reports/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 'o': // Prefix: "ounds"
					if l := len("ounds"); len(elem) >= l && elem[0:l] == "ounds" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ListRound"
							r.operationID = "listRound"
							r.pathPattern = "/rounds"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateRound"
							r.operationID = "createRound"
							r.pathPattern = "/rounds"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteRound"
								r.operationID = "deleteRound"
								r.pathPattern = "/rounds/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ReadRound"
								r.operationID = "readRound"
								r.pathPattern = "/rounds/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = "UpdateRound"
								r.operationID = "updateRound"
								r.pathPattern = "/rounds/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/c"
							if l := len("/c"); len(elem) >= l && elem[0:l] == "/c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hecks"
								if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListRoundChecks
										r.name = "ListRoundChecks"
										r.operationID = "listRoundChecks"
										r.pathPattern = "/rounds/{id}/checks"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'o': // Prefix: "ompetition"
								if l := len("ompetition"); len(elem) >= l && elem[0:l] == "ompetition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadRoundCompetition
										r.name = "ReadRoundCompetition"
										r.operationID = "readRoundCompetition"
										r.pathPattern = "/rounds/{id}/competition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 's': // Prefix: "services"
				if l := len("services"); len(elem) >= l && elem[0:l] == "services" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListService"
						r.operationID = "listService"
						r.pathPattern = "/services"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateService"
						r.operationID = "createService"
						r.pathPattern = "/services"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteService"
							r.operationID = "deleteService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadService"
							r.operationID = "readService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateService"
							r.operationID = "updateService"
							r.pathPattern = "/services/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "c"
							if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "hecks"
								if l := len("hecks"); len(elem) >= l && elem[0:l] == "hecks" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListServiceChecks
										r.name = "ListServiceChecks"
										r.operationID = "listServiceChecks"
										r.pathPattern = "/services/{id}/checks"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'o': // Prefix: "ompetition"
								if l := len("ompetition"); len(elem) >= l && elem[0:l] == "ompetition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ReadServiceCompetition
										r.name = "ReadServiceCompetition"
										r.operationID = "readServiceCompetition"
										r.pathPattern = "/services/{id}/competition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 'h': // Prefix: "hosts"
							if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadServiceHosts
									r.name = "ReadServiceHosts"
									r.operationID = "readServiceHosts"
									r.pathPattern = "/services/{id}/hosts"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'p': // Prefix: "properties"
							if l := len("properties"); len(elem) >= l && elem[0:l] == "properties" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListServiceProperties
									r.name = "ListServiceProperties"
									r.operationID = "listServiceProperties"
									r.pathPattern = "/services/{id}/properties"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "team"
							if l := len("team"); len(elem) >= l && elem[0:l] == "team" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadServiceTeam
									r.name = "ReadServiceTeam"
									r.operationID = "readServiceTeam"
									r.pathPattern = "/services/{id}/team"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 't': // Prefix: "teams"
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListTeam"
						r.operationID = "listTeam"
						r.pathPattern = "/teams"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateTeam"
						r.operationID = "createTeam"
						r.pathPattern = "/teams"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteTeam"
							r.operationID = "deleteTeam"
							r.pathPattern = "/teams/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadTeam"
							r.operationID = "readTeam"
							r.pathPattern = "/teams/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateTeam"
							r.operationID = "updateTeam"
							r.pathPattern = "/teams/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competition"
							if l := len("competition"); len(elem) >= l && elem[0:l] == "competition" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ReadTeamCompetition
									r.name = "ReadTeamCompetition"
									r.operationID = "readTeamCompetition"
									r.pathPattern = "/teams/{id}/competition"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'h': // Prefix: "hosts"
							if l := len("hosts"); len(elem) >= l && elem[0:l] == "hosts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListTeamHosts
									r.name = "ListTeamHosts"
									r.operationID = "listTeamHosts"
									r.pathPattern = "/teams/{id}/hosts"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'u': // Prefix: "users"
							if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListTeamUsers
									r.name = "ListTeamUsers"
									r.operationID = "listTeamUsers"
									r.pathPattern = "/teams/{id}/users"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ListUser"
						r.operationID = "listUser"
						r.pathPattern = "/users"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "CreateUser"
						r.operationID = "createUser"
						r.pathPattern = "/users"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeleteUser"
							r.operationID = "deleteUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "ReadUser"
							r.operationID = "readUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = "UpdateUser"
							r.operationID = "updateUser"
							r.pathPattern = "/users/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "competitions"
							if l := len("competitions"); len(elem) >= l && elem[0:l] == "competitions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserCompetitions
									r.name = "ListUserCompetitions"
									r.operationID = "listUserCompetitions"
									r.pathPattern = "/users/{id}/competitions"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "teams"
							if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListUserTeams
									r.name = "ListUserTeams"
									r.operationID = "listUserTeams"
									r.pathPattern = "/users/{id}/teams"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
