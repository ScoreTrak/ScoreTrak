// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateCheck implements createCheck operation.
	//
	// Creates a new Check and persists it to storage.
	//
	// POST /checks
	CreateCheck(ctx context.Context, req *CreateCheckReq) (CreateCheckRes, error)
	// CreateCompetition implements createCompetition operation.
	//
	// Creates a new Competition and persists it to storage.
	//
	// POST /competitions
	CreateCompetition(ctx context.Context, req *CreateCompetitionReq) (CreateCompetitionRes, error)
	// CreateHost implements createHost operation.
	//
	// Creates a new Host and persists it to storage.
	//
	// POST /hosts
	CreateHost(ctx context.Context, req *CreateHostReq) (CreateHostRes, error)
	// CreateHostGroup implements createHostGroup operation.
	//
	// Creates a new HostGroup and persists it to storage.
	//
	// POST /host-groups
	CreateHostGroup(ctx context.Context, req *CreateHostGroupReq) (CreateHostGroupRes, error)
	// CreateProperty implements createProperty operation.
	//
	// Creates a new Property and persists it to storage.
	//
	// POST /properties
	CreateProperty(ctx context.Context, req *CreatePropertyReq) (CreatePropertyRes, error)
	// CreateRound implements createRound operation.
	//
	// Creates a new Round and persists it to storage.
	//
	// POST /rounds
	CreateRound(ctx context.Context, req *CreateRoundReq) (CreateRoundRes, error)
	// CreateService implements createService operation.
	//
	// Creates a new Service and persists it to storage.
	//
	// POST /services
	CreateService(ctx context.Context, req *CreateServiceReq) (CreateServiceRes, error)
	// CreateTeam implements createTeam operation.
	//
	// Creates a new Team and persists it to storage.
	//
	// POST /teams
	CreateTeam(ctx context.Context, req *CreateTeamReq) (CreateTeamRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error)
	// DeleteCheck implements deleteCheck operation.
	//
	// Deletes the Check with the requested ID.
	//
	// DELETE /checks/{id}
	DeleteCheck(ctx context.Context, params DeleteCheckParams) (DeleteCheckRes, error)
	// DeleteCompetition implements deleteCompetition operation.
	//
	// Deletes the Competition with the requested ID.
	//
	// DELETE /competitions/{id}
	DeleteCompetition(ctx context.Context, params DeleteCompetitionParams) (DeleteCompetitionRes, error)
	// DeleteHost implements deleteHost operation.
	//
	// Deletes the Host with the requested ID.
	//
	// DELETE /hosts/{id}
	DeleteHost(ctx context.Context, params DeleteHostParams) (DeleteHostRes, error)
	// DeleteHostGroup implements deleteHostGroup operation.
	//
	// Deletes the HostGroup with the requested ID.
	//
	// DELETE /host-groups/{id}
	DeleteHostGroup(ctx context.Context, params DeleteHostGroupParams) (DeleteHostGroupRes, error)
	// DeleteProperty implements deleteProperty operation.
	//
	// Deletes the Property with the requested ID.
	//
	// DELETE /properties/{id}
	DeleteProperty(ctx context.Context, params DeletePropertyParams) (DeletePropertyRes, error)
	// DeleteRound implements deleteRound operation.
	//
	// Deletes the Round with the requested ID.
	//
	// DELETE /rounds/{id}
	DeleteRound(ctx context.Context, params DeleteRoundParams) (DeleteRoundRes, error)
	// DeleteService implements deleteService operation.
	//
	// Deletes the Service with the requested ID.
	//
	// DELETE /services/{id}
	DeleteService(ctx context.Context, params DeleteServiceParams) (DeleteServiceRes, error)
	// DeleteTeam implements deleteTeam operation.
	//
	// Deletes the Team with the requested ID.
	//
	// DELETE /teams/{id}
	DeleteTeam(ctx context.Context, params DeleteTeamParams) (DeleteTeamRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListCheck implements listCheck operation.
	//
	// List Checks.
	//
	// GET /checks
	ListCheck(ctx context.Context, params ListCheckParams) (ListCheckRes, error)
	// ListCompetition implements listCompetition operation.
	//
	// List Competitions.
	//
	// GET /competitions
	ListCompetition(ctx context.Context, params ListCompetitionParams) (ListCompetitionRes, error)
	// ListCompetitionTeams implements listCompetitionTeams operation.
	//
	// List attached Teams.
	//
	// GET /competitions/{id}/teams
	ListCompetitionTeams(ctx context.Context, params ListCompetitionTeamsParams) (ListCompetitionTeamsRes, error)
	// ListCompetitionUsers implements listCompetitionUsers operation.
	//
	// List attached Users.
	//
	// GET /competitions/{id}/users
	ListCompetitionUsers(ctx context.Context, params ListCompetitionUsersParams) (ListCompetitionUsersRes, error)
	// ListHost implements listHost operation.
	//
	// List Hosts.
	//
	// GET /hosts
	ListHost(ctx context.Context, params ListHostParams) (ListHostRes, error)
	// ListHostGroup implements listHostGroup operation.
	//
	// List HostGroups.
	//
	// GET /host-groups
	ListHostGroup(ctx context.Context, params ListHostGroupParams) (ListHostGroupRes, error)
	// ListHostGroupHosts implements listHostGroupHosts operation.
	//
	// List attached Hosts.
	//
	// GET /host-groups/{id}/hosts
	ListHostGroupHosts(ctx context.Context, params ListHostGroupHostsParams) (ListHostGroupHostsRes, error)
	// ListHostServices implements listHostServices operation.
	//
	// List attached Services.
	//
	// GET /hosts/{id}/services
	ListHostServices(ctx context.Context, params ListHostServicesParams) (ListHostServicesRes, error)
	// ListProperty implements listProperty operation.
	//
	// List Properties.
	//
	// GET /properties
	ListProperty(ctx context.Context, params ListPropertyParams) (ListPropertyRes, error)
	// ListRound implements listRound operation.
	//
	// List Rounds.
	//
	// GET /rounds
	ListRound(ctx context.Context, params ListRoundParams) (ListRoundRes, error)
	// ListRoundChecks implements listRoundChecks operation.
	//
	// List attached Checks.
	//
	// GET /rounds/{id}/checks
	ListRoundChecks(ctx context.Context, params ListRoundChecksParams) (ListRoundChecksRes, error)
	// ListService implements listService operation.
	//
	// List Services.
	//
	// GET /services
	ListService(ctx context.Context, params ListServiceParams) (ListServiceRes, error)
	// ListServiceChecks implements listServiceChecks operation.
	//
	// List attached Checks.
	//
	// GET /services/{id}/checks
	ListServiceChecks(ctx context.Context, params ListServiceChecksParams) (ListServiceChecksRes, error)
	// ListServiceProperties implements listServiceProperties operation.
	//
	// List attached Properties.
	//
	// GET /services/{id}/properties
	ListServiceProperties(ctx context.Context, params ListServicePropertiesParams) (ListServicePropertiesRes, error)
	// ListTeam implements listTeam operation.
	//
	// List Teams.
	//
	// GET /teams
	ListTeam(ctx context.Context, params ListTeamParams) (ListTeamRes, error)
	// ListTeamHosts implements listTeamHosts operation.
	//
	// List attached Hosts.
	//
	// GET /teams/{id}/hosts
	ListTeamHosts(ctx context.Context, params ListTeamHostsParams) (ListTeamHostsRes, error)
	// ListTeamUsers implements listTeamUsers operation.
	//
	// List attached Users.
	//
	// GET /teams/{id}/users
	ListTeamUsers(ctx context.Context, params ListTeamUsersParams) (ListTeamUsersRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserCompetitions implements listUserCompetitions operation.
	//
	// List attached Competitions.
	//
	// GET /users/{id}/competitions
	ListUserCompetitions(ctx context.Context, params ListUserCompetitionsParams) (ListUserCompetitionsRes, error)
	// ListUserTeams implements listUserTeams operation.
	//
	// List attached Teams.
	//
	// GET /users/{id}/teams
	ListUserTeams(ctx context.Context, params ListUserTeamsParams) (ListUserTeamsRes, error)
	// ReadCheck implements readCheck operation.
	//
	// Finds the Check with the requested ID and returns it.
	//
	// GET /checks/{id}
	ReadCheck(ctx context.Context, params ReadCheckParams) (ReadCheckRes, error)
	// ReadCheckCompetition implements readCheckCompetition operation.
	//
	// Find the attached Competition of the Check with the given ID.
	//
	// GET /checks/{id}/competition
	ReadCheckCompetition(ctx context.Context, params ReadCheckCompetitionParams) (ReadCheckCompetitionRes, error)
	// ReadCheckRounds implements readCheckRounds operation.
	//
	// Find the attached Round of the Check with the given ID.
	//
	// GET /checks/{id}/rounds
	ReadCheckRounds(ctx context.Context, params ReadCheckRoundsParams) (ReadCheckRoundsRes, error)
	// ReadCheckServices implements readCheckServices operation.
	//
	// Find the attached Service of the Check with the given ID.
	//
	// GET /checks/{id}/services
	ReadCheckServices(ctx context.Context, params ReadCheckServicesParams) (ReadCheckServicesRes, error)
	// ReadCompetition implements readCompetition operation.
	//
	// Finds the Competition with the requested ID and returns it.
	//
	// GET /competitions/{id}
	ReadCompetition(ctx context.Context, params ReadCompetitionParams) (ReadCompetitionRes, error)
	// ReadHost implements readHost operation.
	//
	// Finds the Host with the requested ID and returns it.
	//
	// GET /hosts/{id}
	ReadHost(ctx context.Context, params ReadHostParams) (ReadHostRes, error)
	// ReadHostCompetition implements readHostCompetition operation.
	//
	// Find the attached Competition of the Host with the given ID.
	//
	// GET /hosts/{id}/competition
	ReadHostCompetition(ctx context.Context, params ReadHostCompetitionParams) (ReadHostCompetitionRes, error)
	// ReadHostGroup implements readHostGroup operation.
	//
	// Finds the HostGroup with the requested ID and returns it.
	//
	// GET /host-groups/{id}
	ReadHostGroup(ctx context.Context, params ReadHostGroupParams) (ReadHostGroupRes, error)
	// ReadHostGroupCompetition implements readHostGroupCompetition operation.
	//
	// Find the attached Competition of the HostGroup with the given ID.
	//
	// GET /host-groups/{id}/competition
	ReadHostGroupCompetition(ctx context.Context, params ReadHostGroupCompetitionParams) (ReadHostGroupCompetitionRes, error)
	// ReadHostGroupTeam implements readHostGroupTeam operation.
	//
	// Find the attached Team of the HostGroup with the given ID.
	//
	// GET /host-groups/{id}/team
	ReadHostGroupTeam(ctx context.Context, params ReadHostGroupTeamParams) (ReadHostGroupTeamRes, error)
	// ReadHostHostGroup implements readHostHostGroup operation.
	//
	// Find the attached HostGroup of the Host with the given ID.
	//
	// GET /hosts/{id}/host-group
	ReadHostHostGroup(ctx context.Context, params ReadHostHostGroupParams) (ReadHostHostGroupRes, error)
	// ReadHostTeam implements readHostTeam operation.
	//
	// Find the attached Team of the Host with the given ID.
	//
	// GET /hosts/{id}/team
	ReadHostTeam(ctx context.Context, params ReadHostTeamParams) (ReadHostTeamRes, error)
	// ReadProperty implements readProperty operation.
	//
	// Finds the Property with the requested ID and returns it.
	//
	// GET /properties/{id}
	ReadProperty(ctx context.Context, params ReadPropertyParams) (ReadPropertyRes, error)
	// ReadPropertyCompetition implements readPropertyCompetition operation.
	//
	// Find the attached Competition of the Property with the given ID.
	//
	// GET /properties/{id}/competition
	ReadPropertyCompetition(ctx context.Context, params ReadPropertyCompetitionParams) (ReadPropertyCompetitionRes, error)
	// ReadPropertyServices implements readPropertyServices operation.
	//
	// Find the attached Service of the Property with the given ID.
	//
	// GET /properties/{id}/services
	ReadPropertyServices(ctx context.Context, params ReadPropertyServicesParams) (ReadPropertyServicesRes, error)
	// ReadPropertyTeam implements readPropertyTeam operation.
	//
	// Find the attached Team of the Property with the given ID.
	//
	// GET /properties/{id}/team
	ReadPropertyTeam(ctx context.Context, params ReadPropertyTeamParams) (ReadPropertyTeamRes, error)
	// ReadRound implements readRound operation.
	//
	// Finds the Round with the requested ID and returns it.
	//
	// GET /rounds/{id}
	ReadRound(ctx context.Context, params ReadRoundParams) (ReadRoundRes, error)
	// ReadRoundCompetition implements readRoundCompetition operation.
	//
	// Find the attached Competition of the Round with the given ID.
	//
	// GET /rounds/{id}/competition
	ReadRoundCompetition(ctx context.Context, params ReadRoundCompetitionParams) (ReadRoundCompetitionRes, error)
	// ReadService implements readService operation.
	//
	// Finds the Service with the requested ID and returns it.
	//
	// GET /services/{id}
	ReadService(ctx context.Context, params ReadServiceParams) (ReadServiceRes, error)
	// ReadServiceCompetition implements readServiceCompetition operation.
	//
	// Find the attached Competition of the Service with the given ID.
	//
	// GET /services/{id}/competition
	ReadServiceCompetition(ctx context.Context, params ReadServiceCompetitionParams) (ReadServiceCompetitionRes, error)
	// ReadServiceHosts implements readServiceHosts operation.
	//
	// Find the attached Host of the Service with the given ID.
	//
	// GET /services/{id}/hosts
	ReadServiceHosts(ctx context.Context, params ReadServiceHostsParams) (ReadServiceHostsRes, error)
	// ReadServiceTeam implements readServiceTeam operation.
	//
	// Find the attached Team of the Service with the given ID.
	//
	// GET /services/{id}/team
	ReadServiceTeam(ctx context.Context, params ReadServiceTeamParams) (ReadServiceTeamRes, error)
	// ReadTeam implements readTeam operation.
	//
	// Finds the Team with the requested ID and returns it.
	//
	// GET /teams/{id}
	ReadTeam(ctx context.Context, params ReadTeamParams) (ReadTeamRes, error)
	// ReadTeamCompetition implements readTeamCompetition operation.
	//
	// Find the attached Competition of the Team with the given ID.
	//
	// GET /teams/{id}/competition
	ReadTeamCompetition(ctx context.Context, params ReadTeamCompetitionParams) (ReadTeamCompetitionRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateCheck implements updateCheck operation.
	//
	// Updates a Check and persists changes to storage.
	//
	// PATCH /checks/{id}
	UpdateCheck(ctx context.Context, req *UpdateCheckReq, params UpdateCheckParams) (UpdateCheckRes, error)
	// UpdateCompetition implements updateCompetition operation.
	//
	// Updates a Competition and persists changes to storage.
	//
	// PATCH /competitions/{id}
	UpdateCompetition(ctx context.Context, req *UpdateCompetitionReq, params UpdateCompetitionParams) (UpdateCompetitionRes, error)
	// UpdateHost implements updateHost operation.
	//
	// Updates a Host and persists changes to storage.
	//
	// PATCH /hosts/{id}
	UpdateHost(ctx context.Context, req *UpdateHostReq, params UpdateHostParams) (UpdateHostRes, error)
	// UpdateHostGroup implements updateHostGroup operation.
	//
	// Updates a HostGroup and persists changes to storage.
	//
	// PATCH /host-groups/{id}
	UpdateHostGroup(ctx context.Context, req *UpdateHostGroupReq, params UpdateHostGroupParams) (UpdateHostGroupRes, error)
	// UpdateProperty implements updateProperty operation.
	//
	// Updates a Property and persists changes to storage.
	//
	// PATCH /properties/{id}
	UpdateProperty(ctx context.Context, req *UpdatePropertyReq, params UpdatePropertyParams) (UpdatePropertyRes, error)
	// UpdateRound implements updateRound operation.
	//
	// Updates a Round and persists changes to storage.
	//
	// PATCH /rounds/{id}
	UpdateRound(ctx context.Context, req *UpdateRoundReq, params UpdateRoundParams) (UpdateRoundRes, error)
	// UpdateService implements updateService operation.
	//
	// Updates a Service and persists changes to storage.
	//
	// PATCH /services/{id}
	UpdateService(ctx context.Context, req *UpdateServiceReq, params UpdateServiceParams) (UpdateServiceRes, error)
	// UpdateTeam implements updateTeam operation.
	//
	// Updates a Team and persists changes to storage.
	//
	// PATCH /teams/{id}
	UpdateTeam(ctx context.Context, req *UpdateTeamReq, params UpdateTeamParams) (UpdateTeamRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
