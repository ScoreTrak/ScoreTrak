// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// HostServiceDelete is the builder for deleting a HostService entity.
type HostServiceDelete struct {
	config
	hooks    []Hook
	mutation *HostServiceMutation
}

// Where appends a list predicates to the HostServiceDelete builder.
func (hsd *HostServiceDelete) Where(ps ...predicate.HostService) *HostServiceDelete {
	hsd.mutation.Where(ps...)
	return hsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hsd *HostServiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HostServiceMutation](ctx, hsd.sqlExec, hsd.mutation, hsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hsd *HostServiceDelete) ExecX(ctx context.Context) int {
	n, err := hsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hsd *HostServiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hostservice.Table, sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString))
	if ps := hsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hsd.mutation.done = true
	return affected, err
}

// HostServiceDeleteOne is the builder for deleting a single HostService entity.
type HostServiceDeleteOne struct {
	hsd *HostServiceDelete
}

// Where appends a list predicates to the HostServiceDelete builder.
func (hsdo *HostServiceDeleteOne) Where(ps ...predicate.HostService) *HostServiceDeleteOne {
	hsdo.hsd.mutation.Where(ps...)
	return hsdo
}

// Exec executes the deletion query.
func (hsdo *HostServiceDeleteOne) Exec(ctx context.Context) error {
	n, err := hsdo.hsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hostservice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hsdo *HostServiceDeleteOne) ExecX(ctx context.Context) {
	if err := hsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
