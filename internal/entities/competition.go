// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
)

// Competition is the model entity for the Competition schema.
type Competition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// Pause holds the value of the "pause" field.
	Pause bool `json:"pause,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// RoundDuration holds the value of the "round_duration" field.
	RoundDuration float64 `json:"round_duration,omitempty"`
	// ToBeStartedAt holds the value of the "to_be_started_at" field.
	ToBeStartedAt *time.Time `json:"to_be_started_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompetitionQuery when eager-loading is set.
	Edges        CompetitionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompetitionEdges holds the relations/edges for other nodes in the graph.
type CompetitionEdges struct {
	// Teams holds the value of the teams edge.
	Teams []*Team `json:"teams,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e CompetitionEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "teams"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e CompetitionEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Competition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case competition.FieldHidden, competition.FieldPause:
			values[i] = new(sql.NullBool)
		case competition.FieldRoundDuration:
			values[i] = new(sql.NullFloat64)
		case competition.FieldID:
			values[i] = new(sql.NullInt64)
		case competition.FieldName, competition.FieldDisplayName:
			values[i] = new(sql.NullString)
		case competition.FieldCreateTime, competition.FieldUpdateTime, competition.FieldToBeStartedAt, competition.FieldStartedAt, competition.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Competition fields.
func (c *Competition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case competition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case competition.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case competition.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case competition.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				c.Hidden = value.Bool
			}
		case competition.FieldPause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause", values[i])
			} else if value.Valid {
				c.Pause = value.Bool
			}
		case competition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case competition.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				c.DisplayName = value.String
			}
		case competition.FieldRoundDuration:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field round_duration", values[i])
			} else if value.Valid {
				c.RoundDuration = value.Float64
			}
		case competition.FieldToBeStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field to_be_started_at", values[i])
			} else if value.Valid {
				c.ToBeStartedAt = new(time.Time)
				*c.ToBeStartedAt = value.Time
			}
		case competition.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				c.StartedAt = new(time.Time)
				*c.StartedAt = value.Time
			}
		case competition.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				c.FinishedAt = new(time.Time)
				*c.FinishedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Competition.
// This includes values selected through modifiers, order, etc.
func (c *Competition) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTeams queries the "teams" edge of the Competition entity.
func (c *Competition) QueryTeams() *TeamQuery {
	return NewCompetitionClient(c.config).QueryTeams(c)
}

// QueryUsers queries the "users" edge of the Competition entity.
func (c *Competition) QueryUsers() *UserQuery {
	return NewCompetitionClient(c.config).QueryUsers(c)
}

// Update returns a builder for updating this Competition.
// Note that you need to call Competition.Unwrap() before calling this method if this Competition
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Competition) Update() *CompetitionUpdateOne {
	return NewCompetitionClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Competition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Competition) Unwrap() *Competition {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entities: Competition is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Competition) String() string {
	var builder strings.Builder
	builder.WriteString("Competition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", c.Hidden))
	builder.WriteString(", ")
	builder.WriteString("pause=")
	builder.WriteString(fmt.Sprintf("%v", c.Pause))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(c.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("round_duration=")
	builder.WriteString(fmt.Sprintf("%v", c.RoundDuration))
	builder.WriteString(", ")
	if v := c.ToBeStartedAt; v != nil {
		builder.WriteString("to_be_started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := c.FinishedAt; v != nil {
		builder.WriteString("finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Competitions is a parsable slice of Competition.
type Competitions []*Competition
