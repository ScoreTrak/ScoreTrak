// Code generated by ent, DO NOT EDIT.

package host

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldUpdateTime, v))
}

// Pause applies equality check predicate on the "pause" field. It's identical to PauseEQ.
func Pause(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldPause, v))
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHidden, v))
}

// CompetitionID applies equality check predicate on the "competition_id" field. It's identical to CompetitionIDEQ.
func CompetitionID(v int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCompetitionID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldTeamID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldAddress, v))
}

// AddressListRange applies equality check predicate on the "address_list_range" field. It's identical to AddressListRangeEQ.
func AddressListRange(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldAddressListRange, v))
}

// Editable applies equality check predicate on the "editable" field. It's identical to EditableEQ.
func Editable(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEditable, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldUpdateTime, v))
}

// PauseEQ applies the EQ predicate on the "pause" field.
func PauseEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldPause, v))
}

// PauseNEQ applies the NEQ predicate on the "pause" field.
func PauseNEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldPause, v))
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldHidden, v))
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldHidden, v))
}

// CompetitionIDEQ applies the EQ predicate on the "competition_id" field.
func CompetitionIDEQ(v int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCompetitionID, v))
}

// CompetitionIDNEQ applies the NEQ predicate on the "competition_id" field.
func CompetitionIDNEQ(v int) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldCompetitionID, v))
}

// CompetitionIDIn applies the In predicate on the "competition_id" field.
func CompetitionIDIn(vs ...int) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldCompetitionID, vs...))
}

// CompetitionIDNotIn applies the NotIn predicate on the "competition_id" field.
func CompetitionIDNotIn(vs ...int) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldCompetitionID, vs...))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v int) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...int) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...int) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldTeamID, vs...))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldAddress, v))
}

// AddressListRangeEQ applies the EQ predicate on the "address_list_range" field.
func AddressListRangeEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldAddressListRange, v))
}

// AddressListRangeNEQ applies the NEQ predicate on the "address_list_range" field.
func AddressListRangeNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldAddressListRange, v))
}

// AddressListRangeIn applies the In predicate on the "address_list_range" field.
func AddressListRangeIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldAddressListRange, vs...))
}

// AddressListRangeNotIn applies the NotIn predicate on the "address_list_range" field.
func AddressListRangeNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldAddressListRange, vs...))
}

// AddressListRangeGT applies the GT predicate on the "address_list_range" field.
func AddressListRangeGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldAddressListRange, v))
}

// AddressListRangeGTE applies the GTE predicate on the "address_list_range" field.
func AddressListRangeGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldAddressListRange, v))
}

// AddressListRangeLT applies the LT predicate on the "address_list_range" field.
func AddressListRangeLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldAddressListRange, v))
}

// AddressListRangeLTE applies the LTE predicate on the "address_list_range" field.
func AddressListRangeLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldAddressListRange, v))
}

// AddressListRangeContains applies the Contains predicate on the "address_list_range" field.
func AddressListRangeContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldAddressListRange, v))
}

// AddressListRangeHasPrefix applies the HasPrefix predicate on the "address_list_range" field.
func AddressListRangeHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldAddressListRange, v))
}

// AddressListRangeHasSuffix applies the HasSuffix predicate on the "address_list_range" field.
func AddressListRangeHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldAddressListRange, v))
}

// AddressListRangeEqualFold applies the EqualFold predicate on the "address_list_range" field.
func AddressListRangeEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldAddressListRange, v))
}

// AddressListRangeContainsFold applies the ContainsFold predicate on the "address_list_range" field.
func AddressListRangeContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldAddressListRange, v))
}

// EditableEQ applies the EQ predicate on the "editable" field.
func EditableEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEditable, v))
}

// EditableNEQ applies the NEQ predicate on the "editable" field.
func EditableNEQ(v bool) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldEditable, v))
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServices applies the HasEdge predicate on the "services" edge.
func HasServices() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServicesTable, ServicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServicesWith applies the HasEdge predicate on the "services" edge with a given conditions (other predicates).
func HasServicesWith(preds ...predicate.Service) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := newServicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHostGroup applies the HasEdge predicate on the "host_group" edge.
func HasHostGroup() predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostGroupTable, HostGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostGroupWith applies the HasEdge predicate on the "host_group" edge with a given conditions (other predicates).
func HasHostGroupWith(preds ...predicate.HostGroup) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		step := newHostGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		p(s.Not())
	})
}
