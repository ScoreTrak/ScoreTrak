// Code generated by ent, DO NOT EDIT.

package entities

import (
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/property"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/round"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/schema"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/service"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	checkMixin := schema.Check{}.Mixin()
	checkMixinFields0 := checkMixin[0].Fields()
	_ = checkMixinFields0
	checkMixinFields2 := checkMixin[2].Fields()
	_ = checkMixinFields2
	checkFields := schema.Check{}.Fields()
	_ = checkFields
	// checkDescHidden is the schema descriptor for hidden field.
	checkDescHidden := checkMixinFields2[0].Descriptor()
	// check.DefaultHidden holds the default value on creation for the hidden field.
	check.DefaultHidden = checkDescHidden.Default.(bool)
	// checkDescID is the schema descriptor for id field.
	checkDescID := checkMixinFields0[0].Descriptor()
	// check.DefaultID holds the default value on creation for the id field.
	check.DefaultID = checkDescID.Default.(func() string)
	// check.IDValidator is a validator for the "id" field. It is called by the builders before save.
	check.IDValidator = checkDescID.Validators[0].(func(string) error)
	competitionMixin := schema.Competition{}.Mixin()
	competitionMixinFields0 := competitionMixin[0].Fields()
	_ = competitionMixinFields0
	competitionMixinFields1 := competitionMixin[1].Fields()
	_ = competitionMixinFields1
	competitionFields := schema.Competition{}.Fields()
	_ = competitionFields
	// competitionDescHidden is the schema descriptor for hidden field.
	competitionDescHidden := competitionMixinFields1[0].Descriptor()
	// competition.DefaultHidden holds the default value on creation for the hidden field.
	competition.DefaultHidden = competitionDescHidden.Default.(bool)
	// competitionDescName is the schema descriptor for name field.
	competitionDescName := competitionFields[0].Descriptor()
	// competition.NameValidator is a validator for the "name" field. It is called by the builders before save.
	competition.NameValidator = func() func(string) error {
		validators := competitionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// competitionDescDisplayName is the schema descriptor for display_name field.
	competitionDescDisplayName := competitionFields[1].Descriptor()
	// competition.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	competition.DisplayNameValidator = func() func(string) error {
		validators := competitionDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// competitionDescID is the schema descriptor for id field.
	competitionDescID := competitionMixinFields0[0].Descriptor()
	// competition.DefaultID holds the default value on creation for the id field.
	competition.DefaultID = competitionDescID.Default.(func() string)
	// competition.IDValidator is a validator for the "id" field. It is called by the builders before save.
	competition.IDValidator = competitionDescID.Validators[0].(func(string) error)
	hostMixin := schema.Host{}.Mixin()
	hostMixinFields0 := hostMixin[0].Fields()
	_ = hostMixinFields0
	hostMixinFields2 := hostMixin[2].Fields()
	_ = hostMixinFields2
	hostFields := schema.Host{}.Fields()
	_ = hostFields
	// hostDescHidden is the schema descriptor for hidden field.
	hostDescHidden := hostMixinFields2[0].Descriptor()
	// host.DefaultHidden holds the default value on creation for the hidden field.
	host.DefaultHidden = hostDescHidden.Default.(bool)
	// hostDescID is the schema descriptor for id field.
	hostDescID := hostMixinFields0[0].Descriptor()
	// host.DefaultID holds the default value on creation for the id field.
	host.DefaultID = hostDescID.Default.(func() string)
	// host.IDValidator is a validator for the "id" field. It is called by the builders before save.
	host.IDValidator = hostDescID.Validators[0].(func(string) error)
	hostserviceMixin := schema.HostService{}.Mixin()
	hostserviceMixinFields0 := hostserviceMixin[0].Fields()
	_ = hostserviceMixinFields0
	hostserviceMixinFields1 := hostserviceMixin[1].Fields()
	_ = hostserviceMixinFields1
	hostserviceMixinFields3 := hostserviceMixin[3].Fields()
	_ = hostserviceMixinFields3
	hostserviceFields := schema.HostService{}.Fields()
	_ = hostserviceFields
	// hostserviceDescName is the schema descriptor for name field.
	hostserviceDescName := hostserviceMixinFields1[0].Descriptor()
	// hostservice.NameValidator is a validator for the "name" field. It is called by the builders before save.
	hostservice.NameValidator = func() func(string) error {
		validators := hostserviceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hostserviceDescDisplayName is the schema descriptor for display_name field.
	hostserviceDescDisplayName := hostserviceMixinFields1[1].Descriptor()
	// hostservice.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	hostservice.DisplayNameValidator = func() func(string) error {
		validators := hostserviceDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hostserviceDescHidden is the schema descriptor for hidden field.
	hostserviceDescHidden := hostserviceMixinFields3[0].Descriptor()
	// hostservice.DefaultHidden holds the default value on creation for the hidden field.
	hostservice.DefaultHidden = hostserviceDescHidden.Default.(bool)
	// hostserviceDescWeight is the schema descriptor for weight field.
	hostserviceDescWeight := hostserviceFields[0].Descriptor()
	// hostservice.DefaultWeight holds the default value on creation for the weight field.
	hostservice.DefaultWeight = hostserviceDescWeight.Default.(int)
	// hostserviceDescPointBoost is the schema descriptor for point_boost field.
	hostserviceDescPointBoost := hostserviceFields[1].Descriptor()
	// hostservice.DefaultPointBoost holds the default value on creation for the point_boost field.
	hostservice.DefaultPointBoost = hostserviceDescPointBoost.Default.(int)
	// hostserviceDescRoundUnits is the schema descriptor for round_units field.
	hostserviceDescRoundUnits := hostserviceFields[2].Descriptor()
	// hostservice.DefaultRoundUnits holds the default value on creation for the round_units field.
	hostservice.DefaultRoundUnits = hostserviceDescRoundUnits.Default.(int)
	// hostserviceDescRoundDelay is the schema descriptor for round_delay field.
	hostserviceDescRoundDelay := hostserviceFields[3].Descriptor()
	// hostservice.DefaultRoundDelay holds the default value on creation for the round_delay field.
	hostservice.DefaultRoundDelay = hostserviceDescRoundDelay.Default.(int)
	// hostserviceDescID is the schema descriptor for id field.
	hostserviceDescID := hostserviceMixinFields0[0].Descriptor()
	// hostservice.DefaultID holds the default value on creation for the id field.
	hostservice.DefaultID = hostserviceDescID.Default.(func() string)
	// hostservice.IDValidator is a validator for the "id" field. It is called by the builders before save.
	hostservice.IDValidator = hostserviceDescID.Validators[0].(func(string) error)
	propertyMixin := schema.Property{}.Mixin()
	propertyMixinFields0 := propertyMixin[0].Fields()
	_ = propertyMixinFields0
	propertyFields := schema.Property{}.Fields()
	_ = propertyFields
	// propertyDescID is the schema descriptor for id field.
	propertyDescID := propertyMixinFields0[0].Descriptor()
	// property.DefaultID holds the default value on creation for the id field.
	property.DefaultID = propertyDescID.Default.(func() string)
	// property.IDValidator is a validator for the "id" field. It is called by the builders before save.
	property.IDValidator = propertyDescID.Validators[0].(func(string) error)
	roundMixin := schema.Round{}.Mixin()
	roundMixinFields0 := roundMixin[0].Fields()
	_ = roundMixinFields0
	roundFields := schema.Round{}.Fields()
	_ = roundFields
	// roundDescID is the schema descriptor for id field.
	roundDescID := roundMixinFields0[0].Descriptor()
	// round.DefaultID holds the default value on creation for the id field.
	round.DefaultID = roundDescID.Default.(func() string)
	// round.IDValidator is a validator for the "id" field. It is called by the builders before save.
	round.IDValidator = roundDescID.Validators[0].(func(string) error)
	serviceMixin := schema.Service{}.Mixin()
	serviceMixinFields0 := serviceMixin[0].Fields()
	_ = serviceMixinFields0
	serviceMixinFields1 := serviceMixin[1].Fields()
	_ = serviceMixinFields1
	serviceMixinFields3 := serviceMixin[3].Fields()
	_ = serviceMixinFields3
	serviceFields := schema.Service{}.Fields()
	_ = serviceFields
	// serviceDescName is the schema descriptor for name field.
	serviceDescName := serviceMixinFields1[0].Descriptor()
	// service.NameValidator is a validator for the "name" field. It is called by the builders before save.
	service.NameValidator = func() func(string) error {
		validators := serviceDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// serviceDescDisplayName is the schema descriptor for display_name field.
	serviceDescDisplayName := serviceMixinFields1[1].Descriptor()
	// service.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	service.DisplayNameValidator = func() func(string) error {
		validators := serviceDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// serviceDescHidden is the schema descriptor for hidden field.
	serviceDescHidden := serviceMixinFields3[0].Descriptor()
	// service.DefaultHidden holds the default value on creation for the hidden field.
	service.DefaultHidden = serviceDescHidden.Default.(bool)
	// serviceDescID is the schema descriptor for id field.
	serviceDescID := serviceMixinFields0[0].Descriptor()
	// service.DefaultID holds the default value on creation for the id field.
	service.DefaultID = serviceDescID.Default.(func() string)
	// service.IDValidator is a validator for the "id" field. It is called by the builders before save.
	service.IDValidator = serviceDescID.Validators[0].(func(string) error)
	teamMixin := schema.Team{}.Mixin()
	teamMixinFields0 := teamMixin[0].Fields()
	_ = teamMixinFields0
	teamMixinFields1 := teamMixin[1].Fields()
	_ = teamMixinFields1
	teamMixinFields3 := teamMixin[3].Fields()
	_ = teamMixinFields3
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescName is the schema descriptor for name field.
	teamDescName := teamMixinFields1[0].Descriptor()
	// team.NameValidator is a validator for the "name" field. It is called by the builders before save.
	team.NameValidator = func() func(string) error {
		validators := teamDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamDescDisplayName is the schema descriptor for display_name field.
	teamDescDisplayName := teamMixinFields1[1].Descriptor()
	// team.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	team.DisplayNameValidator = func() func(string) error {
		validators := teamDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// teamDescHidden is the schema descriptor for hidden field.
	teamDescHidden := teamMixinFields3[0].Descriptor()
	// team.DefaultHidden holds the default value on creation for the hidden field.
	team.DefaultHidden = teamDescHidden.Default.(bool)
	// teamDescNumber is the schema descriptor for number field.
	teamDescNumber := teamFields[0].Descriptor()
	// team.NumberValidator is a validator for the "number" field. It is called by the builders before save.
	team.NumberValidator = teamDescNumber.Validators[0].(func(int) error)
	// teamDescID is the schema descriptor for id field.
	teamDescID := teamMixinFields0[0].Descriptor()
	// team.DefaultID holds the default value on creation for the id field.
	team.DefaultID = teamDescID.Default.(func() string)
	// team.IDValidator is a validator for the "id" field. It is called by the builders before save.
	team.IDValidator = teamDescID.Validators[0].(func(string) error)
}
