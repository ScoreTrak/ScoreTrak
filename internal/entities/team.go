// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// Pause holds the value of the "pause" field.
	Pause bool `json:"pause,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges        TeamEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Hosts holds the value of the hosts edge.
	Hosts []*Host `json:"hosts,omitempty"`
	// Hostservices holds the value of the hostservices edge.
	Hostservices []*HostService `json:"hostservices,omitempty"`
	// Checks holds the value of the checks edge.
	Checks []*Check `json:"checks,omitempty"`
	// Properties holds the value of the properties edge.
	Properties []*Property `json:"properties,omitempty"`
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) HostsOrErr() ([]*Host, error) {
	if e.loadedTypes[0] {
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "hosts"}
}

// HostservicesOrErr returns the Hostservices value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) HostservicesOrErr() ([]*HostService, error) {
	if e.loadedTypes[1] {
		return e.Hostservices, nil
	}
	return nil, &NotLoadedError{edge: "hostservices"}
}

// ChecksOrErr returns the Checks value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) ChecksOrErr() ([]*Check, error) {
	if e.loadedTypes[2] {
		return e.Checks, nil
	}
	return nil, &NotLoadedError{edge: "checks"}
}

// PropertiesOrErr returns the Properties value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) PropertiesOrErr() ([]*Property, error) {
	if e.loadedTypes[3] {
		return e.Properties, nil
	}
	return nil, &NotLoadedError{edge: "properties"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[4] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldPause, team.FieldHidden:
			values[i] = new(sql.NullBool)
		case team.FieldNumber:
			values[i] = new(sql.NullInt64)
		case team.FieldID, team.FieldName, team.FieldDisplayName, team.FieldCompetitionID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case team.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				t.DisplayName = value.String
			}
		case team.FieldPause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause", values[i])
			} else if value.Valid {
				t.Pause = value.Bool
			}
		case team.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				t.Hidden = value.Bool
			}
		case team.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				t.Number = int(value.Int64)
			}
		case team.FieldCompetitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				t.CompetitionID = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryHosts queries the "hosts" edge of the Team entity.
func (t *Team) QueryHosts() *HostQuery {
	return NewTeamClient(t.config).QueryHosts(t)
}

// QueryHostservices queries the "hostservices" edge of the Team entity.
func (t *Team) QueryHostservices() *HostServiceQuery {
	return NewTeamClient(t.config).QueryHostservices(t)
}

// QueryChecks queries the "checks" edge of the Team entity.
func (t *Team) QueryChecks() *CheckQuery {
	return NewTeamClient(t.config).QueryChecks(t)
}

// QueryProperties queries the "properties" edge of the Team entity.
func (t *Team) QueryProperties() *PropertyQuery {
	return NewTeamClient(t.config).QueryProperties(t)
}

// QueryCompetition queries the "competition" edge of the Team entity.
func (t *Team) QueryCompetition() *CompetitionQuery {
	return NewTeamClient(t.config).QueryCompetition(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("entities: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(t.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("pause=")
	builder.WriteString(fmt.Sprintf("%v", t.Pause))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", t.Hidden))
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", t.Number))
	builder.WriteString(", ")
	builder.WriteString("competition_id=")
	builder.WriteString(t.CompetitionID)
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
