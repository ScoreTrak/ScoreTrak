// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/round"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/service"
)

// Check is the model entity for the Check schema.
type Check struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Pause holds the value of the "pause" field.
	Pause bool `json:"pause,omitempty"`
	// Hidden holds the value of the "hidden" field.
	Hidden bool `json:"hidden,omitempty"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty"`
	// Log holds the value of the "log" field.
	Log string `json:"log,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Passed holds the value of the "passed" field.
	Passed bool `json:"passed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckQuery when eager-loading is set.
	Edges          CheckEdges `json:"edges"`
	round_checks   *string
	service_checks *string
	selectValues   sql.SelectValues
}

// CheckEdges holds the relations/edges for other nodes in the graph.
type CheckEdges struct {
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Rounds holds the value of the rounds edge.
	Rounds *Round `json:"rounds,omitempty"`
	// Services holds the value of the services edge.
	Services *Service `json:"services,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[0] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// RoundsOrErr returns the Rounds value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckEdges) RoundsOrErr() (*Round, error) {
	if e.loadedTypes[1] {
		if e.Rounds == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: round.Label}
		}
		return e.Rounds, nil
	}
	return nil, &NotLoadedError{edge: "rounds"}
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckEdges) ServicesOrErr() (*Service, error) {
	if e.loadedTypes[2] {
		if e.Services == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Check) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case check.FieldPause, check.FieldHidden, check.FieldPassed:
			values[i] = new(sql.NullBool)
		case check.FieldID, check.FieldCompetitionID, check.FieldLog, check.FieldError:
			values[i] = new(sql.NullString)
		case check.ForeignKeys[0]: // round_checks
			values[i] = new(sql.NullString)
		case check.ForeignKeys[1]: // service_checks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Check fields.
func (c *Check) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case check.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case check.FieldPause:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause", values[i])
			} else if value.Valid {
				c.Pause = value.Bool
			}
		case check.FieldHidden:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hidden", values[i])
			} else if value.Valid {
				c.Hidden = value.Bool
			}
		case check.FieldCompetitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				c.CompetitionID = value.String
			}
		case check.FieldLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value.Valid {
				c.Log = value.String
			}
		case check.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				c.Error = value.String
			}
		case check.FieldPassed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field passed", values[i])
			} else if value.Valid {
				c.Passed = value.Bool
			}
		case check.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field round_checks", values[i])
			} else if value.Valid {
				c.round_checks = new(string)
				*c.round_checks = value.String
			}
		case check.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_checks", values[i])
			} else if value.Valid {
				c.service_checks = new(string)
				*c.service_checks = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Check.
// This includes values selected through modifiers, order, etc.
func (c *Check) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCompetition queries the "competition" edge of the Check entity.
func (c *Check) QueryCompetition() *CompetitionQuery {
	return NewCheckClient(c.config).QueryCompetition(c)
}

// QueryRounds queries the "rounds" edge of the Check entity.
func (c *Check) QueryRounds() *RoundQuery {
	return NewCheckClient(c.config).QueryRounds(c)
}

// QueryServices queries the "services" edge of the Check entity.
func (c *Check) QueryServices() *ServiceQuery {
	return NewCheckClient(c.config).QueryServices(c)
}

// Update returns a builder for updating this Check.
// Note that you need to call Check.Unwrap() before calling this method if this Check
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Check) Update() *CheckUpdateOne {
	return NewCheckClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Check entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Check) Unwrap() *Check {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("entities: Check is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Check) String() string {
	var builder strings.Builder
	builder.WriteString("Check(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("pause=")
	builder.WriteString(fmt.Sprintf("%v", c.Pause))
	builder.WriteString(", ")
	builder.WriteString("hidden=")
	builder.WriteString(fmt.Sprintf("%v", c.Hidden))
	builder.WriteString(", ")
	builder.WriteString("competition_id=")
	builder.WriteString(c.CompetitionID)
	builder.WriteString(", ")
	builder.WriteString("log=")
	builder.WriteString(c.Log)
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(c.Error)
	builder.WriteString(", ")
	builder.WriteString("passed=")
	builder.WriteString(fmt.Sprintf("%v", c.Passed))
	builder.WriteByte(')')
	return builder.String()
}

// Checks is a parsable slice of Check.
type Checks []*Check
