// Code generated by ent, DO NOT EDIT.

package check

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the check type in the database.
	Label = "check"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldLog holds the string denoting the log field in the database.
	FieldLog = "log"
	// FieldError holds the string denoting the error field in the database.
	FieldError = "error"
	// FieldOutcomeStatus holds the string denoting the outcome_status field in the database.
	FieldOutcomeStatus = "outcome_status"
	// FieldProgressStatus holds the string denoting the progress_status field in the database.
	FieldProgressStatus = "progress_status"
	// FieldRoundID holds the string denoting the round_id field in the database.
	FieldRoundID = "round_id"
	// FieldHostServiceID holds the string denoting the host_service_id field in the database.
	FieldHostServiceID = "host_service_id"
	// EdgeRound holds the string denoting the round edge name in mutations.
	EdgeRound = "round"
	// EdgeHostservice holds the string denoting the hostservice edge name in mutations.
	EdgeHostservice = "hostservice"
	// Table holds the table name of the check in the database.
	Table = "checks"
	// RoundTable is the table that holds the round relation/edge.
	RoundTable = "checks"
	// RoundInverseTable is the table name for the Round entity.
	// It exists in this package in order to avoid circular dependency with the "round" package.
	RoundInverseTable = "rounds"
	// RoundColumn is the table column denoting the round relation/edge.
	RoundColumn = "round_id"
	// HostserviceTable is the table that holds the hostservice relation/edge.
	HostserviceTable = "checks"
	// HostserviceInverseTable is the table name for the HostService entity.
	// It exists in this package in order to avoid circular dependency with the "hostservice" package.
	HostserviceInverseTable = "host_services"
	// HostserviceColumn is the table column denoting the hostservice relation/edge.
	HostserviceColumn = "host_service_id"
)

// Columns holds all SQL columns for check fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldLog,
	FieldError,
	FieldOutcomeStatus,
	FieldProgressStatus,
	FieldRoundID,
	FieldHostServiceID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OutcomeStatus defines the type for the "outcome_status" enum field.
type OutcomeStatus string

// OutcomeStatus values.
const (
	OutcomeStatusPASSED  OutcomeStatus = "PASSED"
	OutcomeStatusFAILED  OutcomeStatus = "FAILED"
	OutcomeStatusINVALID OutcomeStatus = "INVALID"
)

func (os OutcomeStatus) String() string {
	return string(os)
}

// OutcomeStatusValidator is a validator for the "outcome_status" field enum values. It is called by the builders before save.
func OutcomeStatusValidator(os OutcomeStatus) error {
	switch os {
	case OutcomeStatusPASSED, OutcomeStatusFAILED, OutcomeStatusINVALID:
		return nil
	default:
		return fmt.Errorf("check: invalid enum value for outcome_status field: %q", os)
	}
}

// ProgressStatus defines the type for the "progress_status" enum field.
type ProgressStatus string

// ProgressStatusStarted is the default value of the ProgressStatus enum.
const DefaultProgressStatus = ProgressStatusStarted

// ProgressStatus values.
const (
	ProgressStatusStarted  ProgressStatus = "started"
	ProgressStatusFinished ProgressStatus = "finished"
)

func (ps ProgressStatus) String() string {
	return string(ps)
}

// ProgressStatusValidator is a validator for the "progress_status" field enum values. It is called by the builders before save.
func ProgressStatusValidator(ps ProgressStatus) error {
	switch ps {
	case ProgressStatusStarted, ProgressStatusFinished:
		return nil
	default:
		return fmt.Errorf("check: invalid enum value for progress_status field: %q", ps)
	}
}

// OrderOption defines the ordering options for the Check queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByLog orders the results by the log field.
func ByLog(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLog, opts...).ToFunc()
}

// ByError orders the results by the error field.
func ByError(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldError, opts...).ToFunc()
}

// ByOutcomeStatus orders the results by the outcome_status field.
func ByOutcomeStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutcomeStatus, opts...).ToFunc()
}

// ByProgressStatus orders the results by the progress_status field.
func ByProgressStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgressStatus, opts...).ToFunc()
}

// ByRoundID orders the results by the round_id field.
func ByRoundID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoundID, opts...).ToFunc()
}

// ByHostServiceID orders the results by the host_service_id field.
func ByHostServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostServiceID, opts...).ToFunc()
}

// ByRoundField orders the results by round field.
func ByRoundField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoundStep(), sql.OrderByField(field, opts...))
	}
}

// ByHostserviceField orders the results by hostservice field.
func ByHostserviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostserviceStep(), sql.OrderByField(field, opts...))
	}
}
func newRoundStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoundInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoundTable, RoundColumn),
	)
}
func newHostserviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostserviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HostserviceTable, HostserviceColumn),
	)
}
