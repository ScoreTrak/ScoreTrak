// Code generated by ent, DO NOT EDIT.

package check

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldID, id))
}

// Pause applies equality check predicate on the "pause" field. It's identical to PauseEQ.
func Pause(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldPause, v))
}

// Hidden applies equality check predicate on the "hidden" field. It's identical to HiddenEQ.
func Hidden(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHidden, v))
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldLog, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldError, v))
}

// Passed applies equality check predicate on the "passed" field. It's identical to PassedEQ.
func Passed(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldPassed, v))
}

// RoundID applies equality check predicate on the "round_id" field. It's identical to RoundIDEQ.
func RoundID(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldRoundID, v))
}

// HostServiceID applies equality check predicate on the "host_service_id" field. It's identical to HostServiceIDEQ.
func HostServiceID(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHostServiceID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldTeamID, v))
}

// PauseEQ applies the EQ predicate on the "pause" field.
func PauseEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldPause, v))
}

// PauseNEQ applies the NEQ predicate on the "pause" field.
func PauseNEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldPause, v))
}

// PauseIsNil applies the IsNil predicate on the "pause" field.
func PauseIsNil() predicate.Check {
	return predicate.Check(sql.FieldIsNull(FieldPause))
}

// PauseNotNil applies the NotNil predicate on the "pause" field.
func PauseNotNil() predicate.Check {
	return predicate.Check(sql.FieldNotNull(FieldPause))
}

// HiddenEQ applies the EQ predicate on the "hidden" field.
func HiddenEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHidden, v))
}

// HiddenNEQ applies the NEQ predicate on the "hidden" field.
func HiddenNEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldHidden, v))
}

// HiddenIsNil applies the IsNil predicate on the "hidden" field.
func HiddenIsNil() predicate.Check {
	return predicate.Check(sql.FieldIsNull(FieldHidden))
}

// HiddenNotNil applies the NotNil predicate on the "hidden" field.
func HiddenNotNil() predicate.Check {
	return predicate.Check(sql.FieldNotNull(FieldHidden))
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldLog, v))
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldLog, v))
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldLog, vs...))
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldLog, vs...))
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldLog, v))
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldLog, v))
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldLog, v))
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldLog, v))
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldLog, v))
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldLog, v))
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldLog, v))
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldLog, v))
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldLog, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldError, v))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldError, v))
}

// PassedEQ applies the EQ predicate on the "passed" field.
func PassedEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldPassed, v))
}

// PassedNEQ applies the NEQ predicate on the "passed" field.
func PassedNEQ(v bool) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldPassed, v))
}

// RoundIDEQ applies the EQ predicate on the "round_id" field.
func RoundIDEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldRoundID, v))
}

// RoundIDNEQ applies the NEQ predicate on the "round_id" field.
func RoundIDNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldRoundID, v))
}

// RoundIDIn applies the In predicate on the "round_id" field.
func RoundIDIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldRoundID, vs...))
}

// RoundIDNotIn applies the NotIn predicate on the "round_id" field.
func RoundIDNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldRoundID, vs...))
}

// RoundIDGT applies the GT predicate on the "round_id" field.
func RoundIDGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldRoundID, v))
}

// RoundIDGTE applies the GTE predicate on the "round_id" field.
func RoundIDGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldRoundID, v))
}

// RoundIDLT applies the LT predicate on the "round_id" field.
func RoundIDLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldRoundID, v))
}

// RoundIDLTE applies the LTE predicate on the "round_id" field.
func RoundIDLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldRoundID, v))
}

// RoundIDContains applies the Contains predicate on the "round_id" field.
func RoundIDContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldRoundID, v))
}

// RoundIDHasPrefix applies the HasPrefix predicate on the "round_id" field.
func RoundIDHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldRoundID, v))
}

// RoundIDHasSuffix applies the HasSuffix predicate on the "round_id" field.
func RoundIDHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldRoundID, v))
}

// RoundIDEqualFold applies the EqualFold predicate on the "round_id" field.
func RoundIDEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldRoundID, v))
}

// RoundIDContainsFold applies the ContainsFold predicate on the "round_id" field.
func RoundIDContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldRoundID, v))
}

// HostServiceIDEQ applies the EQ predicate on the "host_service_id" field.
func HostServiceIDEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldHostServiceID, v))
}

// HostServiceIDNEQ applies the NEQ predicate on the "host_service_id" field.
func HostServiceIDNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldHostServiceID, v))
}

// HostServiceIDIn applies the In predicate on the "host_service_id" field.
func HostServiceIDIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldHostServiceID, vs...))
}

// HostServiceIDNotIn applies the NotIn predicate on the "host_service_id" field.
func HostServiceIDNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldHostServiceID, vs...))
}

// HostServiceIDGT applies the GT predicate on the "host_service_id" field.
func HostServiceIDGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldHostServiceID, v))
}

// HostServiceIDGTE applies the GTE predicate on the "host_service_id" field.
func HostServiceIDGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldHostServiceID, v))
}

// HostServiceIDLT applies the LT predicate on the "host_service_id" field.
func HostServiceIDLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldHostServiceID, v))
}

// HostServiceIDLTE applies the LTE predicate on the "host_service_id" field.
func HostServiceIDLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldHostServiceID, v))
}

// HostServiceIDContains applies the Contains predicate on the "host_service_id" field.
func HostServiceIDContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldHostServiceID, v))
}

// HostServiceIDHasPrefix applies the HasPrefix predicate on the "host_service_id" field.
func HostServiceIDHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldHostServiceID, v))
}

// HostServiceIDHasSuffix applies the HasSuffix predicate on the "host_service_id" field.
func HostServiceIDHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldHostServiceID, v))
}

// HostServiceIDEqualFold applies the EqualFold predicate on the "host_service_id" field.
func HostServiceIDEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldHostServiceID, v))
}

// HostServiceIDContainsFold applies the ContainsFold predicate on the "host_service_id" field.
func HostServiceIDContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldHostServiceID, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.Check {
	return predicate.Check(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.Check {
	return predicate.Check(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.Check {
	return predicate.Check(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.Check {
	return predicate.Check(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.Check {
	return predicate.Check(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.Check {
	return predicate.Check(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.Check {
	return predicate.Check(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.Check {
	return predicate.Check(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.Check {
	return predicate.Check(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.Check {
	return predicate.Check(sql.FieldContainsFold(FieldTeamID, v))
}

// HasRounds applies the HasEdge predicate on the "rounds" edge.
func HasRounds() predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoundsTable, RoundsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoundsWith applies the HasEdge predicate on the "rounds" edge with a given conditions (other predicates).
func HasRoundsWith(preds ...predicate.Round) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := newRoundsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHostservice applies the HasEdge predicate on the "hostservice" edge.
func HasHostservice() predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostserviceTable, HostserviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostserviceWith applies the HasEdge predicate on the "hostservice" edge with a given conditions (other predicates).
func HasHostserviceWith(preds ...predicate.HostService) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := newHostserviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Check) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Check) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Check) predicate.Check {
	return predicate.Check(func(s *sql.Selector) {
		p(s.Not())
	})
}
