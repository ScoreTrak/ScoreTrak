// Code generated by ent, DO NOT EDIT.

package round

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldID, id))
}

// CompetitionID applies equality check predicate on the "competition_id" field. It's identical to CompetitionIDEQ.
func CompetitionID(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCompetitionID, v))
}

// RoundNumber applies equality check predicate on the "round_number" field. It's identical to RoundNumberEQ.
func RoundNumber(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundNumber, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldNote, v))
}

// Err applies equality check predicate on the "err" field. It's identical to ErrEQ.
func Err(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldErr, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFinishedAt, v))
}

// CompetitionIDEQ applies the EQ predicate on the "competition_id" field.
func CompetitionIDEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCompetitionID, v))
}

// CompetitionIDNEQ applies the NEQ predicate on the "competition_id" field.
func CompetitionIDNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldCompetitionID, v))
}

// CompetitionIDIn applies the In predicate on the "competition_id" field.
func CompetitionIDIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldCompetitionID, vs...))
}

// CompetitionIDNotIn applies the NotIn predicate on the "competition_id" field.
func CompetitionIDNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldCompetitionID, vs...))
}

// CompetitionIDGT applies the GT predicate on the "competition_id" field.
func CompetitionIDGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldCompetitionID, v))
}

// CompetitionIDGTE applies the GTE predicate on the "competition_id" field.
func CompetitionIDGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldCompetitionID, v))
}

// CompetitionIDLT applies the LT predicate on the "competition_id" field.
func CompetitionIDLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldCompetitionID, v))
}

// CompetitionIDLTE applies the LTE predicate on the "competition_id" field.
func CompetitionIDLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldCompetitionID, v))
}

// CompetitionIDContains applies the Contains predicate on the "competition_id" field.
func CompetitionIDContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldCompetitionID, v))
}

// CompetitionIDHasPrefix applies the HasPrefix predicate on the "competition_id" field.
func CompetitionIDHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldCompetitionID, v))
}

// CompetitionIDHasSuffix applies the HasSuffix predicate on the "competition_id" field.
func CompetitionIDHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldCompetitionID, v))
}

// CompetitionIDEqualFold applies the EqualFold predicate on the "competition_id" field.
func CompetitionIDEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldCompetitionID, v))
}

// CompetitionIDContainsFold applies the ContainsFold predicate on the "competition_id" field.
func CompetitionIDContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldCompetitionID, v))
}

// RoundNumberEQ applies the EQ predicate on the "round_number" field.
func RoundNumberEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundNumber, v))
}

// RoundNumberNEQ applies the NEQ predicate on the "round_number" field.
func RoundNumberNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldRoundNumber, v))
}

// RoundNumberIn applies the In predicate on the "round_number" field.
func RoundNumberIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldRoundNumber, vs...))
}

// RoundNumberNotIn applies the NotIn predicate on the "round_number" field.
func RoundNumberNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldRoundNumber, vs...))
}

// RoundNumberGT applies the GT predicate on the "round_number" field.
func RoundNumberGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldRoundNumber, v))
}

// RoundNumberGTE applies the GTE predicate on the "round_number" field.
func RoundNumberGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldRoundNumber, v))
}

// RoundNumberLT applies the LT predicate on the "round_number" field.
func RoundNumberLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldRoundNumber, v))
}

// RoundNumberLTE applies the LTE predicate on the "round_number" field.
func RoundNumberLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldRoundNumber, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldNote, v))
}

// ErrEQ applies the EQ predicate on the "err" field.
func ErrEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldErr, v))
}

// ErrNEQ applies the NEQ predicate on the "err" field.
func ErrNEQ(v string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldErr, v))
}

// ErrIn applies the In predicate on the "err" field.
func ErrIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldErr, vs...))
}

// ErrNotIn applies the NotIn predicate on the "err" field.
func ErrNotIn(vs ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldErr, vs...))
}

// ErrGT applies the GT predicate on the "err" field.
func ErrGT(v string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldErr, v))
}

// ErrGTE applies the GTE predicate on the "err" field.
func ErrGTE(v string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldErr, v))
}

// ErrLT applies the LT predicate on the "err" field.
func ErrLT(v string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldErr, v))
}

// ErrLTE applies the LTE predicate on the "err" field.
func ErrLTE(v string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldErr, v))
}

// ErrContains applies the Contains predicate on the "err" field.
func ErrContains(v string) predicate.Round {
	return predicate.Round(sql.FieldContains(FieldErr, v))
}

// ErrHasPrefix applies the HasPrefix predicate on the "err" field.
func ErrHasPrefix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasPrefix(FieldErr, v))
}

// ErrHasSuffix applies the HasSuffix predicate on the "err" field.
func ErrHasSuffix(v string) predicate.Round {
	return predicate.Round(sql.FieldHasSuffix(FieldErr, v))
}

// ErrEqualFold applies the EqualFold predicate on the "err" field.
func ErrEqualFold(v string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldErr, v))
}

// ErrContainsFold applies the ContainsFold predicate on the "err" field.
func ErrContainsFold(v string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldErr, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldFinishedAt, v))
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChecks applies the HasEdge predicate on the "checks" edge.
func HasChecks() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChecksTable, ChecksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChecksWith applies the HasEdge predicate on the "checks" edge with a given conditions (other predicates).
func HasChecksWith(preds ...predicate.Check) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := newChecksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		p(s.Not())
	})
}
