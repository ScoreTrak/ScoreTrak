// Code generated by ent, DO NOT EDIT.

package round

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/scoretrak/scoretrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Round {
	return predicate.Round(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Round {
	return predicate.Round(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldUpdateTime, v))
}

// RoundNumber applies equality check predicate on the "round_number" field. It's identical to RoundNumberEQ.
func RoundNumber(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundNumber, v))
}

// NumOfIntendedChecks applies equality check predicate on the "num_of_intended_checks" field. It's identical to NumOfIntendedChecksEQ.
func NumOfIntendedChecks(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldNumOfIntendedChecks, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFinishedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldUpdateTime))
}

// RoundNumberEQ applies the EQ predicate on the "round_number" field.
func RoundNumberEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldRoundNumber, v))
}

// RoundNumberNEQ applies the NEQ predicate on the "round_number" field.
func RoundNumberNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldRoundNumber, v))
}

// RoundNumberIn applies the In predicate on the "round_number" field.
func RoundNumberIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldRoundNumber, vs...))
}

// RoundNumberNotIn applies the NotIn predicate on the "round_number" field.
func RoundNumberNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldRoundNumber, vs...))
}

// RoundNumberGT applies the GT predicate on the "round_number" field.
func RoundNumberGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldRoundNumber, v))
}

// RoundNumberGTE applies the GTE predicate on the "round_number" field.
func RoundNumberGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldRoundNumber, v))
}

// RoundNumberLT applies the LT predicate on the "round_number" field.
func RoundNumberLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldRoundNumber, v))
}

// RoundNumberLTE applies the LTE predicate on the "round_number" field.
func RoundNumberLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldRoundNumber, v))
}

// NumOfIntendedChecksEQ applies the EQ predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksNEQ applies the NEQ predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksNEQ(v int) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksIn applies the In predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldNumOfIntendedChecks, vs...))
}

// NumOfIntendedChecksNotIn applies the NotIn predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksNotIn(vs ...int) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldNumOfIntendedChecks, vs...))
}

// NumOfIntendedChecksGT applies the GT predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksGT(v int) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksGTE applies the GTE predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksGTE(v int) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksLT applies the LT predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksLT(v int) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksLTE applies the LTE predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksLTE(v int) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldNumOfIntendedChecks, v))
}

// NumOfIntendedChecksIsNil applies the IsNil predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldNumOfIntendedChecks))
}

// NumOfIntendedChecksNotNil applies the NotNil predicate on the "num_of_intended_checks" field.
func NumOfIntendedChecksNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldNumOfIntendedChecks))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldStatus, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldStartedAt, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Round {
	return predicate.Round(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Round {
	return predicate.Round(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Round {
	return predicate.Round(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Round {
	return predicate.Round(sql.FieldNotNull(FieldFinishedAt))
}

// HasChecks applies the HasEdge predicate on the "checks" edge.
func HasChecks() predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChecksTable, ChecksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChecksWith applies the HasEdge predicate on the "checks" edge with a given conditions (other predicates).
func HasChecksWith(preds ...predicate.Check) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		step := newChecksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Round) predicate.Round {
	return predicate.Round(func(s *sql.Selector) {
		p(s.Not())
	})
}
