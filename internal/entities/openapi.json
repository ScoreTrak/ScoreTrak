{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/checks": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "List Checks",
        "description": "List Checks.",
        "operationId": "listCheck",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Check list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Check"
        ],
        "summary": "Create a new Check",
        "description": "Creates a new Check and persists it to storage.",
        "operationId": "createCheck",
        "requestBody": {
          "description": "Check to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "log": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "passed": {
                    "type": "boolean"
                  },
                  "round_id": {
                    "type": "string"
                  },
                  "host_service_id": {
                    "type": "string"
                  },
                  "team_id": {
                    "type": "string"
                  },
                  "rounds": {
                    "type": "string"
                  },
                  "hostservice": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "required": [
                  "log",
                  "error",
                  "passed",
                  "round_id",
                  "host_service_id",
                  "team_id",
                  "rounds",
                  "hostservice",
                  "team"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Check created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/checks/{id}": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Find a Check by ID",
        "description": "Finds the Check with the requested ID and returns it.",
        "operationId": "readCheck",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Check with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Check"
        ],
        "summary": "Deletes a Check by ID",
        "description": "Deletes the Check with the requested ID.",
        "operationId": "deleteCheck",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Check with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Check"
        ],
        "summary": "Updates a Check",
        "description": "Updates a Check and persists changes to storage.",
        "operationId": "updateCheck",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Check properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "log": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "passed": {
                    "type": "boolean"
                  },
                  "rounds": {
                    "type": "string"
                  },
                  "hostservice": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Check updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/checks/{id}/hostservice": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Find the attached HostService",
        "description": "Find the attached HostService of the Check with the given ID",
        "operationId": "readCheckHostservice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HostService attached to Check with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check_HostserviceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/checks/{id}/rounds": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Find the attached Round",
        "description": "Find the attached Round of the Check with the given ID",
        "operationId": "readCheckRounds",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Round attached to Check with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check_RoundsRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/checks/{id}/team": {
      "get": {
        "tags": [
          "Check"
        ],
        "summary": "Find the attached Team",
        "description": "Find the attached Team of the Check with the given ID",
        "operationId": "readCheckTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team attached to Check with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Check_TeamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "List Competitions",
        "description": "List Competitions.",
        "operationId": "listCompetition",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Competition list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompetitionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Competition"
        ],
        "summary": "Create a new Competition",
        "description": "Creates a new Competition and persists it to storage.",
        "operationId": "createCompetition",
        "requestBody": {
          "description": "Competition to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hidden": {
                    "type": "boolean"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "viewable_to_public": {
                    "type": "boolean"
                  },
                  "to_be_started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "finished_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "teams": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reports": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "rounds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Competition created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions/{id}": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "Find a Competition by ID",
        "description": "Finds the Competition with the requested ID and returns it.",
        "operationId": "readCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Competition with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Competition"
        ],
        "summary": "Deletes a Competition by ID",
        "description": "Deletes the Competition with the requested ID.",
        "operationId": "deleteCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Competition with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Competition"
        ],
        "summary": "Updates a Competition",
        "description": "Updates a Competition and persists changes to storage.",
        "operationId": "updateCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Competition properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hidden": {
                    "type": "boolean"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "viewable_to_public": {
                    "type": "boolean"
                  },
                  "to_be_started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "finished_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "teams": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reports": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "rounds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Competition updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions/{id}/reports": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "List attached Reports",
        "description": "List attached Reports.",
        "operationId": "listCompetitionReports",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Competitions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Competition_ReportsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions/{id}/rounds": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "List attached Rounds",
        "description": "List attached Rounds.",
        "operationId": "listCompetitionRounds",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Competitions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Competition_RoundsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions/{id}/services": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "List attached Services",
        "description": "List attached Services.",
        "operationId": "listCompetitionServices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Competitions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Competition_ServicesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/competitions/{id}/teams": {
      "get": {
        "tags": [
          "Competition"
        ],
        "summary": "List attached Teams",
        "description": "List attached Teams.",
        "operationId": "listCompetitionTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Competition",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Competitions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Competition_TeamsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "List HostServices",
        "description": "List HostServices.",
        "operationId": "listHostService",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result HostService list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostServiceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "HostService"
        ],
        "summary": "Create a new HostService",
        "description": "Creates a new HostService and persists it to storage.",
        "operationId": "createHostService",
        "requestBody": {
          "description": "HostService to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "point_boost": {
                    "type": "integer"
                  },
                  "round_units": {
                    "type": "integer"
                  },
                  "round_delay": {
                    "type": "integer"
                  },
                  "service_id": {
                    "type": "string"
                  },
                  "host_id": {
                    "type": "string"
                  },
                  "team_id": {
                    "type": "string"
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "weight",
                  "point_boost",
                  "round_units",
                  "round_delay",
                  "service_id",
                  "host_id",
                  "team_id",
                  "service",
                  "host",
                  "team"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HostService created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostServiceCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "Find a HostService by ID",
        "description": "Finds the HostService with the requested ID and returns it.",
        "operationId": "readHostService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HostService with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostServiceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "HostService"
        ],
        "summary": "Deletes a HostService by ID",
        "description": "Deletes the HostService with the requested ID.",
        "operationId": "deleteHostService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "HostService with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "HostService"
        ],
        "summary": "Updates a HostService",
        "description": "Updates a HostService and persists changes to storage.",
        "operationId": "updateHostService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "HostService properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "point_boost": {
                    "type": "integer"
                  },
                  "round_units": {
                    "type": "integer"
                  },
                  "round_delay": {
                    "type": "integer"
                  },
                  "service_id": {
                    "type": "string"
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service": {
                    "type": "string"
                  },
                  "host": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HostService updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostServiceUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}/checks": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "List attached Checks",
        "description": "List attached Checks.",
        "operationId": "listHostServiceChecks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result HostServices list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostService_ChecksList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}/host": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "Find the attached Host",
        "description": "Find the attached Host of the HostService with the given ID",
        "operationId": "readHostServiceHost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Host attached to HostService with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostService_HostRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}/properties": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "List attached Properties",
        "description": "List attached Properties.",
        "operationId": "listHostServiceProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result HostServices list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostService_PropertiesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}/service": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "Find the attached Service",
        "description": "Find the attached Service of the HostService with the given ID",
        "operationId": "readHostServiceService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service attached to HostService with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostService_ServiceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/host-services/{id}/team": {
      "get": {
        "tags": [
          "HostService"
        ],
        "summary": "Find the attached Team",
        "description": "Find the attached Team of the HostService with the given ID",
        "operationId": "readHostServiceTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HostService",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team attached to HostService with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostService_TeamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hosts": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "List Hosts",
        "description": "List Hosts.",
        "operationId": "listHost",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Host list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HostList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Host"
        ],
        "summary": "Create a new Host",
        "description": "Creates a new Host and persists it to storage.",
        "operationId": "createHost",
        "requestBody": {
          "description": "Host to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "string"
                  },
                  "team_id": {
                    "type": "string"
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "required": [
                  "address",
                  "team_id",
                  "team"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Host created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hosts/{id}": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "Find a Host by ID",
        "description": "Finds the Host with the requested ID and returns it.",
        "operationId": "readHost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Host",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Host with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Host"
        ],
        "summary": "Deletes a Host by ID",
        "description": "Deletes the Host with the requested ID.",
        "operationId": "deleteHost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Host",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Host with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Host"
        ],
        "summary": "Updates a Host",
        "description": "Updates a Host and persists changes to storage.",
        "operationId": "updateHost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Host",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Host properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "address": {
                    "type": "string"
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "team": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Host updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hosts/{id}/hostservices": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "List attached Hostservices",
        "description": "List attached Hostservices.",
        "operationId": "listHostHostservices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Host",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hosts list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Host_HostservicesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hosts/{id}/team": {
      "get": {
        "tags": [
          "Host"
        ],
        "summary": "Find the attached Team",
        "description": "Find the attached Team of the Host with the given ID",
        "operationId": "readHostTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Host",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team attached to Host with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host_TeamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/properties": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "List Properties",
        "description": "List Properties.",
        "operationId": "listProperty",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Property list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Property"
        ],
        "summary": "Create a new Property",
        "description": "Creates a new Property and persists it to storage.",
        "operationId": "createProperty",
        "requestBody": {
          "description": "Property to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "view",
                      "edit",
                      "hide"
                    ],
                    "default": "view"
                  },
                  "host_service_id": {
                    "type": "string"
                  },
                  "team_id": {
                    "type": "string"
                  },
                  "hostservice": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "value",
                  "status",
                  "host_service_id",
                  "team_id",
                  "hostservice",
                  "team"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Property created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/properties/{id}": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Find a Property by ID",
        "description": "Finds the Property with the requested ID and returns it.",
        "operationId": "readProperty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Property with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Property"
        ],
        "summary": "Deletes a Property by ID",
        "description": "Deletes the Property with the requested ID.",
        "operationId": "deleteProperty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Property with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Property"
        ],
        "summary": "Updates a Property",
        "description": "Updates a Property and persists changes to storage.",
        "operationId": "updateProperty",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Property properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "view",
                      "edit",
                      "hide"
                    ],
                    "default": "view"
                  },
                  "host_service_id": {
                    "type": "string"
                  },
                  "hostservice": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Property updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/properties/{id}/hostservice": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Find the attached HostService",
        "description": "Find the attached HostService of the Property with the given ID",
        "operationId": "readPropertyHostservice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HostService attached to Property with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property_HostserviceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/properties/{id}/team": {
      "get": {
        "tags": [
          "Property"
        ],
        "summary": "Find the attached Team",
        "description": "Find the attached Team of the Property with the given ID",
        "operationId": "readPropertyTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team attached to Property with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Property_TeamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "List Reports",
        "description": "List Reports.",
        "operationId": "listReport",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Report list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Create a new Report",
        "description": "Creates a new Report and persists it to storage.",
        "operationId": "createReport",
        "requestBody": {
          "description": "Report to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "competition_id": {
                    "type": "string"
                  },
                  "competition": {
                    "type": "string"
                  }
                },
                "required": [
                  "log",
                  "error",
                  "competition_id",
                  "competition"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Report created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reports/{id}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Find a Report by ID",
        "description": "Finds the Report with the requested ID and returns it.",
        "operationId": "readReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Report",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Deletes a Report by ID",
        "description": "Deletes the Report with the requested ID.",
        "operationId": "deleteReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Report",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Report with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Report"
        ],
        "summary": "Updates a Report",
        "description": "Updates a Report and persists changes to storage.",
        "operationId": "updateReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Report",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Report properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "log": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  },
                  "competition": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Report updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/reports/{id}/competition": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Find the attached Competition",
        "description": "Find the attached Competition of the Report with the given ID",
        "operationId": "readReportCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Report",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Competition attached to Report with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report_CompetitionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rounds": {
      "get": {
        "tags": [
          "Round"
        ],
        "summary": "List Rounds",
        "description": "List Rounds.",
        "operationId": "listRound",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Round list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoundList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Round"
        ],
        "summary": "Create a new Round",
        "description": "Creates a new Round and persists it to storage.",
        "operationId": "createRound",
        "requestBody": {
          "description": "Round to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "round_number": {
                    "type": "integer"
                  },
                  "note": {
                    "type": "string"
                  },
                  "err": {
                    "type": "string"
                  },
                  "started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "finished_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "competition_id": {
                    "type": "string"
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                },
                "required": [
                  "round_number",
                  "note",
                  "err",
                  "started_at",
                  "finished_at",
                  "competition_id",
                  "competition"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Round created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoundCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rounds/{id}": {
      "get": {
        "tags": [
          "Round"
        ],
        "summary": "Find a Round by ID",
        "description": "Finds the Round with the requested ID and returns it.",
        "operationId": "readRound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Round",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Round with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoundRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Round"
        ],
        "summary": "Deletes a Round by ID",
        "description": "Deletes the Round with the requested ID.",
        "operationId": "deleteRound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Round",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Round with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Round"
        ],
        "summary": "Updates a Round",
        "description": "Updates a Round and persists changes to storage.",
        "operationId": "updateRound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Round",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Round properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "round_number": {
                    "type": "integer"
                  },
                  "note": {
                    "type": "string"
                  },
                  "err": {
                    "type": "string"
                  },
                  "started_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "finished_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Round updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoundUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rounds/{id}/checks": {
      "get": {
        "tags": [
          "Round"
        ],
        "summary": "List attached Checks",
        "description": "List attached Checks.",
        "operationId": "listRoundChecks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Round",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Rounds list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Round_ChecksList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rounds/{id}/competition": {
      "get": {
        "tags": [
          "Round"
        ],
        "summary": "Find the attached Competition",
        "description": "Find the attached Competition of the Round with the given ID",
        "operationId": "readRoundCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Round",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Competition attached to Round with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Round_CompetitionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List Services",
        "description": "List Services.",
        "operationId": "listService",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Service list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Create a new Service",
        "description": "Creates a new Service and persists it to storage.",
        "operationId": "createService",
        "requestBody": {
          "description": "Service to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ftp",
                      "ssh",
                      "winrm",
                      "ping",
                      "http",
                      "ldap",
                      "dns",
                      "smb",
                      "imap",
                      "sql",
                      "caldav"
                    ]
                  },
                  "competition_id": {
                    "type": "string"
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "type",
                  "competition_id",
                  "competition"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find a Service by ID",
        "description": "Finds the Service with the requested ID and returns it.",
        "operationId": "readService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "Deletes a Service by ID",
        "description": "Deletes the Service with the requested ID.",
        "operationId": "deleteService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Service"
        ],
        "summary": "Updates a Service",
        "description": "Updates a Service and persists changes to storage.",
        "operationId": "updateService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Service properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "ftp",
                      "ssh",
                      "winrm",
                      "ping",
                      "http",
                      "ldap",
                      "dns",
                      "smb",
                      "imap",
                      "sql",
                      "caldav"
                    ]
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Service updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/services/{id}/competition": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Find the attached Competition",
        "description": "Find the attached Competition of the Service with the given ID",
        "operationId": "readServiceCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Competition attached to Service with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service_CompetitionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/services/{id}/hostservices": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "List attached Hostservices",
        "description": "List attached Hostservices.",
        "operationId": "listServiceHostservices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Services list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service_HostservicesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "List Teams",
        "description": "List Teams.",
        "operationId": "listTeam",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Team list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Create a new Team",
        "description": "Creates a new Team and persists it to storage.",
        "operationId": "createTeam",
        "requestBody": {
          "description": "Team to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "number": {
                    "type": "integer"
                  },
                  "competition_id": {
                    "type": "string"
                  },
                  "hosts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "number",
                  "competition_id",
                  "competition"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Team created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Find a Team by ID",
        "description": "Finds the Team with the requested ID and returns it.",
        "operationId": "readTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Deletes a Team by ID",
        "description": "Deletes the Team with the requested ID.",
        "operationId": "deleteTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Team"
        ],
        "summary": "Updates a Team",
        "description": "Updates a Team and persists changes to storage.",
        "operationId": "updateTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Team properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "pause": {
                    "type": "boolean"
                  },
                  "hidden": {
                    "type": "boolean"
                  },
                  "number": {
                    "type": "integer"
                  },
                  "hosts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hostservices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "checks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "properties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "competition": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Team updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}/checks": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "List attached Checks",
        "description": "List attached Checks.",
        "operationId": "listTeamChecks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Teams list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team_ChecksList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}/competition": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Find the attached Competition",
        "description": "Find the attached Competition of the Team with the given ID",
        "operationId": "readTeamCompetition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Competition attached to Team with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team_CompetitionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}/hosts": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "List attached Hosts",
        "description": "List attached Hosts.",
        "operationId": "listTeamHosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Teams list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team_HostsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}/hostservices": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "List attached Hostservices",
        "description": "List attached Hostservices.",
        "operationId": "listTeamHostservices",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Teams list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team_HostservicesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/teams/{id}/properties": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "List attached Properties",
        "description": "List attached Properties.",
        "operationId": "listTeamProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Team",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Teams list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team_PropertiesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Check": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "rounds": {
            "$ref": "#/components/schemas/Round"
          },
          "hostservice": {
            "$ref": "#/components/schemas/HostService"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id",
          "rounds",
          "hostservice",
          "team"
        ]
      },
      "CheckCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "CheckList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "CheckRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "CheckUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "Check_HostserviceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "Check_RoundsRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "Check_TeamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "Competition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Report"
            }
          },
          "rounds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Round"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "CompetitionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "CompetitionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "CompetitionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "CompetitionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "Competition_ReportsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id"
        ]
      },
      "Competition_RoundsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "Competition_ServicesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "Competition_TeamsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "Host": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "hostservices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostService"
            }
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          }
        },
        "required": [
          "id",
          "address",
          "team_id",
          "team"
        ]
      },
      "HostCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "HostList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "HostRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "HostService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Check"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "service": {
            "$ref": "#/components/schemas/Service"
          },
          "host": {
            "$ref": "#/components/schemas/Host"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id",
          "service",
          "host",
          "team"
        ]
      },
      "HostServiceCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "HostServiceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "HostServiceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "HostServiceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "HostService_ChecksList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "HostService_HostRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "HostService_PropertiesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      },
      "HostService_ServiceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "HostService_TeamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "HostUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "Host_HostservicesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "Host_TeamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "Property": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "hostservice": {
            "$ref": "#/components/schemas/HostService"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id",
          "hostservice",
          "team"
        ]
      },
      "PropertyCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      },
      "PropertyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      },
      "PropertyRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      },
      "PropertyUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      },
      "Property_HostserviceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "Property_TeamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          },
          "competition": {
            "$ref": "#/components/schemas/Competition"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id",
          "competition"
        ]
      },
      "ReportCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id"
        ]
      },
      "ReportList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id"
        ]
      },
      "ReportRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id"
        ]
      },
      "ReportUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "competition_id"
        ]
      },
      "Report_CompetitionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "Round": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          },
          "checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Check"
            }
          },
          "competition": {
            "$ref": "#/components/schemas/Competition"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id",
          "competition"
        ]
      },
      "RoundCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "RoundList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "RoundRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "RoundUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "round_number": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "err": {
            "type": "string"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "round_number",
          "note",
          "err",
          "started_at",
          "finished_at",
          "competition_id"
        ]
      },
      "Round_ChecksList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "Round_CompetitionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          },
          "hostservices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostService"
            }
          },
          "competition": {
            "$ref": "#/components/schemas/Competition"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id",
          "competition"
        ]
      },
      "ServiceCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "ServiceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "ServiceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "ServiceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "ftp",
              "ssh",
              "winrm",
              "ping",
              "http",
              "ldap",
              "dns",
              "smb",
              "imap",
              "sql",
              "caldav"
            ]
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "type",
          "competition_id"
        ]
      },
      "Service_CompetitionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "Service_HostservicesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          },
          "hosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Host"
            }
          },
          "hostservices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HostService"
            }
          },
          "checks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Check"
            }
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "competition": {
            "$ref": "#/components/schemas/Competition"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id",
          "competition"
        ]
      },
      "TeamCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "TeamList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "TeamRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "TeamUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "number": {
            "type": "integer"
          },
          "competition_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "number",
          "competition_id"
        ]
      },
      "Team_ChecksList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "log": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "passed": {
            "type": "boolean"
          },
          "round_id": {
            "type": "string"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "log",
          "error",
          "passed",
          "round_id",
          "host_service_id",
          "team_id"
        ]
      },
      "Team_CompetitionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "pause": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "viewable_to_public": {
            "type": "boolean"
          },
          "to_be_started_at": {
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "display_name"
        ]
      },
      "Team_HostsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "address",
          "team_id"
        ]
      },
      "Team_HostservicesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "pause": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "weight": {
            "type": "integer"
          },
          "point_boost": {
            "type": "integer"
          },
          "round_units": {
            "type": "integer"
          },
          "round_delay": {
            "type": "integer"
          },
          "service_id": {
            "type": "string"
          },
          "host_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "weight",
          "point_boost",
          "round_units",
          "round_delay",
          "service_id",
          "host_id",
          "team_id"
        ]
      },
      "Team_PropertiesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "view",
              "edit",
              "hide"
            ],
            "default": "view"
          },
          "host_service_id": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key",
          "value",
          "status",
          "host_service_id",
          "team_id"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}