// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/property"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// HostServiceQuery is the builder for querying HostService entities.
type HostServiceQuery struct {
	config
	ctx            *QueryContext
	order          []hostservice.Order
	inters         []Interceptor
	predicates     []predicate.HostService
	withHost       *HostQuery
	withChecks     *CheckQuery
	withProperties *PropertyQuery
	withTeam       *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HostServiceQuery builder.
func (hsq *HostServiceQuery) Where(ps ...predicate.HostService) *HostServiceQuery {
	hsq.predicates = append(hsq.predicates, ps...)
	return hsq
}

// Limit the number of records to be returned by this query.
func (hsq *HostServiceQuery) Limit(limit int) *HostServiceQuery {
	hsq.ctx.Limit = &limit
	return hsq
}

// Offset to start from.
func (hsq *HostServiceQuery) Offset(offset int) *HostServiceQuery {
	hsq.ctx.Offset = &offset
	return hsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hsq *HostServiceQuery) Unique(unique bool) *HostServiceQuery {
	hsq.ctx.Unique = &unique
	return hsq
}

// Order specifies how the records should be ordered.
func (hsq *HostServiceQuery) Order(o ...hostservice.Order) *HostServiceQuery {
	hsq.order = append(hsq.order, o...)
	return hsq
}

// QueryHost chains the current query on the "host" edge.
func (hsq *HostServiceQuery) QueryHost() *HostQuery {
	query := (&HostClient{config: hsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, selector),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservice.HostTable, hostservice.HostColumn),
		)
		fromU = sqlgraph.SetNeighbors(hsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChecks chains the current query on the "checks" edge.
func (hsq *HostServiceQuery) QueryChecks() *CheckQuery {
	query := (&CheckClient{config: hsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, selector),
			sqlgraph.To(check.Table, check.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hostservice.ChecksTable, hostservice.ChecksColumn),
		)
		fromU = sqlgraph.SetNeighbors(hsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProperties chains the current query on the "properties" edge.
func (hsq *HostServiceQuery) QueryProperties() *PropertyQuery {
	query := (&PropertyClient{config: hsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, selector),
			sqlgraph.To(property.Table, property.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hostservice.PropertiesTable, hostservice.PropertiesColumn),
		)
		fromU = sqlgraph.SetNeighbors(hsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (hsq *HostServiceQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: hsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := hsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := hsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostservice.Table, hostservice.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostservice.TeamTable, hostservice.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(hsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HostService entity from the query.
// Returns a *NotFoundError when no HostService was found.
func (hsq *HostServiceQuery) First(ctx context.Context) (*HostService, error) {
	nodes, err := hsq.Limit(1).All(setContextOp(ctx, hsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hostservice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hsq *HostServiceQuery) FirstX(ctx context.Context) *HostService {
	node, err := hsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HostService ID from the query.
// Returns a *NotFoundError when no HostService ID was found.
func (hsq *HostServiceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hsq.Limit(1).IDs(setContextOp(ctx, hsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hostservice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hsq *HostServiceQuery) FirstIDX(ctx context.Context) string {
	id, err := hsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HostService entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HostService entity is found.
// Returns a *NotFoundError when no HostService entities are found.
func (hsq *HostServiceQuery) Only(ctx context.Context) (*HostService, error) {
	nodes, err := hsq.Limit(2).All(setContextOp(ctx, hsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hostservice.Label}
	default:
		return nil, &NotSingularError{hostservice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hsq *HostServiceQuery) OnlyX(ctx context.Context) *HostService {
	node, err := hsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HostService ID in the query.
// Returns a *NotSingularError when more than one HostService ID is found.
// Returns a *NotFoundError when no entities are found.
func (hsq *HostServiceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = hsq.Limit(2).IDs(setContextOp(ctx, hsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hostservice.Label}
	default:
		err = &NotSingularError{hostservice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hsq *HostServiceQuery) OnlyIDX(ctx context.Context) string {
	id, err := hsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HostServices.
func (hsq *HostServiceQuery) All(ctx context.Context) ([]*HostService, error) {
	ctx = setContextOp(ctx, hsq.ctx, "All")
	if err := hsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HostService, *HostServiceQuery]()
	return withInterceptors[[]*HostService](ctx, hsq, qr, hsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hsq *HostServiceQuery) AllX(ctx context.Context) []*HostService {
	nodes, err := hsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HostService IDs.
func (hsq *HostServiceQuery) IDs(ctx context.Context) (ids []string, err error) {
	if hsq.ctx.Unique == nil && hsq.path != nil {
		hsq.Unique(true)
	}
	ctx = setContextOp(ctx, hsq.ctx, "IDs")
	if err = hsq.Select(hostservice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hsq *HostServiceQuery) IDsX(ctx context.Context) []string {
	ids, err := hsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hsq *HostServiceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hsq.ctx, "Count")
	if err := hsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hsq, querierCount[*HostServiceQuery](), hsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hsq *HostServiceQuery) CountX(ctx context.Context) int {
	count, err := hsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hsq *HostServiceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hsq.ctx, "Exist")
	switch _, err := hsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entities: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hsq *HostServiceQuery) ExistX(ctx context.Context) bool {
	exist, err := hsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HostServiceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hsq *HostServiceQuery) Clone() *HostServiceQuery {
	if hsq == nil {
		return nil
	}
	return &HostServiceQuery{
		config:         hsq.config,
		ctx:            hsq.ctx.Clone(),
		order:          append([]hostservice.Order{}, hsq.order...),
		inters:         append([]Interceptor{}, hsq.inters...),
		predicates:     append([]predicate.HostService{}, hsq.predicates...),
		withHost:       hsq.withHost.Clone(),
		withChecks:     hsq.withChecks.Clone(),
		withProperties: hsq.withProperties.Clone(),
		withTeam:       hsq.withTeam.Clone(),
		// clone intermediate query.
		sql:  hsq.sql.Clone(),
		path: hsq.path,
	}
}

// WithHost tells the query-builder to eager-load the nodes that are connected to
// the "host" edge. The optional arguments are used to configure the query builder of the edge.
func (hsq *HostServiceQuery) WithHost(opts ...func(*HostQuery)) *HostServiceQuery {
	query := (&HostClient{config: hsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsq.withHost = query
	return hsq
}

// WithChecks tells the query-builder to eager-load the nodes that are connected to
// the "checks" edge. The optional arguments are used to configure the query builder of the edge.
func (hsq *HostServiceQuery) WithChecks(opts ...func(*CheckQuery)) *HostServiceQuery {
	query := (&CheckClient{config: hsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsq.withChecks = query
	return hsq
}

// WithProperties tells the query-builder to eager-load the nodes that are connected to
// the "properties" edge. The optional arguments are used to configure the query builder of the edge.
func (hsq *HostServiceQuery) WithProperties(opts ...func(*PropertyQuery)) *HostServiceQuery {
	query := (&PropertyClient{config: hsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsq.withProperties = query
	return hsq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (hsq *HostServiceQuery) WithTeam(opts ...func(*TeamQuery)) *HostServiceQuery {
	query := (&TeamClient{config: hsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	hsq.withTeam = query
	return hsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HostService.Query().
//		GroupBy(hostservice.FieldName).
//		Aggregate(entities.Count()).
//		Scan(ctx, &v)
func (hsq *HostServiceQuery) GroupBy(field string, fields ...string) *HostServiceGroupBy {
	hsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HostServiceGroupBy{build: hsq}
	grbuild.flds = &hsq.ctx.Fields
	grbuild.label = hostservice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.HostService.Query().
//		Select(hostservice.FieldName).
//		Scan(ctx, &v)
func (hsq *HostServiceQuery) Select(fields ...string) *HostServiceSelect {
	hsq.ctx.Fields = append(hsq.ctx.Fields, fields...)
	sbuild := &HostServiceSelect{HostServiceQuery: hsq}
	sbuild.label = hostservice.Label
	sbuild.flds, sbuild.scan = &hsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HostServiceSelect configured with the given aggregations.
func (hsq *HostServiceQuery) Aggregate(fns ...AggregateFunc) *HostServiceSelect {
	return hsq.Select().Aggregate(fns...)
}

func (hsq *HostServiceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hsq.inters {
		if inter == nil {
			return fmt.Errorf("entities: uninitialized interceptor (forgotten import entities/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hsq); err != nil {
				return err
			}
		}
	}
	for _, f := range hsq.ctx.Fields {
		if !hostservice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
		}
	}
	if hsq.path != nil {
		prev, err := hsq.path(ctx)
		if err != nil {
			return err
		}
		hsq.sql = prev
	}
	return nil
}

func (hsq *HostServiceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HostService, error) {
	var (
		nodes       = []*HostService{}
		_spec       = hsq.querySpec()
		loadedTypes = [4]bool{
			hsq.withHost != nil,
			hsq.withChecks != nil,
			hsq.withProperties != nil,
			hsq.withTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HostService).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HostService{config: hsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := hsq.withHost; query != nil {
		if err := hsq.loadHost(ctx, query, nodes, nil,
			func(n *HostService, e *Host) { n.Edges.Host = e }); err != nil {
			return nil, err
		}
	}
	if query := hsq.withChecks; query != nil {
		if err := hsq.loadChecks(ctx, query, nodes,
			func(n *HostService) { n.Edges.Checks = []*Check{} },
			func(n *HostService, e *Check) { n.Edges.Checks = append(n.Edges.Checks, e) }); err != nil {
			return nil, err
		}
	}
	if query := hsq.withProperties; query != nil {
		if err := hsq.loadProperties(ctx, query, nodes,
			func(n *HostService) { n.Edges.Properties = []*Property{} },
			func(n *HostService, e *Property) { n.Edges.Properties = append(n.Edges.Properties, e) }); err != nil {
			return nil, err
		}
	}
	if query := hsq.withTeam; query != nil {
		if err := hsq.loadTeam(ctx, query, nodes, nil,
			func(n *HostService, e *Team) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (hsq *HostServiceQuery) loadHost(ctx context.Context, query *HostQuery, nodes []*HostService, init func(*HostService), assign func(*HostService, *Host)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HostService)
	for i := range nodes {
		fk := nodes[i].HostID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(host.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (hsq *HostServiceQuery) loadChecks(ctx context.Context, query *CheckQuery, nodes []*HostService, init func(*HostService), assign func(*HostService, *Check)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HostService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Check(func(s *sql.Selector) {
		s.Where(sql.InValues(hostservice.ChecksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HostServiceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_service_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hsq *HostServiceQuery) loadProperties(ctx context.Context, query *PropertyQuery, nodes []*HostService, init func(*HostService), assign func(*HostService, *Property)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*HostService)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Property(func(s *sql.Selector) {
		s.Where(sql.InValues(hostservice.PropertiesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.HostServiceID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_service_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (hsq *HostServiceQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*HostService, init func(*HostService), assign func(*HostService, *Team)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*HostService)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(team.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (hsq *HostServiceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hsq.querySpec()
	_spec.Node.Columns = hsq.ctx.Fields
	if len(hsq.ctx.Fields) > 0 {
		_spec.Unique = hsq.ctx.Unique != nil && *hsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hsq.driver, _spec)
}

func (hsq *HostServiceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hostservice.Table, hostservice.Columns, sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString))
	_spec.From = hsq.sql
	if unique := hsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hsq.path != nil {
		_spec.Unique = true
	}
	if fields := hsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostservice.FieldID)
		for i := range fields {
			if fields[i] != hostservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if hsq.withHost != nil {
			_spec.Node.AddColumnOnce(hostservice.FieldHostID)
		}
		if hsq.withTeam != nil {
			_spec.Node.AddColumnOnce(hostservice.FieldTeamID)
		}
	}
	if ps := hsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hsq *HostServiceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hsq.driver.Dialect())
	t1 := builder.Table(hostservice.Table)
	columns := hsq.ctx.Fields
	if len(columns) == 0 {
		columns = hostservice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hsq.sql != nil {
		selector = hsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hsq.ctx.Unique != nil && *hsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hsq.predicates {
		p(selector)
	}
	for _, p := range hsq.order {
		p(selector)
	}
	if offset := hsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HostServiceGroupBy is the group-by builder for HostService entities.
type HostServiceGroupBy struct {
	selector
	build *HostServiceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hsgb *HostServiceGroupBy) Aggregate(fns ...AggregateFunc) *HostServiceGroupBy {
	hsgb.fns = append(hsgb.fns, fns...)
	return hsgb
}

// Scan applies the selector query and scans the result into the given value.
func (hsgb *HostServiceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hsgb.build.ctx, "GroupBy")
	if err := hsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostServiceQuery, *HostServiceGroupBy](ctx, hsgb.build, hsgb, hsgb.build.inters, v)
}

func (hsgb *HostServiceGroupBy) sqlScan(ctx context.Context, root *HostServiceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hsgb.fns))
	for _, fn := range hsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hsgb.flds)+len(hsgb.fns))
		for _, f := range *hsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HostServiceSelect is the builder for selecting fields of HostService entities.
type HostServiceSelect struct {
	*HostServiceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hss *HostServiceSelect) Aggregate(fns ...AggregateFunc) *HostServiceSelect {
	hss.fns = append(hss.fns, fns...)
	return hss
}

// Scan applies the selector query and scans the result into the given value.
func (hss *HostServiceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hss.ctx, "Select")
	if err := hss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostServiceQuery, *HostServiceSelect](ctx, hss.HostServiceQuery, hss, hss.inters, v)
}

func (hss *HostServiceSelect) sqlScan(ctx context.Context, root *HostServiceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hss.fns))
	for _, fn := range hss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
