// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/property"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetDisplayName sets the "display_name" field.
func (tu *TeamUpdate) SetDisplayName(s string) *TeamUpdate {
	tu.mutation.SetDisplayName(s)
	return tu
}

// SetPause sets the "pause" field.
func (tu *TeamUpdate) SetPause(b bool) *TeamUpdate {
	tu.mutation.SetPause(b)
	return tu
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (tu *TeamUpdate) SetNillablePause(b *bool) *TeamUpdate {
	if b != nil {
		tu.SetPause(*b)
	}
	return tu
}

// ClearPause clears the value of the "pause" field.
func (tu *TeamUpdate) ClearPause() *TeamUpdate {
	tu.mutation.ClearPause()
	return tu
}

// SetHidden sets the "hidden" field.
func (tu *TeamUpdate) SetHidden(b bool) *TeamUpdate {
	tu.mutation.SetHidden(b)
	return tu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableHidden(b *bool) *TeamUpdate {
	if b != nil {
		tu.SetHidden(*b)
	}
	return tu
}

// ClearHidden clears the value of the "hidden" field.
func (tu *TeamUpdate) ClearHidden() *TeamUpdate {
	tu.mutation.ClearHidden()
	return tu
}

// SetNumber sets the "number" field.
func (tu *TeamUpdate) SetNumber(i int) *TeamUpdate {
	tu.mutation.ResetNumber()
	tu.mutation.SetNumber(i)
	return tu
}

// AddNumber adds i to the "number" field.
func (tu *TeamUpdate) AddNumber(i int) *TeamUpdate {
	tu.mutation.AddNumber(i)
	return tu
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (tu *TeamUpdate) AddHostIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddHostIDs(ids...)
	return tu
}

// AddHosts adds the "hosts" edges to the Host entity.
func (tu *TeamUpdate) AddHosts(h ...*Host) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.AddHostIDs(ids...)
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (tu *TeamUpdate) AddHostserviceIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddHostserviceIDs(ids...)
	return tu
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (tu *TeamUpdate) AddHostservices(h ...*HostService) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.AddHostserviceIDs(ids...)
}

// AddCheckIDs adds the "checks" edge to the Check entity by IDs.
func (tu *TeamUpdate) AddCheckIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddCheckIDs(ids...)
	return tu
}

// AddChecks adds the "checks" edges to the Check entity.
func (tu *TeamUpdate) AddChecks(c ...*Check) *TeamUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCheckIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (tu *TeamUpdate) AddPropertyIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddPropertyIDs(ids...)
	return tu
}

// AddProperties adds the "properties" edges to the Property entity.
func (tu *TeamUpdate) AddProperties(p ...*Property) *TeamUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPropertyIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (tu *TeamUpdate) ClearHosts() *TeamUpdate {
	tu.mutation.ClearHosts()
	return tu
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (tu *TeamUpdate) RemoveHostIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemoveHostIDs(ids...)
	return tu
}

// RemoveHosts removes "hosts" edges to Host entities.
func (tu *TeamUpdate) RemoveHosts(h ...*Host) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.RemoveHostIDs(ids...)
}

// ClearHostservices clears all "hostservices" edges to the HostService entity.
func (tu *TeamUpdate) ClearHostservices() *TeamUpdate {
	tu.mutation.ClearHostservices()
	return tu
}

// RemoveHostserviceIDs removes the "hostservices" edge to HostService entities by IDs.
func (tu *TeamUpdate) RemoveHostserviceIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemoveHostserviceIDs(ids...)
	return tu
}

// RemoveHostservices removes "hostservices" edges to HostService entities.
func (tu *TeamUpdate) RemoveHostservices(h ...*HostService) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.RemoveHostserviceIDs(ids...)
}

// ClearChecks clears all "checks" edges to the Check entity.
func (tu *TeamUpdate) ClearChecks() *TeamUpdate {
	tu.mutation.ClearChecks()
	return tu
}

// RemoveCheckIDs removes the "checks" edge to Check entities by IDs.
func (tu *TeamUpdate) RemoveCheckIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemoveCheckIDs(ids...)
	return tu
}

// RemoveChecks removes "checks" edges to Check entities.
func (tu *TeamUpdate) RemoveChecks(c ...*Check) *TeamUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCheckIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (tu *TeamUpdate) ClearProperties() *TeamUpdate {
	tu.mutation.ClearProperties()
	return tu
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (tu *TeamUpdate) RemovePropertyIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemovePropertyIDs(ids...)
	return tu
}

// RemoveProperties removes "properties" edges to Property entities.
func (tu *TeamUpdate) RemoveProperties(p ...*Property) *TeamUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePropertyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TeamMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeamUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := team.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Team.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.DisplayName(); ok {
		if err := team.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`entities: validator failed for field "Team.display_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Number(); ok {
		if err := team.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`entities: validator failed for field "Team.number": %w`, err)}
		}
	}
	if _, ok := tu.mutation.CompetitionID(); tu.mutation.CompetitionCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Team.competition"`)
	}
	return nil
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.DisplayName(); ok {
		_spec.SetField(team.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Pause(); ok {
		_spec.SetField(team.FieldPause, field.TypeBool, value)
	}
	if tu.mutation.PauseCleared() {
		_spec.ClearField(team.FieldPause, field.TypeBool)
	}
	if value, ok := tu.mutation.Hidden(); ok {
		_spec.SetField(team.FieldHidden, field.TypeBool, value)
	}
	if tu.mutation.HiddenCleared() {
		_spec.ClearField(team.FieldHidden, field.TypeBool)
	}
	if value, ok := tu.mutation.Number(); ok {
		_spec.SetField(team.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedNumber(); ok {
		_spec.AddField(team.FieldNumber, field.TypeInt, value)
	}
	if tu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHostsIDs(); len(nodes) > 0 && !tu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHostservicesIDs(); len(nodes) > 0 && !tu.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedChecksIDs(); len(nodes) > 0 && !tu.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ChecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !tu.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetDisplayName sets the "display_name" field.
func (tuo *TeamUpdateOne) SetDisplayName(s string) *TeamUpdateOne {
	tuo.mutation.SetDisplayName(s)
	return tuo
}

// SetPause sets the "pause" field.
func (tuo *TeamUpdateOne) SetPause(b bool) *TeamUpdateOne {
	tuo.mutation.SetPause(b)
	return tuo
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillablePause(b *bool) *TeamUpdateOne {
	if b != nil {
		tuo.SetPause(*b)
	}
	return tuo
}

// ClearPause clears the value of the "pause" field.
func (tuo *TeamUpdateOne) ClearPause() *TeamUpdateOne {
	tuo.mutation.ClearPause()
	return tuo
}

// SetHidden sets the "hidden" field.
func (tuo *TeamUpdateOne) SetHidden(b bool) *TeamUpdateOne {
	tuo.mutation.SetHidden(b)
	return tuo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableHidden(b *bool) *TeamUpdateOne {
	if b != nil {
		tuo.SetHidden(*b)
	}
	return tuo
}

// ClearHidden clears the value of the "hidden" field.
func (tuo *TeamUpdateOne) ClearHidden() *TeamUpdateOne {
	tuo.mutation.ClearHidden()
	return tuo
}

// SetNumber sets the "number" field.
func (tuo *TeamUpdateOne) SetNumber(i int) *TeamUpdateOne {
	tuo.mutation.ResetNumber()
	tuo.mutation.SetNumber(i)
	return tuo
}

// AddNumber adds i to the "number" field.
func (tuo *TeamUpdateOne) AddNumber(i int) *TeamUpdateOne {
	tuo.mutation.AddNumber(i)
	return tuo
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (tuo *TeamUpdateOne) AddHostIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddHostIDs(ids...)
	return tuo
}

// AddHosts adds the "hosts" edges to the Host entity.
func (tuo *TeamUpdateOne) AddHosts(h ...*Host) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.AddHostIDs(ids...)
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (tuo *TeamUpdateOne) AddHostserviceIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddHostserviceIDs(ids...)
	return tuo
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (tuo *TeamUpdateOne) AddHostservices(h ...*HostService) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.AddHostserviceIDs(ids...)
}

// AddCheckIDs adds the "checks" edge to the Check entity by IDs.
func (tuo *TeamUpdateOne) AddCheckIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddCheckIDs(ids...)
	return tuo
}

// AddChecks adds the "checks" edges to the Check entity.
func (tuo *TeamUpdateOne) AddChecks(c ...*Check) *TeamUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCheckIDs(ids...)
}

// AddPropertyIDs adds the "properties" edge to the Property entity by IDs.
func (tuo *TeamUpdateOne) AddPropertyIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddPropertyIDs(ids...)
	return tuo
}

// AddProperties adds the "properties" edges to the Property entity.
func (tuo *TeamUpdateOne) AddProperties(p ...*Property) *TeamUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPropertyIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (tuo *TeamUpdateOne) ClearHosts() *TeamUpdateOne {
	tuo.mutation.ClearHosts()
	return tuo
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (tuo *TeamUpdateOne) RemoveHostIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemoveHostIDs(ids...)
	return tuo
}

// RemoveHosts removes "hosts" edges to Host entities.
func (tuo *TeamUpdateOne) RemoveHosts(h ...*Host) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.RemoveHostIDs(ids...)
}

// ClearHostservices clears all "hostservices" edges to the HostService entity.
func (tuo *TeamUpdateOne) ClearHostservices() *TeamUpdateOne {
	tuo.mutation.ClearHostservices()
	return tuo
}

// RemoveHostserviceIDs removes the "hostservices" edge to HostService entities by IDs.
func (tuo *TeamUpdateOne) RemoveHostserviceIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemoveHostserviceIDs(ids...)
	return tuo
}

// RemoveHostservices removes "hostservices" edges to HostService entities.
func (tuo *TeamUpdateOne) RemoveHostservices(h ...*HostService) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.RemoveHostserviceIDs(ids...)
}

// ClearChecks clears all "checks" edges to the Check entity.
func (tuo *TeamUpdateOne) ClearChecks() *TeamUpdateOne {
	tuo.mutation.ClearChecks()
	return tuo
}

// RemoveCheckIDs removes the "checks" edge to Check entities by IDs.
func (tuo *TeamUpdateOne) RemoveCheckIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemoveCheckIDs(ids...)
	return tuo
}

// RemoveChecks removes "checks" edges to Check entities.
func (tuo *TeamUpdateOne) RemoveChecks(c ...*Check) *TeamUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCheckIDs(ids...)
}

// ClearProperties clears all "properties" edges to the Property entity.
func (tuo *TeamUpdateOne) ClearProperties() *TeamUpdateOne {
	tuo.mutation.ClearProperties()
	return tuo
}

// RemovePropertyIDs removes the "properties" edge to Property entities by IDs.
func (tuo *TeamUpdateOne) RemovePropertyIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemovePropertyIDs(ids...)
	return tuo
}

// RemoveProperties removes "properties" edges to Property entities.
func (tuo *TeamUpdateOne) RemoveProperties(p ...*Property) *TeamUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePropertyIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks[*Team, TeamMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeamUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := team.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Team.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.DisplayName(); ok {
		if err := team.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`entities: validator failed for field "Team.display_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Number(); ok {
		if err := team.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`entities: validator failed for field "Team.number": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.CompetitionID(); tuo.mutation.CompetitionCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Team.competition"`)
	}
	return nil
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.DisplayName(); ok {
		_spec.SetField(team.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Pause(); ok {
		_spec.SetField(team.FieldPause, field.TypeBool, value)
	}
	if tuo.mutation.PauseCleared() {
		_spec.ClearField(team.FieldPause, field.TypeBool)
	}
	if value, ok := tuo.mutation.Hidden(); ok {
		_spec.SetField(team.FieldHidden, field.TypeBool, value)
	}
	if tuo.mutation.HiddenCleared() {
		_spec.ClearField(team.FieldHidden, field.TypeBool)
	}
	if value, ok := tuo.mutation.Number(); ok {
		_spec.SetField(team.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedNumber(); ok {
		_spec.AddField(team.FieldNumber, field.TypeInt, value)
	}
	if tuo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHostsIDs(); len(nodes) > 0 && !tuo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHostservicesIDs(); len(nodes) > 0 && !tuo.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostservicesTable,
			Columns: []string{team.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedChecksIDs(); len(nodes) > 0 && !tuo.mutation.ChecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ChecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ChecksTable,
			Columns: []string{team.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPropertiesIDs(); len(nodes) > 0 && !tuo.mutation.PropertiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PropertiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PropertiesTable,
			Columns: []string{team.PropertiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(property.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
