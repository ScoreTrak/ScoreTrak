// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/user"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetPause sets the "pause" field.
func (tu *TeamUpdate) SetPause(b bool) *TeamUpdate {
	tu.mutation.SetPause(b)
	return tu
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (tu *TeamUpdate) SetNillablePause(b *bool) *TeamUpdate {
	if b != nil {
		tu.SetPause(*b)
	}
	return tu
}

// ClearPause clears the value of the "pause" field.
func (tu *TeamUpdate) ClearPause() *TeamUpdate {
	tu.mutation.ClearPause()
	return tu
}

// SetHidden sets the "hidden" field.
func (tu *TeamUpdate) SetHidden(b bool) *TeamUpdate {
	tu.mutation.SetHidden(b)
	return tu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableHidden(b *bool) *TeamUpdate {
	if b != nil {
		tu.SetHidden(*b)
	}
	return tu
}

// ClearHidden clears the value of the "hidden" field.
func (tu *TeamUpdate) ClearHidden() *TeamUpdate {
	tu.mutation.ClearHidden()
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetIndex sets the "index" field.
func (tu *TeamUpdate) SetIndex(i int) *TeamUpdate {
	tu.mutation.ResetIndex()
	tu.mutation.SetIndex(i)
	return tu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableIndex(i *int) *TeamUpdate {
	if i != nil {
		tu.SetIndex(*i)
	}
	return tu
}

// AddIndex adds i to the "index" field.
func (tu *TeamUpdate) AddIndex(i int) *TeamUpdate {
	tu.mutation.AddIndex(i)
	return tu
}

// ClearIndex clears the value of the "index" field.
func (tu *TeamUpdate) ClearIndex() *TeamUpdate {
	tu.mutation.ClearIndex()
	return tu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tu *TeamUpdate) AddUserIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUsers adds the "users" edges to the User entity.
func (tu *TeamUpdate) AddUsers(u ...*User) *TeamUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (tu *TeamUpdate) AddHostIDs(ids ...string) *TeamUpdate {
	tu.mutation.AddHostIDs(ids...)
	return tu
}

// AddHosts adds the "hosts" edges to the Host entity.
func (tu *TeamUpdate) AddHosts(h ...*Host) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.AddHostIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tu *TeamUpdate) ClearUsers() *TeamUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tu *TeamUpdate) RemoveUserIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUsers removes "users" edges to User entities.
func (tu *TeamUpdate) RemoveUsers(u ...*User) *TeamUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (tu *TeamUpdate) ClearHosts() *TeamUpdate {
	tu.mutation.ClearHosts()
	return tu
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (tu *TeamUpdate) RemoveHostIDs(ids ...string) *TeamUpdate {
	tu.mutation.RemoveHostIDs(ids...)
	return tu
}

// RemoveHosts removes "hosts" edges to Host entities.
func (tu *TeamUpdate) RemoveHosts(h ...*Host) *TeamUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.RemoveHostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TeamMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TeamUpdate) check() error {
	if v, ok := tu.mutation.Index(); ok {
		if err := team.IndexValidator(v); err != nil {
			return &ValidationError{Name: "index", err: fmt.Errorf(`entities: validator failed for field "Team.index": %w`, err)}
		}
	}
	if _, ok := tu.mutation.CompetitionID(); tu.mutation.CompetitionCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Team.competition"`)
	}
	return nil
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Pause(); ok {
		_spec.SetField(team.FieldPause, field.TypeBool, value)
	}
	if tu.mutation.PauseCleared() {
		_spec.ClearField(team.FieldPause, field.TypeBool)
	}
	if value, ok := tu.mutation.Hidden(); ok {
		_spec.SetField(team.FieldHidden, field.TypeBool, value)
	}
	if tu.mutation.HiddenCleared() {
		_spec.ClearField(team.FieldHidden, field.TypeBool)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Index(); ok {
		_spec.SetField(team.FieldIndex, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedIndex(); ok {
		_spec.AddField(team.FieldIndex, field.TypeInt, value)
	}
	if tu.mutation.IndexCleared() {
		_spec.ClearField(team.FieldIndex, field.TypeInt)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHostsIDs(); len(nodes) > 0 && !tu.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetPause sets the "pause" field.
func (tuo *TeamUpdateOne) SetPause(b bool) *TeamUpdateOne {
	tuo.mutation.SetPause(b)
	return tuo
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillablePause(b *bool) *TeamUpdateOne {
	if b != nil {
		tuo.SetPause(*b)
	}
	return tuo
}

// ClearPause clears the value of the "pause" field.
func (tuo *TeamUpdateOne) ClearPause() *TeamUpdateOne {
	tuo.mutation.ClearPause()
	return tuo
}

// SetHidden sets the "hidden" field.
func (tuo *TeamUpdateOne) SetHidden(b bool) *TeamUpdateOne {
	tuo.mutation.SetHidden(b)
	return tuo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableHidden(b *bool) *TeamUpdateOne {
	if b != nil {
		tuo.SetHidden(*b)
	}
	return tuo
}

// ClearHidden clears the value of the "hidden" field.
func (tuo *TeamUpdateOne) ClearHidden() *TeamUpdateOne {
	tuo.mutation.ClearHidden()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetIndex sets the "index" field.
func (tuo *TeamUpdateOne) SetIndex(i int) *TeamUpdateOne {
	tuo.mutation.ResetIndex()
	tuo.mutation.SetIndex(i)
	return tuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableIndex(i *int) *TeamUpdateOne {
	if i != nil {
		tuo.SetIndex(*i)
	}
	return tuo
}

// AddIndex adds i to the "index" field.
func (tuo *TeamUpdateOne) AddIndex(i int) *TeamUpdateOne {
	tuo.mutation.AddIndex(i)
	return tuo
}

// ClearIndex clears the value of the "index" field.
func (tuo *TeamUpdateOne) ClearIndex() *TeamUpdateOne {
	tuo.mutation.ClearIndex()
	return tuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tuo *TeamUpdateOne) AddUserIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUsers adds the "users" edges to the User entity.
func (tuo *TeamUpdateOne) AddUsers(u ...*User) *TeamUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (tuo *TeamUpdateOne) AddHostIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.AddHostIDs(ids...)
	return tuo
}

// AddHosts adds the "hosts" edges to the Host entity.
func (tuo *TeamUpdateOne) AddHosts(h ...*Host) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.AddHostIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (tuo *TeamUpdateOne) ClearUsers() *TeamUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tuo *TeamUpdateOne) RemoveUserIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUsers removes "users" edges to User entities.
func (tuo *TeamUpdateOne) RemoveUsers(u ...*User) *TeamUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// ClearHosts clears all "hosts" edges to the Host entity.
func (tuo *TeamUpdateOne) ClearHosts() *TeamUpdateOne {
	tuo.mutation.ClearHosts()
	return tuo
}

// RemoveHostIDs removes the "hosts" edge to Host entities by IDs.
func (tuo *TeamUpdateOne) RemoveHostIDs(ids ...string) *TeamUpdateOne {
	tuo.mutation.RemoveHostIDs(ids...)
	return tuo
}

// RemoveHosts removes "hosts" edges to Host entities.
func (tuo *TeamUpdateOne) RemoveHosts(h ...*Host) *TeamUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.RemoveHostIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks[*Team, TeamMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TeamUpdateOne) check() error {
	if v, ok := tuo.mutation.Index(); ok {
		if err := team.IndexValidator(v); err != nil {
			return &ValidationError{Name: "index", err: fmt.Errorf(`entities: validator failed for field "Team.index": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.CompetitionID(); tuo.mutation.CompetitionCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Team.competition"`)
	}
	return nil
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Pause(); ok {
		_spec.SetField(team.FieldPause, field.TypeBool, value)
	}
	if tuo.mutation.PauseCleared() {
		_spec.ClearField(team.FieldPause, field.TypeBool)
	}
	if value, ok := tuo.mutation.Hidden(); ok {
		_spec.SetField(team.FieldHidden, field.TypeBool, value)
	}
	if tuo.mutation.HiddenCleared() {
		_spec.ClearField(team.FieldHidden, field.TypeBool)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Index(); ok {
		_spec.SetField(team.FieldIndex, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedIndex(); ok {
		_spec.AddField(team.FieldIndex, field.TypeInt, value)
	}
	if tuo.mutation.IndexCleared() {
		_spec.ClearField(team.FieldIndex, field.TypeInt)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   team.UsersTable,
			Columns: team.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHostsIDs(); len(nodes) > 0 && !tuo.mutation.HostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.HostsTable,
			Columns: []string{team.HostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
