// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/round"
)

// RoundCreate is the builder for creating a Round entity.
type RoundCreate struct {
	config
	mutation *RoundMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCompetitionID sets the "competition_id" field.
func (rc *RoundCreate) SetCompetitionID(s string) *RoundCreate {
	rc.mutation.SetCompetitionID(s)
	return rc
}

// SetRoundNumber sets the "round_number" field.
func (rc *RoundCreate) SetRoundNumber(i int) *RoundCreate {
	rc.mutation.SetRoundNumber(i)
	return rc
}

// SetNote sets the "note" field.
func (rc *RoundCreate) SetNote(s string) *RoundCreate {
	rc.mutation.SetNote(s)
	return rc
}

// SetErr sets the "err" field.
func (rc *RoundCreate) SetErr(s string) *RoundCreate {
	rc.mutation.SetErr(s)
	return rc
}

// SetStartedAt sets the "started_at" field.
func (rc *RoundCreate) SetStartedAt(t time.Time) *RoundCreate {
	rc.mutation.SetStartedAt(t)
	return rc
}

// SetFinishedAt sets the "finished_at" field.
func (rc *RoundCreate) SetFinishedAt(t time.Time) *RoundCreate {
	rc.mutation.SetFinishedAt(t)
	return rc
}

// SetID sets the "id" field.
func (rc *RoundCreate) SetID(s string) *RoundCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RoundCreate) SetNillableID(s *string) *RoundCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// SetCompetition sets the "competition" edge to the Competition entity.
func (rc *RoundCreate) SetCompetition(c *Competition) *RoundCreate {
	return rc.SetCompetitionID(c.ID)
}

// AddCheckIDs adds the "checks" edge to the Check entity by IDs.
func (rc *RoundCreate) AddCheckIDs(ids ...string) *RoundCreate {
	rc.mutation.AddCheckIDs(ids...)
	return rc
}

// AddChecks adds the "checks" edges to the Check entity.
func (rc *RoundCreate) AddChecks(c ...*Check) *RoundCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddCheckIDs(ids...)
}

// Mutation returns the RoundMutation object of the builder.
func (rc *RoundCreate) Mutation() *RoundMutation {
	return rc.mutation
}

// Save creates the Round in the database.
func (rc *RoundCreate) Save(ctx context.Context) (*Round, error) {
	rc.defaults()
	return withHooks[*Round, RoundMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoundCreate) SaveX(ctx context.Context) *Round {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RoundCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RoundCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RoundCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := round.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RoundCreate) check() error {
	if _, ok := rc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition_id", err: errors.New(`entities: missing required field "Round.competition_id"`)}
	}
	if _, ok := rc.mutation.RoundNumber(); !ok {
		return &ValidationError{Name: "round_number", err: errors.New(`entities: missing required field "Round.round_number"`)}
	}
	if _, ok := rc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`entities: missing required field "Round.note"`)}
	}
	if _, ok := rc.mutation.Err(); !ok {
		return &ValidationError{Name: "err", err: errors.New(`entities: missing required field "Round.err"`)}
	}
	if _, ok := rc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`entities: missing required field "Round.started_at"`)}
	}
	if _, ok := rc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`entities: missing required field "Round.finished_at"`)}
	}
	if v, ok := rc.mutation.ID(); ok {
		if err := round.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Round.id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CompetitionID(); !ok {
		return &ValidationError{Name: "competition", err: errors.New(`entities: missing required edge "Round.competition"`)}
	}
	return nil
}

func (rc *RoundCreate) sqlSave(ctx context.Context) (*Round, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Round.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RoundCreate) createSpec() (*Round, *sqlgraph.CreateSpec) {
	var (
		_node = &Round{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(round.Table, sqlgraph.NewFieldSpec(round.FieldID, field.TypeString))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.RoundNumber(); ok {
		_spec.SetField(round.FieldRoundNumber, field.TypeInt, value)
		_node.RoundNumber = value
	}
	if value, ok := rc.mutation.Note(); ok {
		_spec.SetField(round.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := rc.mutation.Err(); ok {
		_spec.SetField(round.FieldErr, field.TypeString, value)
		_node.Err = value
	}
	if value, ok := rc.mutation.StartedAt(); ok {
		_spec.SetField(round.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := rc.mutation.FinishedAt(); ok {
		_spec.SetField(round.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if nodes := rc.mutation.CompetitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   round.CompetitionTable,
			Columns: []string{round.CompetitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(competition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CompetitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ChecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   round.ChecksTable,
			Columns: []string{round.ChecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(check.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Round.Create().
//		SetCompetitionID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoundUpsert) {
//			SetCompetitionID(v+v).
//		}).
//		Exec(ctx)
func (rc *RoundCreate) OnConflict(opts ...sql.ConflictOption) *RoundUpsertOne {
	rc.conflict = opts
	return &RoundUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Round.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RoundCreate) OnConflictColumns(columns ...string) *RoundUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RoundUpsertOne{
		create: rc,
	}
}

type (
	// RoundUpsertOne is the builder for "upsert"-ing
	//  one Round node.
	RoundUpsertOne struct {
		create *RoundCreate
	}

	// RoundUpsert is the "OnConflict" setter.
	RoundUpsert struct {
		*sql.UpdateSet
	}
)

// SetRoundNumber sets the "round_number" field.
func (u *RoundUpsert) SetRoundNumber(v int) *RoundUpsert {
	u.Set(round.FieldRoundNumber, v)
	return u
}

// UpdateRoundNumber sets the "round_number" field to the value that was provided on create.
func (u *RoundUpsert) UpdateRoundNumber() *RoundUpsert {
	u.SetExcluded(round.FieldRoundNumber)
	return u
}

// AddRoundNumber adds v to the "round_number" field.
func (u *RoundUpsert) AddRoundNumber(v int) *RoundUpsert {
	u.Add(round.FieldRoundNumber, v)
	return u
}

// SetNote sets the "note" field.
func (u *RoundUpsert) SetNote(v string) *RoundUpsert {
	u.Set(round.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *RoundUpsert) UpdateNote() *RoundUpsert {
	u.SetExcluded(round.FieldNote)
	return u
}

// SetErr sets the "err" field.
func (u *RoundUpsert) SetErr(v string) *RoundUpsert {
	u.Set(round.FieldErr, v)
	return u
}

// UpdateErr sets the "err" field to the value that was provided on create.
func (u *RoundUpsert) UpdateErr() *RoundUpsert {
	u.SetExcluded(round.FieldErr)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *RoundUpsert) SetStartedAt(v time.Time) *RoundUpsert {
	u.Set(round.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *RoundUpsert) UpdateStartedAt() *RoundUpsert {
	u.SetExcluded(round.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *RoundUpsert) SetFinishedAt(v time.Time) *RoundUpsert {
	u.Set(round.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *RoundUpsert) UpdateFinishedAt() *RoundUpsert {
	u.SetExcluded(round.FieldFinishedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Round.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(round.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoundUpsertOne) UpdateNewValues() *RoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(round.FieldID)
		}
		if _, exists := u.create.mutation.CompetitionID(); exists {
			s.SetIgnore(round.FieldCompetitionID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Round.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoundUpsertOne) Ignore() *RoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoundUpsertOne) DoNothing() *RoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoundCreate.OnConflict
// documentation for more info.
func (u *RoundUpsertOne) Update(set func(*RoundUpsert)) *RoundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoundUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoundNumber sets the "round_number" field.
func (u *RoundUpsertOne) SetRoundNumber(v int) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.SetRoundNumber(v)
	})
}

// AddRoundNumber adds v to the "round_number" field.
func (u *RoundUpsertOne) AddRoundNumber(v int) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.AddRoundNumber(v)
	})
}

// UpdateRoundNumber sets the "round_number" field to the value that was provided on create.
func (u *RoundUpsertOne) UpdateRoundNumber() *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateRoundNumber()
	})
}

// SetNote sets the "note" field.
func (u *RoundUpsertOne) SetNote(v string) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *RoundUpsertOne) UpdateNote() *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateNote()
	})
}

// SetErr sets the "err" field.
func (u *RoundUpsertOne) SetErr(v string) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.SetErr(v)
	})
}

// UpdateErr sets the "err" field to the value that was provided on create.
func (u *RoundUpsertOne) UpdateErr() *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateErr()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *RoundUpsertOne) SetStartedAt(v time.Time) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *RoundUpsertOne) UpdateStartedAt() *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *RoundUpsertOne) SetFinishedAt(v time.Time) *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *RoundUpsertOne) UpdateFinishedAt() *RoundUpsertOne {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateFinishedAt()
	})
}

// Exec executes the query.
func (u *RoundUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for RoundCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoundUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoundUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: RoundUpsertOne.ID is not supported by MySQL driver. Use RoundUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoundUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoundCreateBulk is the builder for creating many Round entities in bulk.
type RoundCreateBulk struct {
	config
	builders []*RoundCreate
	conflict []sql.ConflictOption
}

// Save creates the Round entities in the database.
func (rcb *RoundCreateBulk) Save(ctx context.Context) ([]*Round, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Round, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RoundCreateBulk) SaveX(ctx context.Context) []*Round {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RoundCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RoundCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Round.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoundUpsert) {
//			SetCompetitionID(v+v).
//		}).
//		Exec(ctx)
func (rcb *RoundCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoundUpsertBulk {
	rcb.conflict = opts
	return &RoundUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Round.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RoundCreateBulk) OnConflictColumns(columns ...string) *RoundUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RoundUpsertBulk{
		create: rcb,
	}
}

// RoundUpsertBulk is the builder for "upsert"-ing
// a bulk of Round nodes.
type RoundUpsertBulk struct {
	create *RoundCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Round.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(round.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoundUpsertBulk) UpdateNewValues() *RoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(round.FieldID)
			}
			if _, exists := b.mutation.CompetitionID(); exists {
				s.SetIgnore(round.FieldCompetitionID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Round.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoundUpsertBulk) Ignore() *RoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoundUpsertBulk) DoNothing() *RoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoundCreateBulk.OnConflict
// documentation for more info.
func (u *RoundUpsertBulk) Update(set func(*RoundUpsert)) *RoundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoundUpsert{UpdateSet: update})
	}))
	return u
}

// SetRoundNumber sets the "round_number" field.
func (u *RoundUpsertBulk) SetRoundNumber(v int) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.SetRoundNumber(v)
	})
}

// AddRoundNumber adds v to the "round_number" field.
func (u *RoundUpsertBulk) AddRoundNumber(v int) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.AddRoundNumber(v)
	})
}

// UpdateRoundNumber sets the "round_number" field to the value that was provided on create.
func (u *RoundUpsertBulk) UpdateRoundNumber() *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateRoundNumber()
	})
}

// SetNote sets the "note" field.
func (u *RoundUpsertBulk) SetNote(v string) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *RoundUpsertBulk) UpdateNote() *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateNote()
	})
}

// SetErr sets the "err" field.
func (u *RoundUpsertBulk) SetErr(v string) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.SetErr(v)
	})
}

// UpdateErr sets the "err" field to the value that was provided on create.
func (u *RoundUpsertBulk) UpdateErr() *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateErr()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *RoundUpsertBulk) SetStartedAt(v time.Time) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *RoundUpsertBulk) UpdateStartedAt() *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *RoundUpsertBulk) SetFinishedAt(v time.Time) *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *RoundUpsertBulk) UpdateFinishedAt() *RoundUpsertBulk {
	return u.Update(func(s *RoundUpsert) {
		s.UpdateFinishedAt()
	})
}

// Exec executes the query.
func (u *RoundUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the RoundCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for RoundCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoundUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
