// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostgroup"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// HostGroupDelete is the builder for deleting a HostGroup entity.
type HostGroupDelete struct {
	config
	hooks    []Hook
	mutation *HostGroupMutation
}

// Where appends a list predicates to the HostGroupDelete builder.
func (hgd *HostGroupDelete) Where(ps ...predicate.HostGroup) *HostGroupDelete {
	hgd.mutation.Where(ps...)
	return hgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hgd *HostGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, HostGroupMutation](ctx, hgd.sqlExec, hgd.mutation, hgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hgd *HostGroupDelete) ExecX(ctx context.Context) int {
	n, err := hgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hgd *HostGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hostgroup.Table, sqlgraph.NewFieldSpec(hostgroup.FieldID, field.TypeString))
	if ps := hgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hgd.mutation.done = true
	return affected, err
}

// HostGroupDeleteOne is the builder for deleting a single HostGroup entity.
type HostGroupDeleteOne struct {
	hgd *HostGroupDelete
}

// Where appends a list predicates to the HostGroupDelete builder.
func (hgdo *HostGroupDeleteOne) Where(ps ...predicate.HostGroup) *HostGroupDeleteOne {
	hgdo.hgd.mutation.Where(ps...)
	return hgdo
}

// Exec executes the deletion query.
func (hgdo *HostGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := hgdo.hgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hostgroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hgdo *HostGroupDeleteOne) ExecX(ctx context.Context) {
	if err := hgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
