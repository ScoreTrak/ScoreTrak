// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/check"
	"github.com/scoretrak/scoretrak/internal/entities/hostservice"
	"github.com/scoretrak/scoretrak/internal/entities/round"
)

// CheckCreate is the builder for creating a Check entity.
type CheckCreate struct {
	config
	mutation *CheckMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (cc *CheckCreate) SetCreateTime(t time.Time) *CheckCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CheckCreate) SetNillableCreateTime(t *time.Time) *CheckCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CheckCreate) SetUpdateTime(t time.Time) *CheckCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CheckCreate) SetNillableUpdateTime(t *time.Time) *CheckCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetLog sets the "log" field.
func (cc *CheckCreate) SetLog(s string) *CheckCreate {
	cc.mutation.SetLog(s)
	return cc
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (cc *CheckCreate) SetNillableLog(s *string) *CheckCreate {
	if s != nil {
		cc.SetLog(*s)
	}
	return cc
}

// SetError sets the "error" field.
func (cc *CheckCreate) SetError(s string) *CheckCreate {
	cc.mutation.SetError(s)
	return cc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (cc *CheckCreate) SetNillableError(s *string) *CheckCreate {
	if s != nil {
		cc.SetError(*s)
	}
	return cc
}

// SetOutcomeStatus sets the "outcome_status" field.
func (cc *CheckCreate) SetOutcomeStatus(cs check.OutcomeStatus) *CheckCreate {
	cc.mutation.SetOutcomeStatus(cs)
	return cc
}

// SetNillableOutcomeStatus sets the "outcome_status" field if the given value is not nil.
func (cc *CheckCreate) SetNillableOutcomeStatus(cs *check.OutcomeStatus) *CheckCreate {
	if cs != nil {
		cc.SetOutcomeStatus(*cs)
	}
	return cc
}

// SetProgressStatus sets the "progress_status" field.
func (cc *CheckCreate) SetProgressStatus(cs check.ProgressStatus) *CheckCreate {
	cc.mutation.SetProgressStatus(cs)
	return cc
}

// SetNillableProgressStatus sets the "progress_status" field if the given value is not nil.
func (cc *CheckCreate) SetNillableProgressStatus(cs *check.ProgressStatus) *CheckCreate {
	if cs != nil {
		cc.SetProgressStatus(*cs)
	}
	return cc
}

// SetRoundID sets the "round_id" field.
func (cc *CheckCreate) SetRoundID(s string) *CheckCreate {
	cc.mutation.SetRoundID(s)
	return cc
}

// SetHostServiceID sets the "host_service_id" field.
func (cc *CheckCreate) SetHostServiceID(s string) *CheckCreate {
	cc.mutation.SetHostServiceID(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CheckCreate) SetID(s string) *CheckCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CheckCreate) SetNillableID(s *string) *CheckCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetRound sets the "round" edge to the Round entity.
func (cc *CheckCreate) SetRound(r *Round) *CheckCreate {
	return cc.SetRoundID(r.ID)
}

// SetHostserviceID sets the "hostservice" edge to the HostService entity by ID.
func (cc *CheckCreate) SetHostserviceID(id string) *CheckCreate {
	cc.mutation.SetHostserviceID(id)
	return cc
}

// SetHostservice sets the "hostservice" edge to the HostService entity.
func (cc *CheckCreate) SetHostservice(h *HostService) *CheckCreate {
	return cc.SetHostserviceID(h.ID)
}

// Mutation returns the CheckMutation object of the builder.
func (cc *CheckCreate) Mutation() *CheckMutation {
	return cc.mutation
}

// Save creates the Check in the database.
func (cc *CheckCreate) Save(ctx context.Context) (*Check, error) {
	cc.defaults()
	return withHooks[*Check, CheckMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckCreate) SaveX(ctx context.Context) *Check {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CheckCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CheckCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CheckCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := check.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := check.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.ProgressStatus(); !ok {
		v := check.DefaultProgressStatus
		cc.mutation.SetProgressStatus(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := check.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CheckCreate) check() error {
	if v, ok := cc.mutation.OutcomeStatus(); ok {
		if err := check.OutcomeStatusValidator(v); err != nil {
			return &ValidationError{Name: "outcome_status", err: fmt.Errorf(`entities: validator failed for field "Check.outcome_status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.ProgressStatus(); !ok {
		return &ValidationError{Name: "progress_status", err: errors.New(`entities: missing required field "Check.progress_status"`)}
	}
	if v, ok := cc.mutation.ProgressStatus(); ok {
		if err := check.ProgressStatusValidator(v); err != nil {
			return &ValidationError{Name: "progress_status", err: fmt.Errorf(`entities: validator failed for field "Check.progress_status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`entities: missing required field "Check.round_id"`)}
	}
	if _, ok := cc.mutation.HostServiceID(); !ok {
		return &ValidationError{Name: "host_service_id", err: errors.New(`entities: missing required field "Check.host_service_id"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := check.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Check.id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round", err: errors.New(`entities: missing required edge "Check.round"`)}
	}
	if _, ok := cc.mutation.HostserviceID(); !ok {
		return &ValidationError{Name: "hostservice", err: errors.New(`entities: missing required edge "Check.hostservice"`)}
	}
	return nil
}

func (cc *CheckCreate) sqlSave(ctx context.Context) (*Check, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Check.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CheckCreate) createSpec() (*Check, *sqlgraph.CreateSpec) {
	var (
		_node = &Check{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(check.Table, sqlgraph.NewFieldSpec(check.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(check.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(check.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Log(); ok {
		_spec.SetField(check.FieldLog, field.TypeString, value)
		_node.Log = value
	}
	if value, ok := cc.mutation.Error(); ok {
		_spec.SetField(check.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := cc.mutation.OutcomeStatus(); ok {
		_spec.SetField(check.FieldOutcomeStatus, field.TypeEnum, value)
		_node.OutcomeStatus = value
	}
	if value, ok := cc.mutation.ProgressStatus(); ok {
		_spec.SetField(check.FieldProgressStatus, field.TypeEnum, value)
		_node.ProgressStatus = value
	}
	if nodes := cc.mutation.RoundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   check.RoundTable,
			Columns: []string{check.RoundColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoundID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.HostserviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   check.HostserviceTable,
			Columns: []string{check.HostserviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HostServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Check.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CheckUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cc *CheckCreate) OnConflict(opts ...sql.ConflictOption) *CheckUpsertOne {
	cc.conflict = opts
	return &CheckUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Check.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CheckCreate) OnConflictColumns(columns ...string) *CheckUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CheckUpsertOne{
		create: cc,
	}
}

type (
	// CheckUpsertOne is the builder for "upsert"-ing
	//  one Check node.
	CheckUpsertOne struct {
		create *CheckCreate
	}

	// CheckUpsert is the "OnConflict" setter.
	CheckUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *CheckUpsert) SetUpdateTime(v time.Time) *CheckUpsert {
	u.Set(check.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CheckUpsert) UpdateUpdateTime() *CheckUpsert {
	u.SetExcluded(check.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CheckUpsert) ClearUpdateTime() *CheckUpsert {
	u.SetNull(check.FieldUpdateTime)
	return u
}

// SetLog sets the "log" field.
func (u *CheckUpsert) SetLog(v string) *CheckUpsert {
	u.Set(check.FieldLog, v)
	return u
}

// UpdateLog sets the "log" field to the value that was provided on create.
func (u *CheckUpsert) UpdateLog() *CheckUpsert {
	u.SetExcluded(check.FieldLog)
	return u
}

// ClearLog clears the value of the "log" field.
func (u *CheckUpsert) ClearLog() *CheckUpsert {
	u.SetNull(check.FieldLog)
	return u
}

// SetError sets the "error" field.
func (u *CheckUpsert) SetError(v string) *CheckUpsert {
	u.Set(check.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *CheckUpsert) UpdateError() *CheckUpsert {
	u.SetExcluded(check.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *CheckUpsert) ClearError() *CheckUpsert {
	u.SetNull(check.FieldError)
	return u
}

// SetOutcomeStatus sets the "outcome_status" field.
func (u *CheckUpsert) SetOutcomeStatus(v check.OutcomeStatus) *CheckUpsert {
	u.Set(check.FieldOutcomeStatus, v)
	return u
}

// UpdateOutcomeStatus sets the "outcome_status" field to the value that was provided on create.
func (u *CheckUpsert) UpdateOutcomeStatus() *CheckUpsert {
	u.SetExcluded(check.FieldOutcomeStatus)
	return u
}

// ClearOutcomeStatus clears the value of the "outcome_status" field.
func (u *CheckUpsert) ClearOutcomeStatus() *CheckUpsert {
	u.SetNull(check.FieldOutcomeStatus)
	return u
}

// SetProgressStatus sets the "progress_status" field.
func (u *CheckUpsert) SetProgressStatus(v check.ProgressStatus) *CheckUpsert {
	u.Set(check.FieldProgressStatus, v)
	return u
}

// UpdateProgressStatus sets the "progress_status" field to the value that was provided on create.
func (u *CheckUpsert) UpdateProgressStatus() *CheckUpsert {
	u.SetExcluded(check.FieldProgressStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Check.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(check.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CheckUpsertOne) UpdateNewValues() *CheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(check.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(check.FieldCreateTime)
		}
		if _, exists := u.create.mutation.RoundID(); exists {
			s.SetIgnore(check.FieldRoundID)
		}
		if _, exists := u.create.mutation.HostServiceID(); exists {
			s.SetIgnore(check.FieldHostServiceID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Check.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CheckUpsertOne) Ignore() *CheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CheckUpsertOne) DoNothing() *CheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CheckCreate.OnConflict
// documentation for more info.
func (u *CheckUpsertOne) Update(set func(*CheckUpsert)) *CheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CheckUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CheckUpsertOne) SetUpdateTime(v time.Time) *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CheckUpsertOne) UpdateUpdateTime() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CheckUpsertOne) ClearUpdateTime() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.ClearUpdateTime()
	})
}

// SetLog sets the "log" field.
func (u *CheckUpsertOne) SetLog(v string) *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.SetLog(v)
	})
}

// UpdateLog sets the "log" field to the value that was provided on create.
func (u *CheckUpsertOne) UpdateLog() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateLog()
	})
}

// ClearLog clears the value of the "log" field.
func (u *CheckUpsertOne) ClearLog() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.ClearLog()
	})
}

// SetError sets the "error" field.
func (u *CheckUpsertOne) SetError(v string) *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *CheckUpsertOne) UpdateError() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *CheckUpsertOne) ClearError() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.ClearError()
	})
}

// SetOutcomeStatus sets the "outcome_status" field.
func (u *CheckUpsertOne) SetOutcomeStatus(v check.OutcomeStatus) *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.SetOutcomeStatus(v)
	})
}

// UpdateOutcomeStatus sets the "outcome_status" field to the value that was provided on create.
func (u *CheckUpsertOne) UpdateOutcomeStatus() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateOutcomeStatus()
	})
}

// ClearOutcomeStatus clears the value of the "outcome_status" field.
func (u *CheckUpsertOne) ClearOutcomeStatus() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.ClearOutcomeStatus()
	})
}

// SetProgressStatus sets the "progress_status" field.
func (u *CheckUpsertOne) SetProgressStatus(v check.ProgressStatus) *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.SetProgressStatus(v)
	})
}

// UpdateProgressStatus sets the "progress_status" field to the value that was provided on create.
func (u *CheckUpsertOne) UpdateProgressStatus() *CheckUpsertOne {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateProgressStatus()
	})
}

// Exec executes the query.
func (u *CheckUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CheckCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CheckUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CheckUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: CheckUpsertOne.ID is not supported by MySQL driver. Use CheckUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CheckUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CheckCreateBulk is the builder for creating many Check entities in bulk.
type CheckCreateBulk struct {
	config
	builders []*CheckCreate
	conflict []sql.ConflictOption
}

// Save creates the Check entities in the database.
func (ccb *CheckCreateBulk) Save(ctx context.Context) ([]*Check, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Check, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CheckCreateBulk) SaveX(ctx context.Context) []*Check {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CheckCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CheckCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Check.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CheckUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ccb *CheckCreateBulk) OnConflict(opts ...sql.ConflictOption) *CheckUpsertBulk {
	ccb.conflict = opts
	return &CheckUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Check.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CheckCreateBulk) OnConflictColumns(columns ...string) *CheckUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CheckUpsertBulk{
		create: ccb,
	}
}

// CheckUpsertBulk is the builder for "upsert"-ing
// a bulk of Check nodes.
type CheckUpsertBulk struct {
	create *CheckCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Check.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(check.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CheckUpsertBulk) UpdateNewValues() *CheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(check.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(check.FieldCreateTime)
			}
			if _, exists := b.mutation.RoundID(); exists {
				s.SetIgnore(check.FieldRoundID)
			}
			if _, exists := b.mutation.HostServiceID(); exists {
				s.SetIgnore(check.FieldHostServiceID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Check.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CheckUpsertBulk) Ignore() *CheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CheckUpsertBulk) DoNothing() *CheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CheckCreateBulk.OnConflict
// documentation for more info.
func (u *CheckUpsertBulk) Update(set func(*CheckUpsert)) *CheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CheckUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CheckUpsertBulk) SetUpdateTime(v time.Time) *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CheckUpsertBulk) UpdateUpdateTime() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CheckUpsertBulk) ClearUpdateTime() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.ClearUpdateTime()
	})
}

// SetLog sets the "log" field.
func (u *CheckUpsertBulk) SetLog(v string) *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.SetLog(v)
	})
}

// UpdateLog sets the "log" field to the value that was provided on create.
func (u *CheckUpsertBulk) UpdateLog() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateLog()
	})
}

// ClearLog clears the value of the "log" field.
func (u *CheckUpsertBulk) ClearLog() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.ClearLog()
	})
}

// SetError sets the "error" field.
func (u *CheckUpsertBulk) SetError(v string) *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *CheckUpsertBulk) UpdateError() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *CheckUpsertBulk) ClearError() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.ClearError()
	})
}

// SetOutcomeStatus sets the "outcome_status" field.
func (u *CheckUpsertBulk) SetOutcomeStatus(v check.OutcomeStatus) *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.SetOutcomeStatus(v)
	})
}

// UpdateOutcomeStatus sets the "outcome_status" field to the value that was provided on create.
func (u *CheckUpsertBulk) UpdateOutcomeStatus() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateOutcomeStatus()
	})
}

// ClearOutcomeStatus clears the value of the "outcome_status" field.
func (u *CheckUpsertBulk) ClearOutcomeStatus() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.ClearOutcomeStatus()
	})
}

// SetProgressStatus sets the "progress_status" field.
func (u *CheckUpsertBulk) SetProgressStatus(v check.ProgressStatus) *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.SetProgressStatus(v)
	})
}

// UpdateProgressStatus sets the "progress_status" field to the value that was provided on create.
func (u *CheckUpsertBulk) UpdateProgressStatus() *CheckUpsertBulk {
	return u.Update(func(s *CheckUpsert) {
		s.UpdateProgressStatus()
	})
}

// Exec executes the query.
func (u *CheckUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the CheckCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CheckCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CheckUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
