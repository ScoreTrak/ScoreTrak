// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/check"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/round"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// CheckCreate is the builder for creating a Check entity.
type CheckCreate struct {
	config
	mutation *CheckMutation
	hooks    []Hook
}

// SetPause sets the "pause" field.
func (cc *CheckCreate) SetPause(b bool) *CheckCreate {
	cc.mutation.SetPause(b)
	return cc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (cc *CheckCreate) SetNillablePause(b *bool) *CheckCreate {
	if b != nil {
		cc.SetPause(*b)
	}
	return cc
}

// SetHidden sets the "hidden" field.
func (cc *CheckCreate) SetHidden(b bool) *CheckCreate {
	cc.mutation.SetHidden(b)
	return cc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (cc *CheckCreate) SetNillableHidden(b *bool) *CheckCreate {
	if b != nil {
		cc.SetHidden(*b)
	}
	return cc
}

// SetLog sets the "log" field.
func (cc *CheckCreate) SetLog(s string) *CheckCreate {
	cc.mutation.SetLog(s)
	return cc
}

// SetError sets the "error" field.
func (cc *CheckCreate) SetError(s string) *CheckCreate {
	cc.mutation.SetError(s)
	return cc
}

// SetPassed sets the "passed" field.
func (cc *CheckCreate) SetPassed(b bool) *CheckCreate {
	cc.mutation.SetPassed(b)
	return cc
}

// SetRoundID sets the "round_id" field.
func (cc *CheckCreate) SetRoundID(s string) *CheckCreate {
	cc.mutation.SetRoundID(s)
	return cc
}

// SetHostServiceID sets the "host_service_id" field.
func (cc *CheckCreate) SetHostServiceID(s string) *CheckCreate {
	cc.mutation.SetHostServiceID(s)
	return cc
}

// SetTeamID sets the "team_id" field.
func (cc *CheckCreate) SetTeamID(s string) *CheckCreate {
	cc.mutation.SetTeamID(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CheckCreate) SetID(s string) *CheckCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CheckCreate) SetNillableID(s *string) *CheckCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetRoundsID sets the "rounds" edge to the Round entity by ID.
func (cc *CheckCreate) SetRoundsID(id string) *CheckCreate {
	cc.mutation.SetRoundsID(id)
	return cc
}

// SetRounds sets the "rounds" edge to the Round entity.
func (cc *CheckCreate) SetRounds(r *Round) *CheckCreate {
	return cc.SetRoundsID(r.ID)
}

// SetHostserviceID sets the "hostservice" edge to the HostService entity by ID.
func (cc *CheckCreate) SetHostserviceID(id string) *CheckCreate {
	cc.mutation.SetHostserviceID(id)
	return cc
}

// SetHostservice sets the "hostservice" edge to the HostService entity.
func (cc *CheckCreate) SetHostservice(h *HostService) *CheckCreate {
	return cc.SetHostserviceID(h.ID)
}

// SetTeam sets the "team" edge to the Team entity.
func (cc *CheckCreate) SetTeam(t *Team) *CheckCreate {
	return cc.SetTeamID(t.ID)
}

// Mutation returns the CheckMutation object of the builder.
func (cc *CheckCreate) Mutation() *CheckMutation {
	return cc.mutation
}

// Save creates the Check in the database.
func (cc *CheckCreate) Save(ctx context.Context) (*Check, error) {
	cc.defaults()
	return withHooks[*Check, CheckMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckCreate) SaveX(ctx context.Context) *Check {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CheckCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CheckCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CheckCreate) defaults() {
	if _, ok := cc.mutation.Hidden(); !ok {
		v := check.DefaultHidden
		cc.mutation.SetHidden(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := check.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CheckCreate) check() error {
	if _, ok := cc.mutation.Log(); !ok {
		return &ValidationError{Name: "log", err: errors.New(`entities: missing required field "Check.log"`)}
	}
	if _, ok := cc.mutation.Error(); !ok {
		return &ValidationError{Name: "error", err: errors.New(`entities: missing required field "Check.error"`)}
	}
	if _, ok := cc.mutation.Passed(); !ok {
		return &ValidationError{Name: "passed", err: errors.New(`entities: missing required field "Check.passed"`)}
	}
	if _, ok := cc.mutation.RoundID(); !ok {
		return &ValidationError{Name: "round_id", err: errors.New(`entities: missing required field "Check.round_id"`)}
	}
	if _, ok := cc.mutation.HostServiceID(); !ok {
		return &ValidationError{Name: "host_service_id", err: errors.New(`entities: missing required field "Check.host_service_id"`)}
	}
	if _, ok := cc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "Check.team_id"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := check.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Check.id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.RoundsID(); !ok {
		return &ValidationError{Name: "rounds", err: errors.New(`entities: missing required edge "Check.rounds"`)}
	}
	if _, ok := cc.mutation.HostserviceID(); !ok {
		return &ValidationError{Name: "hostservice", err: errors.New(`entities: missing required edge "Check.hostservice"`)}
	}
	if _, ok := cc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "Check.team"`)}
	}
	return nil
}

func (cc *CheckCreate) sqlSave(ctx context.Context) (*Check, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Check.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CheckCreate) createSpec() (*Check, *sqlgraph.CreateSpec) {
	var (
		_node = &Check{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(check.Table, sqlgraph.NewFieldSpec(check.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Pause(); ok {
		_spec.SetField(check.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := cc.mutation.Hidden(); ok {
		_spec.SetField(check.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := cc.mutation.Log(); ok {
		_spec.SetField(check.FieldLog, field.TypeString, value)
		_node.Log = value
	}
	if value, ok := cc.mutation.Error(); ok {
		_spec.SetField(check.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := cc.mutation.Passed(); ok {
		_spec.SetField(check.FieldPassed, field.TypeBool, value)
		_node.Passed = value
	}
	if nodes := cc.mutation.RoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   check.RoundsTable,
			Columns: []string{check.RoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(round.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoundID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.HostserviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   check.HostserviceTable,
			Columns: []string{check.HostserviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HostServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   check.TeamTable,
			Columns: []string{check.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckCreateBulk is the builder for creating many Check entities in bulk.
type CheckCreateBulk struct {
	config
	builders []*CheckCreate
}

// Save creates the Check entities in the database.
func (ccb *CheckCreateBulk) Save(ctx context.Context) ([]*Check, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Check, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CheckCreateBulk) SaveX(ctx context.Context) []*Check {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CheckCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CheckCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
