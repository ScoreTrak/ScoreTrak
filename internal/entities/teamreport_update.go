// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/hostservicereport"
	"github.com/scoretrak/scoretrak/internal/entities/predicate"
	"github.com/scoretrak/scoretrak/internal/entities/teamreport"
)

// TeamReportUpdate is the builder for updating TeamReport entities.
type TeamReportUpdate struct {
	config
	hooks    []Hook
	mutation *TeamReportMutation
}

// Where appends a list predicates to the TeamReportUpdate builder.
func (tru *TeamReportUpdate) Where(ps ...predicate.TeamReport) *TeamReportUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetUpdateTime sets the "update_time" field.
func (tru *TeamReportUpdate) SetUpdateTime(t time.Time) *TeamReportUpdate {
	tru.mutation.SetUpdateTime(t)
	return tru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (tru *TeamReportUpdate) ClearUpdateTime() *TeamReportUpdate {
	tru.mutation.ClearUpdateTime()
	return tru
}

// SetPoints sets the "points" field.
func (tru *TeamReportUpdate) SetPoints(i int) *TeamReportUpdate {
	tru.mutation.ResetPoints()
	tru.mutation.SetPoints(i)
	return tru
}

// AddPoints adds i to the "points" field.
func (tru *TeamReportUpdate) AddPoints(i int) *TeamReportUpdate {
	tru.mutation.AddPoints(i)
	return tru
}

// AddHostservicereportIDs adds the "hostservicereports" edge to the HostServiceReport entity by IDs.
func (tru *TeamReportUpdate) AddHostservicereportIDs(ids ...string) *TeamReportUpdate {
	tru.mutation.AddHostservicereportIDs(ids...)
	return tru
}

// AddHostservicereports adds the "hostservicereports" edges to the HostServiceReport entity.
func (tru *TeamReportUpdate) AddHostservicereports(h ...*HostServiceReport) *TeamReportUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tru.AddHostservicereportIDs(ids...)
}

// Mutation returns the TeamReportMutation object of the builder.
func (tru *TeamReportUpdate) Mutation() *TeamReportMutation {
	return tru.mutation
}

// ClearHostservicereports clears all "hostservicereports" edges to the HostServiceReport entity.
func (tru *TeamReportUpdate) ClearHostservicereports() *TeamReportUpdate {
	tru.mutation.ClearHostservicereports()
	return tru
}

// RemoveHostservicereportIDs removes the "hostservicereports" edge to HostServiceReport entities by IDs.
func (tru *TeamReportUpdate) RemoveHostservicereportIDs(ids ...string) *TeamReportUpdate {
	tru.mutation.RemoveHostservicereportIDs(ids...)
	return tru
}

// RemoveHostservicereports removes "hostservicereports" edges to HostServiceReport entities.
func (tru *TeamReportUpdate) RemoveHostservicereports(h ...*HostServiceReport) *TeamReportUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tru.RemoveHostservicereportIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TeamReportUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks[int, TeamReportMutation](ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TeamReportUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TeamReportUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TeamReportUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TeamReportUpdate) defaults() {
	if _, ok := tru.mutation.UpdateTime(); !ok && !tru.mutation.UpdateTimeCleared() {
		v := teamreport.UpdateDefaultUpdateTime()
		tru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TeamReportUpdate) check() error {
	if _, ok := tru.mutation.TeamID(); tru.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TeamReport.team"`)
	}
	return nil
}

func (tru *TeamReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(teamreport.Table, teamreport.Columns, sqlgraph.NewFieldSpec(teamreport.FieldID, field.TypeString))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.CreateTimeCleared() {
		_spec.ClearField(teamreport.FieldCreateTime, field.TypeTime)
	}
	if value, ok := tru.mutation.UpdateTime(); ok {
		_spec.SetField(teamreport.FieldUpdateTime, field.TypeTime, value)
	}
	if tru.mutation.UpdateTimeCleared() {
		_spec.ClearField(teamreport.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := tru.mutation.Points(); ok {
		_spec.SetField(teamreport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedPoints(); ok {
		_spec.AddField(teamreport.FieldPoints, field.TypeInt, value)
	}
	if tru.mutation.HostservicereportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedHostservicereportsIDs(); len(nodes) > 0 && !tru.mutation.HostservicereportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.HostservicereportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TeamReportUpdateOne is the builder for updating a single TeamReport entity.
type TeamReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamReportMutation
}

// SetUpdateTime sets the "update_time" field.
func (truo *TeamReportUpdateOne) SetUpdateTime(t time.Time) *TeamReportUpdateOne {
	truo.mutation.SetUpdateTime(t)
	return truo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (truo *TeamReportUpdateOne) ClearUpdateTime() *TeamReportUpdateOne {
	truo.mutation.ClearUpdateTime()
	return truo
}

// SetPoints sets the "points" field.
func (truo *TeamReportUpdateOne) SetPoints(i int) *TeamReportUpdateOne {
	truo.mutation.ResetPoints()
	truo.mutation.SetPoints(i)
	return truo
}

// AddPoints adds i to the "points" field.
func (truo *TeamReportUpdateOne) AddPoints(i int) *TeamReportUpdateOne {
	truo.mutation.AddPoints(i)
	return truo
}

// AddHostservicereportIDs adds the "hostservicereports" edge to the HostServiceReport entity by IDs.
func (truo *TeamReportUpdateOne) AddHostservicereportIDs(ids ...string) *TeamReportUpdateOne {
	truo.mutation.AddHostservicereportIDs(ids...)
	return truo
}

// AddHostservicereports adds the "hostservicereports" edges to the HostServiceReport entity.
func (truo *TeamReportUpdateOne) AddHostservicereports(h ...*HostServiceReport) *TeamReportUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return truo.AddHostservicereportIDs(ids...)
}

// Mutation returns the TeamReportMutation object of the builder.
func (truo *TeamReportUpdateOne) Mutation() *TeamReportMutation {
	return truo.mutation
}

// ClearHostservicereports clears all "hostservicereports" edges to the HostServiceReport entity.
func (truo *TeamReportUpdateOne) ClearHostservicereports() *TeamReportUpdateOne {
	truo.mutation.ClearHostservicereports()
	return truo
}

// RemoveHostservicereportIDs removes the "hostservicereports" edge to HostServiceReport entities by IDs.
func (truo *TeamReportUpdateOne) RemoveHostservicereportIDs(ids ...string) *TeamReportUpdateOne {
	truo.mutation.RemoveHostservicereportIDs(ids...)
	return truo
}

// RemoveHostservicereports removes "hostservicereports" edges to HostServiceReport entities.
func (truo *TeamReportUpdateOne) RemoveHostservicereports(h ...*HostServiceReport) *TeamReportUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return truo.RemoveHostservicereportIDs(ids...)
}

// Where appends a list predicates to the TeamReportUpdate builder.
func (truo *TeamReportUpdateOne) Where(ps ...predicate.TeamReport) *TeamReportUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TeamReportUpdateOne) Select(field string, fields ...string) *TeamReportUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TeamReport entity.
func (truo *TeamReportUpdateOne) Save(ctx context.Context) (*TeamReport, error) {
	truo.defaults()
	return withHooks[*TeamReport, TeamReportMutation](ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TeamReportUpdateOne) SaveX(ctx context.Context) *TeamReport {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TeamReportUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TeamReportUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TeamReportUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdateTime(); !ok && !truo.mutation.UpdateTimeCleared() {
		v := teamreport.UpdateDefaultUpdateTime()
		truo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TeamReportUpdateOne) check() error {
	if _, ok := truo.mutation.TeamID(); truo.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "TeamReport.team"`)
	}
	return nil
}

func (truo *TeamReportUpdateOne) sqlSave(ctx context.Context) (_node *TeamReport, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(teamreport.Table, teamreport.Columns, sqlgraph.NewFieldSpec(teamreport.FieldID, field.TypeString))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "TeamReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamreport.FieldID)
		for _, f := range fields {
			if !teamreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != teamreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.CreateTimeCleared() {
		_spec.ClearField(teamreport.FieldCreateTime, field.TypeTime)
	}
	if value, ok := truo.mutation.UpdateTime(); ok {
		_spec.SetField(teamreport.FieldUpdateTime, field.TypeTime, value)
	}
	if truo.mutation.UpdateTimeCleared() {
		_spec.ClearField(teamreport.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := truo.mutation.Points(); ok {
		_spec.SetField(teamreport.FieldPoints, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedPoints(); ok {
		_spec.AddField(teamreport.FieldPoints, field.TypeInt, value)
	}
	if truo.mutation.HostservicereportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedHostservicereportsIDs(); len(nodes) > 0 && !truo.mutation.HostservicereportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.HostservicereportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TeamReport{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
