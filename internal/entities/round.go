// Code generated by ent, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/round"
)

// Round is the model entity for the Round schema.
type Round struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CompetitionID holds the value of the "competition_id" field.
	CompetitionID string `json:"competition_id,omitempty"`
	// RoundNumber holds the value of the "round_number" field.
	RoundNumber int `json:"round_number,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Err holds the value of the "err" field.
	Err string `json:"err,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoundQuery when eager-loading is set.
	Edges        RoundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoundEdges holds the relations/edges for other nodes in the graph.
type RoundEdges struct {
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// Checks holds the value of the checks edge.
	Checks []*Check `json:"checks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoundEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[0] {
		if e.Competition == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// ChecksOrErr returns the Checks value or an error if the edge
// was not loaded in eager-loading.
func (e RoundEdges) ChecksOrErr() ([]*Check, error) {
	if e.loadedTypes[1] {
		return e.Checks, nil
	}
	return nil, &NotLoadedError{edge: "checks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Round) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case round.FieldRoundNumber:
			values[i] = new(sql.NullInt64)
		case round.FieldID, round.FieldCompetitionID, round.FieldNote, round.FieldErr:
			values[i] = new(sql.NullString)
		case round.FieldStartedAt, round.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Round fields.
func (r *Round) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case round.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case round.FieldCompetitionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				r.CompetitionID = value.String
			}
		case round.FieldRoundNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field round_number", values[i])
			} else if value.Valid {
				r.RoundNumber = int(value.Int64)
			}
		case round.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				r.Note = value.String
			}
		case round.FieldErr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field err", values[i])
			} else if value.Valid {
				r.Err = value.String
			}
		case round.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				r.StartedAt = value.Time
			}
		case round.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				r.FinishedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Round.
// This includes values selected through modifiers, order, etc.
func (r *Round) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryCompetition queries the "competition" edge of the Round entity.
func (r *Round) QueryCompetition() *CompetitionQuery {
	return NewRoundClient(r.config).QueryCompetition(r)
}

// QueryChecks queries the "checks" edge of the Round entity.
func (r *Round) QueryChecks() *CheckQuery {
	return NewRoundClient(r.config).QueryChecks(r)
}

// Update returns a builder for updating this Round.
// Note that you need to call Round.Unwrap() before calling this method if this Round
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Round) Update() *RoundUpdateOne {
	return NewRoundClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Round entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Round) Unwrap() *Round {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("entities: Round is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Round) String() string {
	var builder strings.Builder
	builder.WriteString("Round(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("competition_id=")
	builder.WriteString(r.CompetitionID)
	builder.WriteString(", ")
	builder.WriteString("round_number=")
	builder.WriteString(fmt.Sprintf("%v", r.RoundNumber))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(r.Note)
	builder.WriteString(", ")
	builder.WriteString("err=")
	builder.WriteString(r.Err)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(r.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(r.FinishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rounds is a parsable slice of Round.
type Rounds []*Round
