// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/hostservicereport"
	"github.com/scoretrak/scoretrak/internal/entities/team"
	"github.com/scoretrak/scoretrak/internal/entities/teamreport"
)

// TeamReportCreate is the builder for creating a TeamReport entity.
type TeamReportCreate struct {
	config
	mutation *TeamReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (trc *TeamReportCreate) SetCreateTime(t time.Time) *TeamReportCreate {
	trc.mutation.SetCreateTime(t)
	return trc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (trc *TeamReportCreate) SetNillableCreateTime(t *time.Time) *TeamReportCreate {
	if t != nil {
		trc.SetCreateTime(*t)
	}
	return trc
}

// SetUpdateTime sets the "update_time" field.
func (trc *TeamReportCreate) SetUpdateTime(t time.Time) *TeamReportCreate {
	trc.mutation.SetUpdateTime(t)
	return trc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (trc *TeamReportCreate) SetNillableUpdateTime(t *time.Time) *TeamReportCreate {
	if t != nil {
		trc.SetUpdateTime(*t)
	}
	return trc
}

// SetPoints sets the "points" field.
func (trc *TeamReportCreate) SetPoints(i int) *TeamReportCreate {
	trc.mutation.SetPoints(i)
	return trc
}

// SetTeamID sets the "team_id" field.
func (trc *TeamReportCreate) SetTeamID(s string) *TeamReportCreate {
	trc.mutation.SetTeamID(s)
	return trc
}

// SetID sets the "id" field.
func (trc *TeamReportCreate) SetID(s string) *TeamReportCreate {
	trc.mutation.SetID(s)
	return trc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (trc *TeamReportCreate) SetNillableID(s *string) *TeamReportCreate {
	if s != nil {
		trc.SetID(*s)
	}
	return trc
}

// SetTeam sets the "team" edge to the Team entity.
func (trc *TeamReportCreate) SetTeam(t *Team) *TeamReportCreate {
	return trc.SetTeamID(t.ID)
}

// AddHostservicereportIDs adds the "hostservicereports" edge to the HostServiceReport entity by IDs.
func (trc *TeamReportCreate) AddHostservicereportIDs(ids ...string) *TeamReportCreate {
	trc.mutation.AddHostservicereportIDs(ids...)
	return trc
}

// AddHostservicereports adds the "hostservicereports" edges to the HostServiceReport entity.
func (trc *TeamReportCreate) AddHostservicereports(h ...*HostServiceReport) *TeamReportCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return trc.AddHostservicereportIDs(ids...)
}

// Mutation returns the TeamReportMutation object of the builder.
func (trc *TeamReportCreate) Mutation() *TeamReportMutation {
	return trc.mutation
}

// Save creates the TeamReport in the database.
func (trc *TeamReportCreate) Save(ctx context.Context) (*TeamReport, error) {
	trc.defaults()
	return withHooks[*TeamReport, TeamReportMutation](ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TeamReportCreate) SaveX(ctx context.Context) *TeamReport {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TeamReportCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TeamReportCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TeamReportCreate) defaults() {
	if _, ok := trc.mutation.CreateTime(); !ok {
		v := teamreport.DefaultCreateTime()
		trc.mutation.SetCreateTime(v)
	}
	if _, ok := trc.mutation.UpdateTime(); !ok {
		v := teamreport.DefaultUpdateTime()
		trc.mutation.SetUpdateTime(v)
	}
	if _, ok := trc.mutation.ID(); !ok {
		v := teamreport.DefaultID()
		trc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TeamReportCreate) check() error {
	if _, ok := trc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`entities: missing required field "TeamReport.points"`)}
	}
	if _, ok := trc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "TeamReport.team_id"`)}
	}
	if v, ok := trc.mutation.ID(); ok {
		if err := teamreport.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "TeamReport.id": %w`, err)}
		}
	}
	if _, ok := trc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "TeamReport.team"`)}
	}
	return nil
}

func (trc *TeamReportCreate) sqlSave(ctx context.Context) (*TeamReport, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TeamReport.ID type: %T", _spec.ID.Value)
		}
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TeamReportCreate) createSpec() (*TeamReport, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamReport{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(teamreport.Table, sqlgraph.NewFieldSpec(teamreport.FieldID, field.TypeString))
	)
	_spec.OnConflict = trc.conflict
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.CreateTime(); ok {
		_spec.SetField(teamreport.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := trc.mutation.UpdateTime(); ok {
		_spec.SetField(teamreport.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := trc.mutation.Points(); ok {
		_spec.SetField(teamreport.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if nodes := trc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   teamreport.TeamTable,
			Columns: []string{teamreport.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.HostservicereportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamreport.HostservicereportsTable,
			Columns: []string{teamreport.HostservicereportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservicereport.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamReport.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamReportUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (trc *TeamReportCreate) OnConflict(opts ...sql.ConflictOption) *TeamReportUpsertOne {
	trc.conflict = opts
	return &TeamReportUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TeamReportCreate) OnConflictColumns(columns ...string) *TeamReportUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TeamReportUpsertOne{
		create: trc,
	}
}

type (
	// TeamReportUpsertOne is the builder for "upsert"-ing
	//  one TeamReport node.
	TeamReportUpsertOne struct {
		create *TeamReportCreate
	}

	// TeamReportUpsert is the "OnConflict" setter.
	TeamReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TeamReportUpsert) SetUpdateTime(v time.Time) *TeamReportUpsert {
	u.Set(teamreport.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TeamReportUpsert) UpdateUpdateTime() *TeamReportUpsert {
	u.SetExcluded(teamreport.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TeamReportUpsert) ClearUpdateTime() *TeamReportUpsert {
	u.SetNull(teamreport.FieldUpdateTime)
	return u
}

// SetPoints sets the "points" field.
func (u *TeamReportUpsert) SetPoints(v int) *TeamReportUpsert {
	u.Set(teamreport.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *TeamReportUpsert) UpdatePoints() *TeamReportUpsert {
	u.SetExcluded(teamreport.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *TeamReportUpsert) AddPoints(v int) *TeamReportUpsert {
	u.Add(teamreport.FieldPoints, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamreport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TeamReportUpsertOne) UpdateNewValues() *TeamReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(teamreport.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(teamreport.FieldCreateTime)
		}
		if _, exists := u.create.mutation.TeamID(); exists {
			s.SetIgnore(teamreport.FieldTeamID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamReportUpsertOne) Ignore() *TeamReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamReportUpsertOne) DoNothing() *TeamReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamReportCreate.OnConflict
// documentation for more info.
func (u *TeamReportUpsertOne) Update(set func(*TeamReportUpsert)) *TeamReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TeamReportUpsertOne) SetUpdateTime(v time.Time) *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TeamReportUpsertOne) UpdateUpdateTime() *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TeamReportUpsertOne) ClearUpdateTime() *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.ClearUpdateTime()
	})
}

// SetPoints sets the "points" field.
func (u *TeamReportUpsertOne) SetPoints(v int) *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *TeamReportUpsertOne) AddPoints(v int) *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *TeamReportUpsertOne) UpdatePoints() *TeamReportUpsertOne {
	return u.Update(func(s *TeamReportUpsert) {
		s.UpdatePoints()
	})
}

// Exec executes the query.
func (u *TeamReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TeamReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamReportUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: TeamReportUpsertOne.ID is not supported by MySQL driver. Use TeamReportUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamReportUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamReportCreateBulk is the builder for creating many TeamReport entities in bulk.
type TeamReportCreateBulk struct {
	config
	builders []*TeamReportCreate
	conflict []sql.ConflictOption
}

// Save creates the TeamReport entities in the database.
func (trcb *TeamReportCreateBulk) Save(ctx context.Context) ([]*TeamReport, error) {
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TeamReport, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TeamReportCreateBulk) SaveX(ctx context.Context) []*TeamReport {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TeamReportCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TeamReportCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TeamReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamReportUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (trcb *TeamReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamReportUpsertBulk {
	trcb.conflict = opts
	return &TeamReportUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TeamReportCreateBulk) OnConflictColumns(columns ...string) *TeamReportUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TeamReportUpsertBulk{
		create: trcb,
	}
}

// TeamReportUpsertBulk is the builder for "upsert"-ing
// a bulk of TeamReport nodes.
type TeamReportUpsertBulk struct {
	create *TeamReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(teamreport.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TeamReportUpsertBulk) UpdateNewValues() *TeamReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(teamreport.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(teamreport.FieldCreateTime)
			}
			if _, exists := b.mutation.TeamID(); exists {
				s.SetIgnore(teamreport.FieldTeamID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TeamReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamReportUpsertBulk) Ignore() *TeamReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamReportUpsertBulk) DoNothing() *TeamReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamReportCreateBulk.OnConflict
// documentation for more info.
func (u *TeamReportUpsertBulk) Update(set func(*TeamReportUpsert)) *TeamReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TeamReportUpsertBulk) SetUpdateTime(v time.Time) *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TeamReportUpsertBulk) UpdateUpdateTime() *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *TeamReportUpsertBulk) ClearUpdateTime() *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.ClearUpdateTime()
	})
}

// SetPoints sets the "points" field.
func (u *TeamReportUpsertBulk) SetPoints(v int) *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *TeamReportUpsertBulk) AddPoints(v int) *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *TeamReportUpsertBulk) UpdatePoints() *TeamReportUpsertBulk {
	return u.Update(func(s *TeamReportUpsert) {
		s.UpdatePoints()
	})
}

// Exec executes the query.
func (u *TeamReportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the TeamReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for TeamReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
