// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/competition"
)

// CompetitionCreate is the builder for creating a Competition entity.
type CompetitionCreate struct {
	config
	mutation *CompetitionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPause sets the "pause" field.
func (cc *CompetitionCreate) SetPause(b bool) *CompetitionCreate {
	cc.mutation.SetPause(b)
	return cc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillablePause(b *bool) *CompetitionCreate {
	if b != nil {
		cc.SetPause(*b)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CompetitionCreate) SetCreateTime(t time.Time) *CompetitionCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableCreateTime(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CompetitionCreate) SetUpdateTime(t time.Time) *CompetitionCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableUpdateTime(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CompetitionCreate) SetName(s string) *CompetitionCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *CompetitionCreate) SetDisplayName(s string) *CompetitionCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetViewableToPublic sets the "viewable_to_public" field.
func (cc *CompetitionCreate) SetViewableToPublic(b bool) *CompetitionCreate {
	cc.mutation.SetViewableToPublic(b)
	return cc
}

// SetNillableViewableToPublic sets the "viewable_to_public" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableViewableToPublic(b *bool) *CompetitionCreate {
	if b != nil {
		cc.SetViewableToPublic(*b)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CompetitionCreate) SetStartedAt(t time.Time) *CompetitionCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableStartedAt(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetFinishedAt sets the "finished_at" field.
func (cc *CompetitionCreate) SetFinishedAt(t time.Time) *CompetitionCreate {
	cc.mutation.SetFinishedAt(t)
	return cc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableFinishedAt(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetFinishedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CompetitionCreate) SetID(s string) *CompetitionCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableID(s *string) *CompetitionCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// Mutation returns the CompetitionMutation object of the builder.
func (cc *CompetitionCreate) Mutation() *CompetitionMutation {
	return cc.mutation
}

// Save creates the Competition in the database.
func (cc *CompetitionCreate) Save(ctx context.Context) (*Competition, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Competition, CompetitionMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompetitionCreate) SaveX(ctx context.Context) *Competition {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompetitionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompetitionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompetitionCreate) defaults() error {
	if _, ok := cc.mutation.Pause(); !ok {
		v := competition.DefaultPause
		cc.mutation.SetPause(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		if competition.DefaultCreateTime == nil {
			return fmt.Errorf("entities: uninitialized competition.DefaultCreateTime (forgotten import entities/runtime?)")
		}
		v := competition.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		if competition.DefaultUpdateTime == nil {
			return fmt.Errorf("entities: uninitialized competition.DefaultUpdateTime (forgotten import entities/runtime?)")
		}
		v := competition.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.ViewableToPublic(); !ok {
		v := competition.DefaultViewableToPublic
		cc.mutation.SetViewableToPublic(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if competition.DefaultID == nil {
			return fmt.Errorf("entities: uninitialized competition.DefaultID (forgotten import entities/runtime?)")
		}
		v := competition.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompetitionCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "Competition.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := competition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Competition.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`entities: missing required field "Competition.display_name"`)}
	}
	if v, ok := cc.mutation.DisplayName(); ok {
		if err := competition.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`entities: validator failed for field "Competition.display_name": %w`, err)}
		}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := competition.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Competition.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CompetitionCreate) sqlSave(ctx context.Context) (*Competition, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Competition.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompetitionCreate) createSpec() (*Competition, *sqlgraph.CreateSpec) {
	var (
		_node = &Competition{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(competition.Table, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Pause(); ok {
		_spec.SetField(competition.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(competition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(competition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(competition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(competition.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.ViewableToPublic(); ok {
		_spec.SetField(competition.FieldViewableToPublic, field.TypeBool, value)
		_node.ViewableToPublic = &value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(competition.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := cc.mutation.FinishedAt(); ok {
		_spec.SetField(competition.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Competition.Create().
//		SetPause(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CompetitionUpsert) {
//			SetPause(v+v).
//		}).
//		Exec(ctx)
func (cc *CompetitionCreate) OnConflict(opts ...sql.ConflictOption) *CompetitionUpsertOne {
	cc.conflict = opts
	return &CompetitionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Competition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CompetitionCreate) OnConflictColumns(columns ...string) *CompetitionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CompetitionUpsertOne{
		create: cc,
	}
}

type (
	// CompetitionUpsertOne is the builder for "upsert"-ing
	//  one Competition node.
	CompetitionUpsertOne struct {
		create *CompetitionCreate
	}

	// CompetitionUpsert is the "OnConflict" setter.
	CompetitionUpsert struct {
		*sql.UpdateSet
	}
)

// SetPause sets the "pause" field.
func (u *CompetitionUpsert) SetPause(v bool) *CompetitionUpsert {
	u.Set(competition.FieldPause, v)
	return u
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdatePause() *CompetitionUpsert {
	u.SetExcluded(competition.FieldPause)
	return u
}

// ClearPause clears the value of the "pause" field.
func (u *CompetitionUpsert) ClearPause() *CompetitionUpsert {
	u.SetNull(competition.FieldPause)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CompetitionUpsert) SetUpdateTime(v time.Time) *CompetitionUpsert {
	u.Set(competition.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateUpdateTime() *CompetitionUpsert {
	u.SetExcluded(competition.FieldUpdateTime)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CompetitionUpsert) ClearUpdateTime() *CompetitionUpsert {
	u.SetNull(competition.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *CompetitionUpsert) SetName(v string) *CompetitionUpsert {
	u.Set(competition.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateName() *CompetitionUpsert {
	u.SetExcluded(competition.FieldName)
	return u
}

// SetDisplayName sets the "display_name" field.
func (u *CompetitionUpsert) SetDisplayName(v string) *CompetitionUpsert {
	u.Set(competition.FieldDisplayName, v)
	return u
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateDisplayName() *CompetitionUpsert {
	u.SetExcluded(competition.FieldDisplayName)
	return u
}

// SetViewableToPublic sets the "viewable_to_public" field.
func (u *CompetitionUpsert) SetViewableToPublic(v bool) *CompetitionUpsert {
	u.Set(competition.FieldViewableToPublic, v)
	return u
}

// UpdateViewableToPublic sets the "viewable_to_public" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateViewableToPublic() *CompetitionUpsert {
	u.SetExcluded(competition.FieldViewableToPublic)
	return u
}

// ClearViewableToPublic clears the value of the "viewable_to_public" field.
func (u *CompetitionUpsert) ClearViewableToPublic() *CompetitionUpsert {
	u.SetNull(competition.FieldViewableToPublic)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *CompetitionUpsert) SetStartedAt(v time.Time) *CompetitionUpsert {
	u.Set(competition.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateStartedAt() *CompetitionUpsert {
	u.SetExcluded(competition.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CompetitionUpsert) ClearStartedAt() *CompetitionUpsert {
	u.SetNull(competition.FieldStartedAt)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *CompetitionUpsert) SetFinishedAt(v time.Time) *CompetitionUpsert {
	u.Set(competition.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *CompetitionUpsert) UpdateFinishedAt() *CompetitionUpsert {
	u.SetExcluded(competition.FieldFinishedAt)
	return u
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *CompetitionUpsert) ClearFinishedAt() *CompetitionUpsert {
	u.SetNull(competition.FieldFinishedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Competition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(competition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CompetitionUpsertOne) UpdateNewValues() *CompetitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(competition.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(competition.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Competition.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CompetitionUpsertOne) Ignore() *CompetitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CompetitionUpsertOne) DoNothing() *CompetitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CompetitionCreate.OnConflict
// documentation for more info.
func (u *CompetitionUpsertOne) Update(set func(*CompetitionUpsert)) *CompetitionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CompetitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetPause sets the "pause" field.
func (u *CompetitionUpsertOne) SetPause(v bool) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdatePause() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *CompetitionUpsertOne) ClearPause() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearPause()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CompetitionUpsertOne) SetUpdateTime(v time.Time) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateUpdateTime() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CompetitionUpsertOne) ClearUpdateTime() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CompetitionUpsertOne) SetName(v string) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateName() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *CompetitionUpsertOne) SetDisplayName(v string) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateDisplayName() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateDisplayName()
	})
}

// SetViewableToPublic sets the "viewable_to_public" field.
func (u *CompetitionUpsertOne) SetViewableToPublic(v bool) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetViewableToPublic(v)
	})
}

// UpdateViewableToPublic sets the "viewable_to_public" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateViewableToPublic() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateViewableToPublic()
	})
}

// ClearViewableToPublic clears the value of the "viewable_to_public" field.
func (u *CompetitionUpsertOne) ClearViewableToPublic() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearViewableToPublic()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CompetitionUpsertOne) SetStartedAt(v time.Time) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateStartedAt() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CompetitionUpsertOne) ClearStartedAt() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *CompetitionUpsertOne) SetFinishedAt(v time.Time) *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *CompetitionUpsertOne) UpdateFinishedAt() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *CompetitionUpsertOne) ClearFinishedAt() *CompetitionUpsertOne {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearFinishedAt()
	})
}

// Exec executes the query.
func (u *CompetitionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CompetitionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CompetitionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CompetitionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entities: CompetitionUpsertOne.ID is not supported by MySQL driver. Use CompetitionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CompetitionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CompetitionCreateBulk is the builder for creating many Competition entities in bulk.
type CompetitionCreateBulk struct {
	config
	builders []*CompetitionCreate
	conflict []sql.ConflictOption
}

// Save creates the Competition entities in the database.
func (ccb *CompetitionCreateBulk) Save(ctx context.Context) ([]*Competition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Competition, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompetitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompetitionCreateBulk) SaveX(ctx context.Context) []*Competition {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompetitionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompetitionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Competition.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CompetitionUpsert) {
//			SetPause(v+v).
//		}).
//		Exec(ctx)
func (ccb *CompetitionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CompetitionUpsertBulk {
	ccb.conflict = opts
	return &CompetitionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Competition.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CompetitionCreateBulk) OnConflictColumns(columns ...string) *CompetitionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CompetitionUpsertBulk{
		create: ccb,
	}
}

// CompetitionUpsertBulk is the builder for "upsert"-ing
// a bulk of Competition nodes.
type CompetitionUpsertBulk struct {
	create *CompetitionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Competition.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(competition.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CompetitionUpsertBulk) UpdateNewValues() *CompetitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(competition.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(competition.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Competition.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CompetitionUpsertBulk) Ignore() *CompetitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CompetitionUpsertBulk) DoNothing() *CompetitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CompetitionCreateBulk.OnConflict
// documentation for more info.
func (u *CompetitionUpsertBulk) Update(set func(*CompetitionUpsert)) *CompetitionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CompetitionUpsert{UpdateSet: update})
	}))
	return u
}

// SetPause sets the "pause" field.
func (u *CompetitionUpsertBulk) SetPause(v bool) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetPause(v)
	})
}

// UpdatePause sets the "pause" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdatePause() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdatePause()
	})
}

// ClearPause clears the value of the "pause" field.
func (u *CompetitionUpsertBulk) ClearPause() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearPause()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CompetitionUpsertBulk) SetUpdateTime(v time.Time) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateUpdateTime() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *CompetitionUpsertBulk) ClearUpdateTime() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *CompetitionUpsertBulk) SetName(v string) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateName() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateName()
	})
}

// SetDisplayName sets the "display_name" field.
func (u *CompetitionUpsertBulk) SetDisplayName(v string) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetDisplayName(v)
	})
}

// UpdateDisplayName sets the "display_name" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateDisplayName() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateDisplayName()
	})
}

// SetViewableToPublic sets the "viewable_to_public" field.
func (u *CompetitionUpsertBulk) SetViewableToPublic(v bool) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetViewableToPublic(v)
	})
}

// UpdateViewableToPublic sets the "viewable_to_public" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateViewableToPublic() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateViewableToPublic()
	})
}

// ClearViewableToPublic clears the value of the "viewable_to_public" field.
func (u *CompetitionUpsertBulk) ClearViewableToPublic() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearViewableToPublic()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CompetitionUpsertBulk) SetStartedAt(v time.Time) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateStartedAt() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CompetitionUpsertBulk) ClearStartedAt() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearStartedAt()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *CompetitionUpsertBulk) SetFinishedAt(v time.Time) *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *CompetitionUpsertBulk) UpdateFinishedAt() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.UpdateFinishedAt()
	})
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (u *CompetitionUpsertBulk) ClearFinishedAt() *CompetitionUpsertBulk {
	return u.Update(func(s *CompetitionUpsert) {
		s.ClearFinishedAt()
	})
}

// Exec executes the query.
func (u *CompetitionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entities: OnConflict was set for builder %d. Set it on the CompetitionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entities: missing options for CompetitionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CompetitionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
