// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/user"
)

// CompetitionCreate is the builder for creating a Competition entity.
type CompetitionCreate struct {
	config
	mutation *CompetitionMutation
	hooks    []Hook
}

// SetHidden sets the "hidden" field.
func (cc *CompetitionCreate) SetHidden(b bool) *CompetitionCreate {
	cc.mutation.SetHidden(b)
	return cc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableHidden(b *bool) *CompetitionCreate {
	if b != nil {
		cc.SetHidden(*b)
	}
	return cc
}

// SetPause sets the "pause" field.
func (cc *CompetitionCreate) SetPause(b bool) *CompetitionCreate {
	cc.mutation.SetPause(b)
	return cc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillablePause(b *bool) *CompetitionCreate {
	if b != nil {
		cc.SetPause(*b)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CompetitionCreate) SetName(s string) *CompetitionCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDisplayName sets the "display_name" field.
func (cc *CompetitionCreate) SetDisplayName(s string) *CompetitionCreate {
	cc.mutation.SetDisplayName(s)
	return cc
}

// SetViewableToPublic sets the "viewable_to_public" field.
func (cc *CompetitionCreate) SetViewableToPublic(b bool) *CompetitionCreate {
	cc.mutation.SetViewableToPublic(b)
	return cc
}

// SetNillableViewableToPublic sets the "viewable_to_public" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableViewableToPublic(b *bool) *CompetitionCreate {
	if b != nil {
		cc.SetViewableToPublic(*b)
	}
	return cc
}

// SetToBeStartedAt sets the "to_be_started_at" field.
func (cc *CompetitionCreate) SetToBeStartedAt(t time.Time) *CompetitionCreate {
	cc.mutation.SetToBeStartedAt(t)
	return cc
}

// SetNillableToBeStartedAt sets the "to_be_started_at" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableToBeStartedAt(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetToBeStartedAt(*t)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CompetitionCreate) SetStartedAt(t time.Time) *CompetitionCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableStartedAt(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetFinishedAt sets the "finished_at" field.
func (cc *CompetitionCreate) SetFinishedAt(t time.Time) *CompetitionCreate {
	cc.mutation.SetFinishedAt(t)
	return cc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableFinishedAt(t *time.Time) *CompetitionCreate {
	if t != nil {
		cc.SetFinishedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CompetitionCreate) SetID(s string) *CompetitionCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CompetitionCreate) SetNillableID(s *string) *CompetitionCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (cc *CompetitionCreate) AddTeamIDs(ids ...string) *CompetitionCreate {
	cc.mutation.AddTeamIDs(ids...)
	return cc
}

// AddTeams adds the "teams" edges to the Team entity.
func (cc *CompetitionCreate) AddTeams(t ...*Team) *CompetitionCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTeamIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cc *CompetitionCreate) AddUserIDs(ids ...string) *CompetitionCreate {
	cc.mutation.AddUserIDs(ids...)
	return cc
}

// AddUsers adds the "users" edges to the User entity.
func (cc *CompetitionCreate) AddUsers(u ...*User) *CompetitionCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cc *CompetitionCreate) Mutation() *CompetitionMutation {
	return cc.mutation
}

// Save creates the Competition in the database.
func (cc *CompetitionCreate) Save(ctx context.Context) (*Competition, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Competition, CompetitionMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompetitionCreate) SaveX(ctx context.Context) *Competition {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompetitionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompetitionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompetitionCreate) defaults() error {
	if _, ok := cc.mutation.ID(); !ok {
		if competition.DefaultID == nil {
			return fmt.Errorf("entities: uninitialized competition.DefaultID (forgotten import entities/runtime?)")
		}
		v := competition.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompetitionCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entities: missing required field "Competition.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := competition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Competition.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`entities: missing required field "Competition.display_name"`)}
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := competition.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Competition.id": %w`, err)}
		}
	}
	return nil
}

func (cc *CompetitionCreate) sqlSave(ctx context.Context) (*Competition, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Competition.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompetitionCreate) createSpec() (*Competition, *sqlgraph.CreateSpec) {
	var (
		_node = &Competition{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(competition.Table, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Hidden(); ok {
		_spec.SetField(competition.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := cc.mutation.Pause(); ok {
		_spec.SetField(competition.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(competition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.DisplayName(); ok {
		_spec.SetField(competition.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := cc.mutation.ViewableToPublic(); ok {
		_spec.SetField(competition.FieldViewableToPublic, field.TypeBool, value)
		_node.ViewableToPublic = &value
	}
	if value, ok := cc.mutation.ToBeStartedAt(); ok {
		_spec.SetField(competition.FieldToBeStartedAt, field.TypeTime, value)
		_node.ToBeStartedAt = &value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(competition.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := cc.mutation.FinishedAt(); ok {
		_spec.SetField(competition.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if nodes := cc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompetitionCreateBulk is the builder for creating many Competition entities in bulk.
type CompetitionCreateBulk struct {
	config
	builders []*CompetitionCreate
}

// Save creates the Competition entities in the database.
func (ccb *CompetitionCreateBulk) Save(ctx context.Context) ([]*Competition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Competition, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompetitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompetitionCreateBulk) SaveX(ctx context.Context) []*Competition {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompetitionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompetitionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
