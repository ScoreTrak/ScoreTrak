// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/host"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/hostservice"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
)

// HostCreate is the builder for creating a Host entity.
type HostCreate struct {
	config
	mutation *HostMutation
	hooks    []Hook
}

// SetPause sets the "pause" field.
func (hc *HostCreate) SetPause(b bool) *HostCreate {
	hc.mutation.SetPause(b)
	return hc
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (hc *HostCreate) SetNillablePause(b *bool) *HostCreate {
	if b != nil {
		hc.SetPause(*b)
	}
	return hc
}

// SetHidden sets the "hidden" field.
func (hc *HostCreate) SetHidden(b bool) *HostCreate {
	hc.mutation.SetHidden(b)
	return hc
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (hc *HostCreate) SetNillableHidden(b *bool) *HostCreate {
	if b != nil {
		hc.SetHidden(*b)
	}
	return hc
}

// SetAddress sets the "address" field.
func (hc *HostCreate) SetAddress(s string) *HostCreate {
	hc.mutation.SetAddress(s)
	return hc
}

// SetTeamID sets the "team_id" field.
func (hc *HostCreate) SetTeamID(s string) *HostCreate {
	hc.mutation.SetTeamID(s)
	return hc
}

// SetID sets the "id" field.
func (hc *HostCreate) SetID(s string) *HostCreate {
	hc.mutation.SetID(s)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HostCreate) SetNillableID(s *string) *HostCreate {
	if s != nil {
		hc.SetID(*s)
	}
	return hc
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (hc *HostCreate) AddHostserviceIDs(ids ...string) *HostCreate {
	hc.mutation.AddHostserviceIDs(ids...)
	return hc
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (hc *HostCreate) AddHostservices(h ...*HostService) *HostCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hc.AddHostserviceIDs(ids...)
}

// SetTeam sets the "team" edge to the Team entity.
func (hc *HostCreate) SetTeam(t *Team) *HostCreate {
	return hc.SetTeamID(t.ID)
}

// Mutation returns the HostMutation object of the builder.
func (hc *HostCreate) Mutation() *HostMutation {
	return hc.mutation
}

// Save creates the Host in the database.
func (hc *HostCreate) Save(ctx context.Context) (*Host, error) {
	hc.defaults()
	return withHooks[*Host, HostMutation](ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HostCreate) SaveX(ctx context.Context) *Host {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HostCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HostCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HostCreate) defaults() {
	if _, ok := hc.mutation.Hidden(); !ok {
		v := host.DefaultHidden
		hc.mutation.SetHidden(v)
	}
	if _, ok := hc.mutation.ID(); !ok {
		v := host.DefaultID()
		hc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HostCreate) check() error {
	if _, ok := hc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`entities: missing required field "Host.address"`)}
	}
	if _, ok := hc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`entities: missing required field "Host.team_id"`)}
	}
	if v, ok := hc.mutation.ID(); ok {
		if err := host.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entities: validator failed for field "Host.id": %w`, err)}
		}
	}
	if _, ok := hc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`entities: missing required edge "Host.team"`)}
	}
	return nil
}

func (hc *HostCreate) sqlSave(ctx context.Context) (*Host, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Host.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HostCreate) createSpec() (*Host, *sqlgraph.CreateSpec) {
	var (
		_node = &Host{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(host.Table, sqlgraph.NewFieldSpec(host.FieldID, field.TypeString))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Pause(); ok {
		_spec.SetField(host.FieldPause, field.TypeBool, value)
		_node.Pause = value
	}
	if value, ok := hc.mutation.Hidden(); ok {
		_spec.SetField(host.FieldHidden, field.TypeBool, value)
		_node.Hidden = value
	}
	if value, ok := hc.mutation.Address(); ok {
		_spec.SetField(host.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := hc.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.TeamTable,
			Columns: []string{host.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostCreateBulk is the builder for creating many Host entities in bulk.
type HostCreateBulk struct {
	config
	builders []*HostCreate
}

// Save creates the Host entities in the database.
func (hcb *HostCreateBulk) Save(ctx context.Context) ([]*Host, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Host, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HostCreateBulk) SaveX(ctx context.Context) []*Host {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HostCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HostCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
