// Code generated by ent, DO NOT EDIT.

package property

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldKey, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldValue, v))
}

// HostServiceID applies equality check predicate on the "host_service_id" field. It's identical to HostServiceIDEQ.
func HostServiceID(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldHostServiceID, v))
}

// TeamID applies equality check predicate on the "team_id" field. It's identical to TeamIDEQ.
func TeamID(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldTeamID, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.Property {
	return predicate.Property(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldKey, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.Property {
	return predicate.Property(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldValue, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldStatus, vs...))
}

// HostServiceIDEQ applies the EQ predicate on the "host_service_id" field.
func HostServiceIDEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldHostServiceID, v))
}

// HostServiceIDNEQ applies the NEQ predicate on the "host_service_id" field.
func HostServiceIDNEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldHostServiceID, v))
}

// HostServiceIDIn applies the In predicate on the "host_service_id" field.
func HostServiceIDIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldHostServiceID, vs...))
}

// HostServiceIDNotIn applies the NotIn predicate on the "host_service_id" field.
func HostServiceIDNotIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldHostServiceID, vs...))
}

// HostServiceIDGT applies the GT predicate on the "host_service_id" field.
func HostServiceIDGT(v string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldHostServiceID, v))
}

// HostServiceIDGTE applies the GTE predicate on the "host_service_id" field.
func HostServiceIDGTE(v string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldHostServiceID, v))
}

// HostServiceIDLT applies the LT predicate on the "host_service_id" field.
func HostServiceIDLT(v string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldHostServiceID, v))
}

// HostServiceIDLTE applies the LTE predicate on the "host_service_id" field.
func HostServiceIDLTE(v string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldHostServiceID, v))
}

// HostServiceIDContains applies the Contains predicate on the "host_service_id" field.
func HostServiceIDContains(v string) predicate.Property {
	return predicate.Property(sql.FieldContains(FieldHostServiceID, v))
}

// HostServiceIDHasPrefix applies the HasPrefix predicate on the "host_service_id" field.
func HostServiceIDHasPrefix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasPrefix(FieldHostServiceID, v))
}

// HostServiceIDHasSuffix applies the HasSuffix predicate on the "host_service_id" field.
func HostServiceIDHasSuffix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasSuffix(FieldHostServiceID, v))
}

// HostServiceIDEqualFold applies the EqualFold predicate on the "host_service_id" field.
func HostServiceIDEqualFold(v string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldHostServiceID, v))
}

// HostServiceIDContainsFold applies the ContainsFold predicate on the "host_service_id" field.
func HostServiceIDContainsFold(v string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldHostServiceID, v))
}

// TeamIDEQ applies the EQ predicate on the "team_id" field.
func TeamIDEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldEQ(FieldTeamID, v))
}

// TeamIDNEQ applies the NEQ predicate on the "team_id" field.
func TeamIDNEQ(v string) predicate.Property {
	return predicate.Property(sql.FieldNEQ(FieldTeamID, v))
}

// TeamIDIn applies the In predicate on the "team_id" field.
func TeamIDIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldIn(FieldTeamID, vs...))
}

// TeamIDNotIn applies the NotIn predicate on the "team_id" field.
func TeamIDNotIn(vs ...string) predicate.Property {
	return predicate.Property(sql.FieldNotIn(FieldTeamID, vs...))
}

// TeamIDGT applies the GT predicate on the "team_id" field.
func TeamIDGT(v string) predicate.Property {
	return predicate.Property(sql.FieldGT(FieldTeamID, v))
}

// TeamIDGTE applies the GTE predicate on the "team_id" field.
func TeamIDGTE(v string) predicate.Property {
	return predicate.Property(sql.FieldGTE(FieldTeamID, v))
}

// TeamIDLT applies the LT predicate on the "team_id" field.
func TeamIDLT(v string) predicate.Property {
	return predicate.Property(sql.FieldLT(FieldTeamID, v))
}

// TeamIDLTE applies the LTE predicate on the "team_id" field.
func TeamIDLTE(v string) predicate.Property {
	return predicate.Property(sql.FieldLTE(FieldTeamID, v))
}

// TeamIDContains applies the Contains predicate on the "team_id" field.
func TeamIDContains(v string) predicate.Property {
	return predicate.Property(sql.FieldContains(FieldTeamID, v))
}

// TeamIDHasPrefix applies the HasPrefix predicate on the "team_id" field.
func TeamIDHasPrefix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasPrefix(FieldTeamID, v))
}

// TeamIDHasSuffix applies the HasSuffix predicate on the "team_id" field.
func TeamIDHasSuffix(v string) predicate.Property {
	return predicate.Property(sql.FieldHasSuffix(FieldTeamID, v))
}

// TeamIDEqualFold applies the EqualFold predicate on the "team_id" field.
func TeamIDEqualFold(v string) predicate.Property {
	return predicate.Property(sql.FieldEqualFold(FieldTeamID, v))
}

// TeamIDContainsFold applies the ContainsFold predicate on the "team_id" field.
func TeamIDContainsFold(v string) predicate.Property {
	return predicate.Property(sql.FieldContainsFold(FieldTeamID, v))
}

// HasHostservice applies the HasEdge predicate on the "hostservice" edge.
func HasHostservice() predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostserviceTable, HostserviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostserviceWith applies the HasEdge predicate on the "hostservice" edge with a given conditions (other predicates).
func HasHostserviceWith(preds ...predicate.HostService) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := newHostserviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Property) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Property) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Property) predicate.Property {
	return predicate.Property(func(s *sql.Selector) {
		p(s.Not())
	})
}
