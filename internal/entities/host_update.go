// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/scoretrak/scoretrak/internal/entities/host"
	"github.com/scoretrak/scoretrak/internal/entities/hostservice"
	"github.com/scoretrak/scoretrak/internal/entities/predicate"
	"github.com/scoretrak/scoretrak/internal/entities/team"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetPause sets the "pause" field.
func (hu *HostUpdate) SetPause(b bool) *HostUpdate {
	hu.mutation.SetPause(b)
	return hu
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (hu *HostUpdate) SetNillablePause(b *bool) *HostUpdate {
	if b != nil {
		hu.SetPause(*b)
	}
	return hu
}

// ClearPause clears the value of the "pause" field.
func (hu *HostUpdate) ClearPause() *HostUpdate {
	hu.mutation.ClearPause()
	return hu
}

// SetHidden sets the "hidden" field.
func (hu *HostUpdate) SetHidden(b bool) *HostUpdate {
	hu.mutation.SetHidden(b)
	return hu
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (hu *HostUpdate) SetNillableHidden(b *bool) *HostUpdate {
	if b != nil {
		hu.SetHidden(*b)
	}
	return hu
}

// ClearHidden clears the value of the "hidden" field.
func (hu *HostUpdate) ClearHidden() *HostUpdate {
	hu.mutation.ClearHidden()
	return hu
}

// SetUpdateTime sets the "update_time" field.
func (hu *HostUpdate) SetUpdateTime(t time.Time) *HostUpdate {
	hu.mutation.SetUpdateTime(t)
	return hu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (hu *HostUpdate) ClearUpdateTime() *HostUpdate {
	hu.mutation.ClearUpdateTime()
	return hu
}

// SetAddress sets the "address" field.
func (hu *HostUpdate) SetAddress(s string) *HostUpdate {
	hu.mutation.SetAddress(s)
	return hu
}

// SetTeamID sets the "team_id" field.
func (hu *HostUpdate) SetTeamID(s string) *HostUpdate {
	hu.mutation.SetTeamID(s)
	return hu
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (hu *HostUpdate) AddHostserviceIDs(ids ...string) *HostUpdate {
	hu.mutation.AddHostserviceIDs(ids...)
	return hu
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (hu *HostUpdate) AddHostservices(h ...*HostService) *HostUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddHostserviceIDs(ids...)
}

// SetTeam sets the "team" edge to the Team entity.
func (hu *HostUpdate) SetTeam(t *Team) *HostUpdate {
	return hu.SetTeamID(t.ID)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearHostservices clears all "hostservices" edges to the HostService entity.
func (hu *HostUpdate) ClearHostservices() *HostUpdate {
	hu.mutation.ClearHostservices()
	return hu
}

// RemoveHostserviceIDs removes the "hostservices" edge to HostService entities by IDs.
func (hu *HostUpdate) RemoveHostserviceIDs(ids ...string) *HostUpdate {
	hu.mutation.RemoveHostserviceIDs(ids...)
	return hu
}

// RemoveHostservices removes "hostservices" edges to HostService entities.
func (hu *HostUpdate) RemoveHostservices(h ...*HostService) *HostUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveHostserviceIDs(ids...)
}

// ClearTeam clears the "team" edge to the Team entity.
func (hu *HostUpdate) ClearTeam() *HostUpdate {
	hu.mutation.ClearTeam()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks[int, HostMutation](ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HostUpdate) defaults() {
	if _, ok := hu.mutation.UpdateTime(); !ok && !hu.mutation.UpdateTimeCleared() {
		v := host.UpdateDefaultUpdateTime()
		hu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HostUpdate) check() error {
	if _, ok := hu.mutation.TeamID(); hu.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Host.team"`)
	}
	return nil
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeString))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Pause(); ok {
		_spec.SetField(host.FieldPause, field.TypeBool, value)
	}
	if hu.mutation.PauseCleared() {
		_spec.ClearField(host.FieldPause, field.TypeBool)
	}
	if value, ok := hu.mutation.Hidden(); ok {
		_spec.SetField(host.FieldHidden, field.TypeBool, value)
	}
	if hu.mutation.HiddenCleared() {
		_spec.ClearField(host.FieldHidden, field.TypeBool)
	}
	if hu.mutation.CreateTimeCleared() {
		_spec.ClearField(host.FieldCreateTime, field.TypeTime)
	}
	if value, ok := hu.mutation.UpdateTime(); ok {
		_spec.SetField(host.FieldUpdateTime, field.TypeTime, value)
	}
	if hu.mutation.UpdateTimeCleared() {
		_spec.ClearField(host.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := hu.mutation.Address(); ok {
		_spec.SetField(host.FieldAddress, field.TypeString, value)
	}
	if hu.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedHostservicesIDs(); len(nodes) > 0 && !hu.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if hu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.TeamTable,
			Columns: []string{host.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.TeamTable,
			Columns: []string{host.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetPause sets the "pause" field.
func (huo *HostUpdateOne) SetPause(b bool) *HostUpdateOne {
	huo.mutation.SetPause(b)
	return huo
}

// SetNillablePause sets the "pause" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillablePause(b *bool) *HostUpdateOne {
	if b != nil {
		huo.SetPause(*b)
	}
	return huo
}

// ClearPause clears the value of the "pause" field.
func (huo *HostUpdateOne) ClearPause() *HostUpdateOne {
	huo.mutation.ClearPause()
	return huo
}

// SetHidden sets the "hidden" field.
func (huo *HostUpdateOne) SetHidden(b bool) *HostUpdateOne {
	huo.mutation.SetHidden(b)
	return huo
}

// SetNillableHidden sets the "hidden" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableHidden(b *bool) *HostUpdateOne {
	if b != nil {
		huo.SetHidden(*b)
	}
	return huo
}

// ClearHidden clears the value of the "hidden" field.
func (huo *HostUpdateOne) ClearHidden() *HostUpdateOne {
	huo.mutation.ClearHidden()
	return huo
}

// SetUpdateTime sets the "update_time" field.
func (huo *HostUpdateOne) SetUpdateTime(t time.Time) *HostUpdateOne {
	huo.mutation.SetUpdateTime(t)
	return huo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (huo *HostUpdateOne) ClearUpdateTime() *HostUpdateOne {
	huo.mutation.ClearUpdateTime()
	return huo
}

// SetAddress sets the "address" field.
func (huo *HostUpdateOne) SetAddress(s string) *HostUpdateOne {
	huo.mutation.SetAddress(s)
	return huo
}

// SetTeamID sets the "team_id" field.
func (huo *HostUpdateOne) SetTeamID(s string) *HostUpdateOne {
	huo.mutation.SetTeamID(s)
	return huo
}

// AddHostserviceIDs adds the "hostservices" edge to the HostService entity by IDs.
func (huo *HostUpdateOne) AddHostserviceIDs(ids ...string) *HostUpdateOne {
	huo.mutation.AddHostserviceIDs(ids...)
	return huo
}

// AddHostservices adds the "hostservices" edges to the HostService entity.
func (huo *HostUpdateOne) AddHostservices(h ...*HostService) *HostUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddHostserviceIDs(ids...)
}

// SetTeam sets the "team" edge to the Team entity.
func (huo *HostUpdateOne) SetTeam(t *Team) *HostUpdateOne {
	return huo.SetTeamID(t.ID)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearHostservices clears all "hostservices" edges to the HostService entity.
func (huo *HostUpdateOne) ClearHostservices() *HostUpdateOne {
	huo.mutation.ClearHostservices()
	return huo
}

// RemoveHostserviceIDs removes the "hostservices" edge to HostService entities by IDs.
func (huo *HostUpdateOne) RemoveHostserviceIDs(ids ...string) *HostUpdateOne {
	huo.mutation.RemoveHostserviceIDs(ids...)
	return huo
}

// RemoveHostservices removes "hostservices" edges to HostService entities.
func (huo *HostUpdateOne) RemoveHostservices(h ...*HostService) *HostUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveHostserviceIDs(ids...)
}

// ClearTeam clears the "team" edge to the Team entity.
func (huo *HostUpdateOne) ClearTeam() *HostUpdateOne {
	huo.mutation.ClearTeam()
	return huo
}

// Where appends a list predicates to the HostUpdate builder.
func (huo *HostUpdateOne) Where(ps ...predicate.Host) *HostUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	huo.defaults()
	return withHooks[*Host, HostMutation](ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HostUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdateTime(); !ok && !huo.mutation.UpdateTimeCleared() {
		v := host.UpdateDefaultUpdateTime()
		huo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HostUpdateOne) check() error {
	if _, ok := huo.mutation.TeamID(); huo.mutation.TeamCleared() && !ok {
		return errors.New(`entities: clearing a required unique edge "Host.team"`)
	}
	return nil
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeString))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Pause(); ok {
		_spec.SetField(host.FieldPause, field.TypeBool, value)
	}
	if huo.mutation.PauseCleared() {
		_spec.ClearField(host.FieldPause, field.TypeBool)
	}
	if value, ok := huo.mutation.Hidden(); ok {
		_spec.SetField(host.FieldHidden, field.TypeBool, value)
	}
	if huo.mutation.HiddenCleared() {
		_spec.ClearField(host.FieldHidden, field.TypeBool)
	}
	if huo.mutation.CreateTimeCleared() {
		_spec.ClearField(host.FieldCreateTime, field.TypeTime)
	}
	if value, ok := huo.mutation.UpdateTime(); ok {
		_spec.SetField(host.FieldUpdateTime, field.TypeTime, value)
	}
	if huo.mutation.UpdateTimeCleared() {
		_spec.ClearField(host.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := huo.mutation.Address(); ok {
		_spec.SetField(host.FieldAddress, field.TypeString, value)
	}
	if huo.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedHostservicesIDs(); len(nodes) > 0 && !huo.mutation.HostservicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostservicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostservicesTable,
			Columns: []string{host.HostservicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if huo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.TeamTable,
			Columns: []string{host.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   host.TeamTable,
			Columns: []string{host.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
