// Code generated by ent, DO NOT EDIT.

package hostservicereport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hostservicereport type in the database.
	Label = "host_service_report"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldPassing holds the string denoting the passing field in the database.
	FieldPassing = "passing"
	// FieldLatestCheckTime holds the string denoting the latest_check_time field in the database.
	FieldLatestCheckTime = "latest_check_time"
	// FieldHostServiceID holds the string denoting the host_service_id field in the database.
	FieldHostServiceID = "host_service_id"
	// FieldServiceID holds the string denoting the service_id field in the database.
	FieldServiceID = "service_id"
	// FieldTeamID holds the string denoting the team_id field in the database.
	FieldTeamID = "team_id"
	// FieldTeamReportID holds the string denoting the team_report_id field in the database.
	FieldTeamReportID = "team_report_id"
	// EdgeHostservice holds the string denoting the hostservice edge name in mutations.
	EdgeHostservice = "hostservice"
	// EdgeService holds the string denoting the service edge name in mutations.
	EdgeService = "service"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeTeamreport holds the string denoting the teamreport edge name in mutations.
	EdgeTeamreport = "teamreport"
	// Table holds the table name of the hostservicereport in the database.
	Table = "host_service_reports"
	// HostserviceTable is the table that holds the hostservice relation/edge.
	HostserviceTable = "host_service_reports"
	// HostserviceInverseTable is the table name for the HostService entity.
	// It exists in this package in order to avoid circular dependency with the "hostservice" package.
	HostserviceInverseTable = "host_services"
	// HostserviceColumn is the table column denoting the hostservice relation/edge.
	HostserviceColumn = "host_service_id"
	// ServiceTable is the table that holds the service relation/edge.
	ServiceTable = "host_service_reports"
	// ServiceInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceInverseTable = "services"
	// ServiceColumn is the table column denoting the service relation/edge.
	ServiceColumn = "service_id"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "host_service_reports"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_id"
	// TeamreportTable is the table that holds the teamreport relation/edge.
	TeamreportTable = "host_service_reports"
	// TeamreportInverseTable is the table name for the TeamReport entity.
	// It exists in this package in order to avoid circular dependency with the "teamreport" package.
	TeamreportInverseTable = "team_reports"
	// TeamreportColumn is the table column denoting the teamreport relation/edge.
	TeamreportColumn = "team_report_id"
)

// Columns holds all SQL columns for hostservicereport fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldPoints,
	FieldPassing,
	FieldLatestCheckTime,
	FieldHostServiceID,
	FieldServiceID,
	FieldTeamID,
	FieldTeamReportID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the HostServiceReport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByPoints orders the results by the points field.
func ByPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoints, opts...).ToFunc()
}

// ByPassing orders the results by the passing field.
func ByPassing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassing, opts...).ToFunc()
}

// ByLatestCheckTime orders the results by the latest_check_time field.
func ByLatestCheckTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatestCheckTime, opts...).ToFunc()
}

// ByHostServiceID orders the results by the host_service_id field.
func ByHostServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostServiceID, opts...).ToFunc()
}

// ByServiceID orders the results by the service_id field.
func ByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServiceID, opts...).ToFunc()
}

// ByTeamID orders the results by the team_id field.
func ByTeamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamID, opts...).ToFunc()
}

// ByTeamReportID orders the results by the team_report_id field.
func ByTeamReportID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeamReportID, opts...).ToFunc()
}

// ByHostserviceField orders the results by hostservice field.
func ByHostserviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostserviceStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceField orders the results by service field.
func ByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByTeamreportField orders the results by teamreport field.
func ByTeamreportField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamreportStep(), sql.OrderByField(field, opts...))
	}
}
func newHostserviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostserviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, HostserviceTable, HostserviceColumn),
	)
}
func newServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ServiceTable, ServiceColumn),
	)
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newTeamreportStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamreportInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamreportTable, TeamreportColumn),
	)
}
