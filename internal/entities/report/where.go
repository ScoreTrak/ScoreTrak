// Code generated by ent, DO NOT EDIT.

package report

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldID, id))
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldLog, v))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldError, v))
}

// CompetitionID applies equality check predicate on the "competition_id" field. It's identical to CompetitionIDEQ.
func CompetitionID(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCompetitionID, v))
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldLog, v))
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldLog, v))
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldLog, vs...))
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldLog, vs...))
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldLog, v))
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldLog, v))
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldLog, v))
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldLog, v))
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldLog, v))
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldLog, v))
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldLog, v))
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldLog, v))
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldLog, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldError, v))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldError, v))
}

// CompetitionIDEQ applies the EQ predicate on the "competition_id" field.
func CompetitionIDEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldEQ(FieldCompetitionID, v))
}

// CompetitionIDNEQ applies the NEQ predicate on the "competition_id" field.
func CompetitionIDNEQ(v string) predicate.Report {
	return predicate.Report(sql.FieldNEQ(FieldCompetitionID, v))
}

// CompetitionIDIn applies the In predicate on the "competition_id" field.
func CompetitionIDIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldIn(FieldCompetitionID, vs...))
}

// CompetitionIDNotIn applies the NotIn predicate on the "competition_id" field.
func CompetitionIDNotIn(vs ...string) predicate.Report {
	return predicate.Report(sql.FieldNotIn(FieldCompetitionID, vs...))
}

// CompetitionIDGT applies the GT predicate on the "competition_id" field.
func CompetitionIDGT(v string) predicate.Report {
	return predicate.Report(sql.FieldGT(FieldCompetitionID, v))
}

// CompetitionIDGTE applies the GTE predicate on the "competition_id" field.
func CompetitionIDGTE(v string) predicate.Report {
	return predicate.Report(sql.FieldGTE(FieldCompetitionID, v))
}

// CompetitionIDLT applies the LT predicate on the "competition_id" field.
func CompetitionIDLT(v string) predicate.Report {
	return predicate.Report(sql.FieldLT(FieldCompetitionID, v))
}

// CompetitionIDLTE applies the LTE predicate on the "competition_id" field.
func CompetitionIDLTE(v string) predicate.Report {
	return predicate.Report(sql.FieldLTE(FieldCompetitionID, v))
}

// CompetitionIDContains applies the Contains predicate on the "competition_id" field.
func CompetitionIDContains(v string) predicate.Report {
	return predicate.Report(sql.FieldContains(FieldCompetitionID, v))
}

// CompetitionIDHasPrefix applies the HasPrefix predicate on the "competition_id" field.
func CompetitionIDHasPrefix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasPrefix(FieldCompetitionID, v))
}

// CompetitionIDHasSuffix applies the HasSuffix predicate on the "competition_id" field.
func CompetitionIDHasSuffix(v string) predicate.Report {
	return predicate.Report(sql.FieldHasSuffix(FieldCompetitionID, v))
}

// CompetitionIDEqualFold applies the EqualFold predicate on the "competition_id" field.
func CompetitionIDEqualFold(v string) predicate.Report {
	return predicate.Report(sql.FieldEqualFold(FieldCompetitionID, v))
}

// CompetitionIDContainsFold applies the ContainsFold predicate on the "competition_id" field.
func CompetitionIDContainsFold(v string) predicate.Report {
	return predicate.Report(sql.FieldContainsFold(FieldCompetitionID, v))
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		step := newCompetitionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Report) predicate.Report {
	return predicate.Report(func(s *sql.Selector) {
		p(s.Not())
	})
}
