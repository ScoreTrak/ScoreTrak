// Code generated by ent, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/competition"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/predicate"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/team"
	"github.com/ScoreTrak/ScoreTrak/internal/entities/user"
)

// CompetitionUpdate is the builder for updating Competition entities.
type CompetitionUpdate struct {
	config
	hooks    []Hook
	mutation *CompetitionMutation
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cu *CompetitionUpdate) Where(ps ...predicate.Competition) *CompetitionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CompetitionUpdate) SetUpdateTime(t time.Time) *CompetitionUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetHidden sets the "hidden" field.
func (cu *CompetitionUpdate) SetHidden(b bool) *CompetitionUpdate {
	cu.mutation.SetHidden(b)
	return cu
}

// SetPause sets the "pause" field.
func (cu *CompetitionUpdate) SetPause(b bool) *CompetitionUpdate {
	cu.mutation.SetPause(b)
	return cu
}

// SetName sets the "name" field.
func (cu *CompetitionUpdate) SetName(s string) *CompetitionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetDisplayName sets the "display_name" field.
func (cu *CompetitionUpdate) SetDisplayName(s string) *CompetitionUpdate {
	cu.mutation.SetDisplayName(s)
	return cu
}

// SetRoundDuration sets the "round_duration" field.
func (cu *CompetitionUpdate) SetRoundDuration(f float64) *CompetitionUpdate {
	cu.mutation.ResetRoundDuration()
	cu.mutation.SetRoundDuration(f)
	return cu
}

// AddRoundDuration adds f to the "round_duration" field.
func (cu *CompetitionUpdate) AddRoundDuration(f float64) *CompetitionUpdate {
	cu.mutation.AddRoundDuration(f)
	return cu
}

// SetToBeStartedAt sets the "to_be_started_at" field.
func (cu *CompetitionUpdate) SetToBeStartedAt(t time.Time) *CompetitionUpdate {
	cu.mutation.SetToBeStartedAt(t)
	return cu
}

// SetNillableToBeStartedAt sets the "to_be_started_at" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableToBeStartedAt(t *time.Time) *CompetitionUpdate {
	if t != nil {
		cu.SetToBeStartedAt(*t)
	}
	return cu
}

// ClearToBeStartedAt clears the value of the "to_be_started_at" field.
func (cu *CompetitionUpdate) ClearToBeStartedAt() *CompetitionUpdate {
	cu.mutation.ClearToBeStartedAt()
	return cu
}

// SetStartedAt sets the "started_at" field.
func (cu *CompetitionUpdate) SetStartedAt(t time.Time) *CompetitionUpdate {
	cu.mutation.SetStartedAt(t)
	return cu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableStartedAt(t *time.Time) *CompetitionUpdate {
	if t != nil {
		cu.SetStartedAt(*t)
	}
	return cu
}

// ClearStartedAt clears the value of the "started_at" field.
func (cu *CompetitionUpdate) ClearStartedAt() *CompetitionUpdate {
	cu.mutation.ClearStartedAt()
	return cu
}

// SetFinishedAt sets the "finished_at" field.
func (cu *CompetitionUpdate) SetFinishedAt(t time.Time) *CompetitionUpdate {
	cu.mutation.SetFinishedAt(t)
	return cu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (cu *CompetitionUpdate) SetNillableFinishedAt(t *time.Time) *CompetitionUpdate {
	if t != nil {
		cu.SetFinishedAt(*t)
	}
	return cu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (cu *CompetitionUpdate) ClearFinishedAt() *CompetitionUpdate {
	cu.mutation.ClearFinishedAt()
	return cu
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (cu *CompetitionUpdate) AddTeamIDs(ids ...int) *CompetitionUpdate {
	cu.mutation.AddTeamIDs(ids...)
	return cu
}

// AddTeams adds the "teams" edges to the Team entity.
func (cu *CompetitionUpdate) AddTeams(t ...*Team) *CompetitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTeamIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cu *CompetitionUpdate) AddUserIDs(ids ...int) *CompetitionUpdate {
	cu.mutation.AddUserIDs(ids...)
	return cu
}

// AddUsers adds the "users" edges to the User entity.
func (cu *CompetitionUpdate) AddUsers(u ...*User) *CompetitionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cu *CompetitionUpdate) Mutation() *CompetitionMutation {
	return cu.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (cu *CompetitionUpdate) ClearTeams() *CompetitionUpdate {
	cu.mutation.ClearTeams()
	return cu
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (cu *CompetitionUpdate) RemoveTeamIDs(ids ...int) *CompetitionUpdate {
	cu.mutation.RemoveTeamIDs(ids...)
	return cu
}

// RemoveTeams removes "teams" edges to Team entities.
func (cu *CompetitionUpdate) RemoveTeams(t ...*Team) *CompetitionUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTeamIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cu *CompetitionUpdate) ClearUsers() *CompetitionUpdate {
	cu.mutation.ClearUsers()
	return cu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cu *CompetitionUpdate) RemoveUserIDs(ids ...int) *CompetitionUpdate {
	cu.mutation.RemoveUserIDs(ids...)
	return cu
}

// RemoveUsers removes "users" edges to User entities.
func (cu *CompetitionUpdate) RemoveUsers(u ...*User) *CompetitionUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompetitionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks[int, CompetitionMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompetitionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompetitionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompetitionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompetitionUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := competition.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompetitionUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := competition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Competition.name": %w`, err)}
		}
	}
	return nil
}

func (cu *CompetitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(competition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Hidden(); ok {
		_spec.SetField(competition.FieldHidden, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Pause(); ok {
		_spec.SetField(competition.FieldPause, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(competition.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.DisplayName(); ok {
		_spec.SetField(competition.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cu.mutation.RoundDuration(); ok {
		_spec.SetField(competition.FieldRoundDuration, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedRoundDuration(); ok {
		_spec.AddField(competition.FieldRoundDuration, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.ToBeStartedAt(); ok {
		_spec.SetField(competition.FieldToBeStartedAt, field.TypeTime, value)
	}
	if cu.mutation.ToBeStartedAtCleared() {
		_spec.ClearField(competition.FieldToBeStartedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.StartedAt(); ok {
		_spec.SetField(competition.FieldStartedAt, field.TypeTime, value)
	}
	if cu.mutation.StartedAtCleared() {
		_spec.ClearField(competition.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.FinishedAt(); ok {
		_spec.SetField(competition.FieldFinishedAt, field.TypeTime, value)
	}
	if cu.mutation.FinishedAtCleared() {
		_spec.ClearField(competition.FieldFinishedAt, field.TypeTime)
	}
	if cu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !cu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompetitionUpdateOne is the builder for updating a single Competition entity.
type CompetitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompetitionMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CompetitionUpdateOne) SetUpdateTime(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetHidden sets the "hidden" field.
func (cuo *CompetitionUpdateOne) SetHidden(b bool) *CompetitionUpdateOne {
	cuo.mutation.SetHidden(b)
	return cuo
}

// SetPause sets the "pause" field.
func (cuo *CompetitionUpdateOne) SetPause(b bool) *CompetitionUpdateOne {
	cuo.mutation.SetPause(b)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CompetitionUpdateOne) SetName(s string) *CompetitionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetDisplayName sets the "display_name" field.
func (cuo *CompetitionUpdateOne) SetDisplayName(s string) *CompetitionUpdateOne {
	cuo.mutation.SetDisplayName(s)
	return cuo
}

// SetRoundDuration sets the "round_duration" field.
func (cuo *CompetitionUpdateOne) SetRoundDuration(f float64) *CompetitionUpdateOne {
	cuo.mutation.ResetRoundDuration()
	cuo.mutation.SetRoundDuration(f)
	return cuo
}

// AddRoundDuration adds f to the "round_duration" field.
func (cuo *CompetitionUpdateOne) AddRoundDuration(f float64) *CompetitionUpdateOne {
	cuo.mutation.AddRoundDuration(f)
	return cuo
}

// SetToBeStartedAt sets the "to_be_started_at" field.
func (cuo *CompetitionUpdateOne) SetToBeStartedAt(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetToBeStartedAt(t)
	return cuo
}

// SetNillableToBeStartedAt sets the "to_be_started_at" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableToBeStartedAt(t *time.Time) *CompetitionUpdateOne {
	if t != nil {
		cuo.SetToBeStartedAt(*t)
	}
	return cuo
}

// ClearToBeStartedAt clears the value of the "to_be_started_at" field.
func (cuo *CompetitionUpdateOne) ClearToBeStartedAt() *CompetitionUpdateOne {
	cuo.mutation.ClearToBeStartedAt()
	return cuo
}

// SetStartedAt sets the "started_at" field.
func (cuo *CompetitionUpdateOne) SetStartedAt(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetStartedAt(t)
	return cuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableStartedAt(t *time.Time) *CompetitionUpdateOne {
	if t != nil {
		cuo.SetStartedAt(*t)
	}
	return cuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (cuo *CompetitionUpdateOne) ClearStartedAt() *CompetitionUpdateOne {
	cuo.mutation.ClearStartedAt()
	return cuo
}

// SetFinishedAt sets the "finished_at" field.
func (cuo *CompetitionUpdateOne) SetFinishedAt(t time.Time) *CompetitionUpdateOne {
	cuo.mutation.SetFinishedAt(t)
	return cuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (cuo *CompetitionUpdateOne) SetNillableFinishedAt(t *time.Time) *CompetitionUpdateOne {
	if t != nil {
		cuo.SetFinishedAt(*t)
	}
	return cuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (cuo *CompetitionUpdateOne) ClearFinishedAt() *CompetitionUpdateOne {
	cuo.mutation.ClearFinishedAt()
	return cuo
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (cuo *CompetitionUpdateOne) AddTeamIDs(ids ...int) *CompetitionUpdateOne {
	cuo.mutation.AddTeamIDs(ids...)
	return cuo
}

// AddTeams adds the "teams" edges to the Team entity.
func (cuo *CompetitionUpdateOne) AddTeams(t ...*Team) *CompetitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTeamIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (cuo *CompetitionUpdateOne) AddUserIDs(ids ...int) *CompetitionUpdateOne {
	cuo.mutation.AddUserIDs(ids...)
	return cuo
}

// AddUsers adds the "users" edges to the User entity.
func (cuo *CompetitionUpdateOne) AddUsers(u ...*User) *CompetitionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserIDs(ids...)
}

// Mutation returns the CompetitionMutation object of the builder.
func (cuo *CompetitionUpdateOne) Mutation() *CompetitionMutation {
	return cuo.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (cuo *CompetitionUpdateOne) ClearTeams() *CompetitionUpdateOne {
	cuo.mutation.ClearTeams()
	return cuo
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveTeamIDs(ids ...int) *CompetitionUpdateOne {
	cuo.mutation.RemoveTeamIDs(ids...)
	return cuo
}

// RemoveTeams removes "teams" edges to Team entities.
func (cuo *CompetitionUpdateOne) RemoveTeams(t ...*Team) *CompetitionUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTeamIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (cuo *CompetitionUpdateOne) ClearUsers() *CompetitionUpdateOne {
	cuo.mutation.ClearUsers()
	return cuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (cuo *CompetitionUpdateOne) RemoveUserIDs(ids ...int) *CompetitionUpdateOne {
	cuo.mutation.RemoveUserIDs(ids...)
	return cuo
}

// RemoveUsers removes "users" edges to User entities.
func (cuo *CompetitionUpdateOne) RemoveUsers(u ...*User) *CompetitionUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the CompetitionUpdate builder.
func (cuo *CompetitionUpdateOne) Where(ps ...predicate.Competition) *CompetitionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompetitionUpdateOne) Select(field string, fields ...string) *CompetitionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Competition entity.
func (cuo *CompetitionUpdateOne) Save(ctx context.Context) (*Competition, error) {
	cuo.defaults()
	return withHooks[*Competition, CompetitionMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) SaveX(ctx context.Context) *Competition {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompetitionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompetitionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompetitionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := competition.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompetitionUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := competition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entities: validator failed for field "Competition.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompetitionUpdateOne) sqlSave(ctx context.Context) (_node *Competition, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(competition.Table, competition.Columns, sqlgraph.NewFieldSpec(competition.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Competition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, competition.FieldID)
		for _, f := range fields {
			if !competition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != competition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(competition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Hidden(); ok {
		_spec.SetField(competition.FieldHidden, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Pause(); ok {
		_spec.SetField(competition.FieldPause, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(competition.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.DisplayName(); ok {
		_spec.SetField(competition.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.RoundDuration(); ok {
		_spec.SetField(competition.FieldRoundDuration, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedRoundDuration(); ok {
		_spec.AddField(competition.FieldRoundDuration, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.ToBeStartedAt(); ok {
		_spec.SetField(competition.FieldToBeStartedAt, field.TypeTime, value)
	}
	if cuo.mutation.ToBeStartedAtCleared() {
		_spec.ClearField(competition.FieldToBeStartedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.StartedAt(); ok {
		_spec.SetField(competition.FieldStartedAt, field.TypeTime, value)
	}
	if cuo.mutation.StartedAtCleared() {
		_spec.ClearField(competition.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.FinishedAt(); ok {
		_spec.SetField(competition.FieldFinishedAt, field.TypeTime, value)
	}
	if cuo.mutation.FinishedAtCleared() {
		_spec.ClearField(competition.FieldFinishedAt, field.TypeTime)
	}
	if cuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !cuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   competition.TeamsTable,
			Columns: []string{competition.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !cuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   competition.UsersTable,
			Columns: competition.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Competition{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{competition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
