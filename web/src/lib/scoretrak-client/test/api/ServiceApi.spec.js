/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EntSchemaApi);
  }
}(this, function(expect, EntSchemaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EntSchemaApi.ServiceApi();
  });

  describe('(package)', function() {
    describe('ServiceApi', function() {
      describe('createService', function() {
        it('should call createService successfully', function(done) {
          // TODO: uncomment, update parameter values for createService call and complete the assertions
          /*

          instance.createService(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EntSchemaApi.ServiceCreate);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteService', function() {
        it('should call deleteService successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteService call
          /*

          instance.deleteService(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listService', function() {
        it('should call listService successfully', function(done) {
          // TODO: uncomment, update parameter values for listService call and complete the assertions
          /*
          var opts = {};

          instance.listService(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EntSchemaApi.ServiceList);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listServiceChecks', function() {
        it('should call listServiceChecks successfully', function(done) {
          // TODO: uncomment, update parameter values for listServiceChecks call and complete the assertions
          /*
          var opts = {};

          instance.listServiceChecks(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EntSchemaApi.ServiceChecksList);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listServiceProperties', function() {
        it('should call listServiceProperties successfully', function(done) {
          // TODO: uncomment, update parameter values for listServiceProperties call and complete the assertions
          /*
          var opts = {};

          instance.listServiceProperties(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(EntSchemaApi.ServicePropertiesList);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readService', function() {
        it('should call readService successfully', function(done) {
          // TODO: uncomment, update parameter values for readService call and complete the assertions
          /*

          instance.readService(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EntSchemaApi.ServiceRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('readServiceHosts', function() {
        it('should call readServiceHosts successfully', function(done) {
          // TODO: uncomment, update parameter values for readServiceHosts call and complete the assertions
          /*

          instance.readServiceHosts(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EntSchemaApi.ServiceHostsRead);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateService', function() {
        it('should call updateService successfully', function(done) {
          // TODO: uncomment, update parameter values for updateService call and complete the assertions
          /*

          instance.updateService(body, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(EntSchemaApi.ServiceUpdate);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
