/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Competition} from './Competition';
import {Service} from './Service';
import {Team} from './Team';

/**
 * The Property model module.
 * @module model/Property
 * @version 0.1.0
 */
export class Property {
  /**
   * Constructs a new <code>Property</code>.
   * @alias module:model/Property
   * @class
   * @param id {Number} 
   * @param createTime {Date} 
   * @param updateTime {Date} 
   * @param competitionId {Number} 
   * @param teamId {Number} 
   * @param key {String} 
   * @param value {String} 
   * @param status {module:model/Property.StatusEnum} 
   * @param competition {module:model/Competition} 
   * @param team {module:model/Team} 
   * @param services {module:model/Service} 
   */
  constructor(id, createTime, updateTime, competitionId, teamId, key, value, status, competition, team, services) {
    this.id = id;
    this.createTime = createTime;
    this.updateTime = updateTime;
    this.competitionId = competitionId;
    this.teamId = teamId;
    this.key = key;
    this.value = value;
    this.status = status;
    this.competition = competition;
    this.team = team;
    this.services = services;
  }

  /**
   * Constructs a <code>Property</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Property} obj Optional instance to populate.
   * @return {module:model/Property} The populated <code>Property</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Property();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('create_time'))
        obj.createTime = ApiClient.convertToType(data['create_time'], 'Date');
      if (data.hasOwnProperty('update_time'))
        obj.updateTime = ApiClient.convertToType(data['update_time'], 'Date');
      if (data.hasOwnProperty('competition_id'))
        obj.competitionId = ApiClient.convertToType(data['competition_id'], 'Number');
      if (data.hasOwnProperty('team_id'))
        obj.teamId = ApiClient.convertToType(data['team_id'], 'Number');
      if (data.hasOwnProperty('key'))
        obj.key = ApiClient.convertToType(data['key'], 'String');
      if (data.hasOwnProperty('value'))
        obj.value = ApiClient.convertToType(data['value'], 'String');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('competition'))
        obj.competition = Competition.constructFromObject(data['competition']);
      if (data.hasOwnProperty('team'))
        obj.team = Team.constructFromObject(data['team']);
      if (data.hasOwnProperty('services'))
        obj.services = Service.constructFromObject(data['services']);
    }
    return obj;
  }
}

/**
 * @member {Number} id
 */
Property.prototype.id = undefined;

/**
 * @member {Date} createTime
 */
Property.prototype.createTime = undefined;

/**
 * @member {Date} updateTime
 */
Property.prototype.updateTime = undefined;

/**
 * @member {Number} competitionId
 */
Property.prototype.competitionId = undefined;

/**
 * @member {Number} teamId
 */
Property.prototype.teamId = undefined;

/**
 * @member {String} key
 */
Property.prototype.key = undefined;

/**
 * @member {String} value
 */
Property.prototype.value = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Property.StatusEnum = {
  /**
   * value: "view"
   * @const
   */
  view: "view",

  /**
   * value: "edit"
   * @const
   */
  edit: "edit",

  /**
   * value: "hide"
   * @const
   */
  hide: "hide"
};
/**
 * @member {module:model/Property.StatusEnum} status
 * @default 'view'
 */
Property.prototype.status = 'view';

/**
 * @member {module:model/Competition} competition
 */
Property.prototype.competition = undefined;

/**
 * @member {module:model/Team} team
 */
Property.prototype.team = undefined;

/**
 * @member {module:model/Service} services
 */
Property.prototype.services = undefined;

