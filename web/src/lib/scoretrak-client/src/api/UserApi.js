/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse400} from '../model/InlineResponse400';
import {UserCompetitionsList} from '../model/UserCompetitionsList';
import {UserCreate} from '../model/UserCreate';
import {UserList} from '../model/UserList';
import {UserRead} from '../model/UserRead';
import {UserTeamsList} from '../model/UserTeamsList';
import {UserUpdate} from '../model/UserUpdate';
import {UsersBody} from '../model/UsersBody';
import {UsersIdBody} from '../model/UsersIdBody';

/**
* User service.
* @module api/UserApi
* @version 0.1.0
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback moduleapi/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new User
     * Creates a new User and persists it to storage.
     * @param {module:model/UsersBody} body User to create
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createUser(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCreate;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback moduleapi/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a User by ID
     * Deletes the User with the requested ID.
     * @param {Number} id ID of the User
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listUser operation.
     * @callback moduleapi/UserApi~listUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * List Users.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/UserApi~listUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserList];

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listUserCompetitions operation.
     * @callback moduleapi/UserApi~listUserCompetitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserCompetitionsList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Competitions
     * List attached Competitions.
     * @param {Number} id ID of the User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/UserApi~listUserCompetitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listUserCompetitions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserCompetitions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserCompetitionsList];

      return this.apiClient.callApi(
        '/users/{id}/competitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listUserTeams operation.
     * @callback moduleapi/UserApi~listUserTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserTeamsList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Teams
     * List attached Teams.
     * @param {Number} id ID of the User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/UserApi~listUserTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listUserTeams(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listUserTeams");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserTeamsList];

      return this.apiClient.callApi(
        '/users/{id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readUser operation.
     * @callback moduleapi/UserApi~readUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a User by ID
     * Finds the User with the requested ID and returns it.
     * @param {Number} id ID of the User
     * @param {module:api/UserApi~readUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readUser(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserRead;

      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback moduleapi/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a User
     * Updates a User and persists changes to storage.
     * @param {module:model/UsersIdBody} body User properties to update
     * @param {Number} id ID of the User
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateUser(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateUser");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserUpdate;

      return this.apiClient.callApi(
        '/users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}