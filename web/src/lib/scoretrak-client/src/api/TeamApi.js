/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse400} from '../model/InlineResponse400';
import {TeamCompetitionRead} from '../model/TeamCompetitionRead';
import {TeamCreate} from '../model/TeamCreate';
import {TeamHostsList} from '../model/TeamHostsList';
import {TeamList} from '../model/TeamList';
import {TeamRead} from '../model/TeamRead';
import {TeamUpdate} from '../model/TeamUpdate';
import {TeamUsersList} from '../model/TeamUsersList';
import {TeamsBody} from '../model/TeamsBody';
import {TeamsIdBody} from '../model/TeamsIdBody';

/**
* Team service.
* @module api/TeamApi
* @version 0.1.0
*/
export class TeamApi {

    /**
    * Constructs a new TeamApi. 
    * @alias module:api/TeamApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createTeam operation.
     * @callback moduleapi/TeamApi~createTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Team
     * Creates a new Team and persists it to storage.
     * @param {module:model/TeamsBody} body Team to create
     * @param {module:api/TeamApi~createTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTeam(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTeam");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamCreate;

      return this.apiClient.callApi(
        '/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTeam operation.
     * @callback moduleapi/TeamApi~deleteTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Team by ID
     * Deletes the Team with the requested ID.
     * @param {Number} id ID of the Team
     * @param {module:api/TeamApi~deleteTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTeam(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/teams/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeam operation.
     * @callback moduleapi/TeamApi~listTeamCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Teams
     * List Teams.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/TeamApi~listTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeam(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamList];

      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamHosts operation.
     * @callback moduleapi/TeamApi~listTeamHostsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamHostsList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Hosts
     * List attached Hosts.
     * @param {Number} id ID of the Team
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/TeamApi~listTeamHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamHosts(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamHosts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamHostsList];

      return this.apiClient.callApi(
        '/teams/{id}/hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamUsers operation.
     * @callback moduleapi/TeamApi~listTeamUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TeamUsersList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Users
     * List attached Users.
     * @param {Number} id ID of the Team
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/TeamApi~listTeamUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamUsersList];

      return this.apiClient.callApi(
        '/teams/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readTeam operation.
     * @callback moduleapi/TeamApi~readTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Team by ID
     * Finds the Team with the requested ID and returns it.
     * @param {Number} id ID of the Team
     * @param {module:api/TeamApi~readTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readTeam(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamRead;

      return this.apiClient.callApi(
        '/teams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readTeamCompetition operation.
     * @callback moduleapi/TeamApi~readTeamCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamCompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Competition
     * Find the attached Competition of the Team with the given ID
     * @param {Number} id ID of the Team
     * @param {module:api/TeamApi~readTeamCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readTeamCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readTeamCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamCompetitionRead;

      return this.apiClient.callApi(
        '/teams/{id}/competition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTeam operation.
     * @callback moduleapi/TeamApi~updateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Team
     * Updates a Team and persists changes to storage.
     * @param {module:model/TeamsIdBody} body Team properties to update
     * @param {Number} id ID of the Team
     * @param {module:api/TeamApi~updateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTeam(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTeam");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamUpdate;

      return this.apiClient.callApi(
        '/teams/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}