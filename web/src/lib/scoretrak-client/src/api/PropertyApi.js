/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse400} from '../model/InlineResponse400';
import {PropertiesBody} from '../model/PropertiesBody';
import {PropertiesIdBody} from '../model/PropertiesIdBody';
import {PropertyCompetitionRead} from '../model/PropertyCompetitionRead';
import {PropertyCreate} from '../model/PropertyCreate';
import {PropertyList} from '../model/PropertyList';
import {PropertyRead} from '../model/PropertyRead';
import {PropertyServicesRead} from '../model/PropertyServicesRead';
import {PropertyTeamRead} from '../model/PropertyTeamRead';
import {PropertyUpdate} from '../model/PropertyUpdate';

/**
* Property service.
* @module api/PropertyApi
* @version 0.1.0
*/
export class PropertyApi {

    /**
    * Constructs a new PropertyApi. 
    * @alias module:api/PropertyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createProperty operation.
     * @callback moduleapi/PropertyApi~createPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Property
     * Creates a new Property and persists it to storage.
     * @param {module:model/PropertiesBody} body Property to create
     * @param {module:api/PropertyApi~createPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createProperty(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProperty");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyCreate;

      return this.apiClient.callApi(
        '/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProperty operation.
     * @callback moduleapi/PropertyApi~deletePropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Property by ID
     * Deletes the Property with the requested ID.
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~deletePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProperty(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProperty");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/properties/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listProperty operation.
     * @callback moduleapi/PropertyApi~listPropertyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PropertyList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Properties
     * List Properties.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/PropertyApi~listPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listProperty(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PropertyList];

      return this.apiClient.callApi(
        '/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readProperty operation.
     * @callback moduleapi/PropertyApi~readPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Property by ID
     * Finds the Property with the requested ID and returns it.
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~readPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readProperty(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readProperty");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyRead;

      return this.apiClient.callApi(
        '/properties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPropertyCompetition operation.
     * @callback moduleapi/PropertyApi~readPropertyCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyCompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Competition
     * Find the attached Competition of the Property with the given ID
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~readPropertyCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPropertyCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readPropertyCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyCompetitionRead;

      return this.apiClient.callApi(
        '/properties/{id}/competition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPropertyServices operation.
     * @callback moduleapi/PropertyApi~readPropertyServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyServicesRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Service
     * Find the attached Service of the Property with the given ID
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~readPropertyServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPropertyServices(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readPropertyServices");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyServicesRead;

      return this.apiClient.callApi(
        '/properties/{id}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readPropertyTeam operation.
     * @callback moduleapi/PropertyApi~readPropertyTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyTeamRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Team
     * Find the attached Team of the Property with the given ID
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~readPropertyTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readPropertyTeam(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readPropertyTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyTeamRead;

      return this.apiClient.callApi(
        '/properties/{id}/team', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProperty operation.
     * @callback moduleapi/PropertyApi~updatePropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Property
     * Updates a Property and persists changes to storage.
     * @param {module:model/PropertiesIdBody} body Property properties to update
     * @param {Number} id ID of the Property
     * @param {module:api/PropertyApi~updatePropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateProperty(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProperty");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProperty");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PropertyUpdate;

      return this.apiClient.callApi(
        '/properties/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}