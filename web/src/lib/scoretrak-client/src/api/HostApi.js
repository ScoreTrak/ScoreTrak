/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HostCompetitionRead} from '../model/HostCompetitionRead';
import {HostCreate} from '../model/HostCreate';
import {HostHostGroupRead} from '../model/HostHostGroupRead';
import {HostList} from '../model/HostList';
import {HostRead} from '../model/HostRead';
import {HostServicesList} from '../model/HostServicesList';
import {HostTeamRead} from '../model/HostTeamRead';
import {HostUpdate} from '../model/HostUpdate';
import {HostsBody} from '../model/HostsBody';
import {HostsIdBody} from '../model/HostsIdBody';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Host service.
* @module api/HostApi
* @version 0.1.0
*/
export class HostApi {

    /**
    * Constructs a new HostApi. 
    * @alias module:api/HostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createHost operation.
     * @callback moduleapi/HostApi~createHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Host
     * Creates a new Host and persists it to storage.
     * @param {module:model/HostsBody} body Host to create
     * @param {module:api/HostApi~createHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createHost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createHost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostCreate;

      return this.apiClient.callApi(
        '/hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteHost operation.
     * @callback moduleapi/HostApi~deleteHostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Host by ID
     * Deletes the Host with the requested ID.
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~deleteHostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHost(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/hosts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listHost operation.
     * @callback moduleapi/HostApi~listHostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Hosts
     * List Hosts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/HostApi~listHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listHost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HostList];

      return this.apiClient.callApi(
        '/hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listHostServices operation.
     * @callback moduleapi/HostApi~listHostServicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostServicesList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Services
     * List attached Services.
     * @param {Number} id ID of the Host
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/HostApi~listHostServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listHostServices(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listHostServices");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HostServicesList];

      return this.apiClient.callApi(
        '/hosts/{id}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHost operation.
     * @callback moduleapi/HostApi~readHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Host by ID
     * Finds the Host with the requested ID and returns it.
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~readHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHost(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostRead;

      return this.apiClient.callApi(
        '/hosts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostCompetition operation.
     * @callback moduleapi/HostApi~readHostCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostCompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Competition
     * Find the attached Competition of the Host with the given ID
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~readHostCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostCompetitionRead;

      return this.apiClient.callApi(
        '/hosts/{id}/competition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostHostGroup operation.
     * @callback moduleapi/HostApi~readHostHostGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostHostGroupRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached HostGroup
     * Find the attached HostGroup of the Host with the given ID
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~readHostHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostHostGroup(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostHostGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostHostGroupRead;

      return this.apiClient.callApi(
        '/hosts/{id}/host-group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostTeam operation.
     * @callback moduleapi/HostApi~readHostTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostTeamRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Team
     * Find the attached Team of the Host with the given ID
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~readHostTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostTeam(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostTeamRead;

      return this.apiClient.callApi(
        '/hosts/{id}/team', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHost operation.
     * @callback moduleapi/HostApi~updateHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Host
     * Updates a Host and persists changes to storage.
     * @param {module:model/HostsIdBody} body Host properties to update
     * @param {Number} id ID of the Host
     * @param {module:api/HostApi~updateHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateHost(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateHost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostUpdate;

      return this.apiClient.callApi(
        '/hosts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}