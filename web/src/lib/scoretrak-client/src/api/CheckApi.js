/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CheckCompetitionRead} from '../model/CheckCompetitionRead';
import {CheckCreate} from '../model/CheckCreate';
import {CheckList} from '../model/CheckList';
import {CheckRead} from '../model/CheckRead';
import {CheckRoundsRead} from '../model/CheckRoundsRead';
import {CheckServicesRead} from '../model/CheckServicesRead';
import {CheckUpdate} from '../model/CheckUpdate';
import {ChecksBody} from '../model/ChecksBody';
import {ChecksIdBody} from '../model/ChecksIdBody';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Check service.
* @module api/CheckApi
* @version 0.1.0
*/
export class CheckApi {

    /**
    * Constructs a new CheckApi. 
    * @alias module:api/CheckApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCheck operation.
     * @callback moduleapi/CheckApi~createCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Check
     * Creates a new Check and persists it to storage.
     * @param {module:model/ChecksBody} body Check to create
     * @param {module:api/CheckApi~createCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCheck(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCheck");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckCreate;

      return this.apiClient.callApi(
        '/checks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCheck operation.
     * @callback moduleapi/CheckApi~deleteCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Check by ID
     * Deletes the Check with the requested ID.
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~deleteCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCheck(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheck");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/checks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listCheck operation.
     * @callback moduleapi/CheckApi~listCheckCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CheckList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Checks
     * List Checks.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/CheckApi~listCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CheckList];

      return this.apiClient.callApi(
        '/checks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readCheck operation.
     * @callback moduleapi/CheckApi~readCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Check by ID
     * Finds the Check with the requested ID and returns it.
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~readCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readCheck(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readCheck");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckRead;

      return this.apiClient.callApi(
        '/checks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readCheckCompetition operation.
     * @callback moduleapi/CheckApi~readCheckCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckCompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Competition
     * Find the attached Competition of the Check with the given ID
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~readCheckCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readCheckCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readCheckCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckCompetitionRead;

      return this.apiClient.callApi(
        '/checks/{id}/competition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readCheckRounds operation.
     * @callback moduleapi/CheckApi~readCheckRoundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckRoundsRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Round
     * Find the attached Round of the Check with the given ID
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~readCheckRoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readCheckRounds(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readCheckRounds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckRoundsRead;

      return this.apiClient.callApi(
        '/checks/{id}/rounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readCheckServices operation.
     * @callback moduleapi/CheckApi~readCheckServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckServicesRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Service
     * Find the attached Service of the Check with the given ID
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~readCheckServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readCheckServices(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readCheckServices");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckServicesRead;

      return this.apiClient.callApi(
        '/checks/{id}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCheck operation.
     * @callback moduleapi/CheckApi~updateCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Check
     * Updates a Check and persists changes to storage.
     * @param {module:model/ChecksIdBody} body Check properties to update
     * @param {Number} id ID of the Check
     * @param {module:api/CheckApi~updateCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateCheck(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCheck");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheck");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckUpdate;

      return this.apiClient.callApi(
        '/checks/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}