/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {HostGroupCompetitionRead} from '../model/HostGroupCompetitionRead';
import {HostGroupCreate} from '../model/HostGroupCreate';
import {HostGroupHostsList} from '../model/HostGroupHostsList';
import {HostGroupList} from '../model/HostGroupList';
import {HostGroupRead} from '../model/HostGroupRead';
import {HostGroupTeamRead} from '../model/HostGroupTeamRead';
import {HostGroupUpdate} from '../model/HostGroupUpdate';
import {HostgroupsBody} from '../model/HostgroupsBody';
import {HostgroupsIdBody} from '../model/HostgroupsIdBody';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* HostGroup service.
* @module api/HostGroupApi
* @version 0.1.0
*/
export class HostGroupApi {

    /**
    * Constructs a new HostGroupApi. 
    * @alias module:api/HostGroupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createHostGroup operation.
     * @callback moduleapi/HostGroupApi~createHostGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostGroupCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new HostGroup
     * Creates a new HostGroup and persists it to storage.
     * @param {module:model/HostgroupsBody} body HostGroup to create
     * @param {module:api/HostGroupApi~createHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createHostGroup(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createHostGroup");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostGroupCreate;

      return this.apiClient.callApi(
        '/host-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteHostGroup operation.
     * @callback moduleapi/HostGroupApi~deleteHostGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a HostGroup by ID
     * Deletes the HostGroup with the requested ID.
     * @param {Number} id ID of the HostGroup
     * @param {module:api/HostGroupApi~deleteHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHostGroup(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHostGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/host-groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listHostGroup operation.
     * @callback moduleapi/HostGroupApi~listHostGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostGroupList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List HostGroups
     * List HostGroups.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/HostGroupApi~listHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listHostGroup(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HostGroupList];

      return this.apiClient.callApi(
        '/host-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listHostGroupHosts operation.
     * @callback moduleapi/HostGroupApi~listHostGroupHostsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostGroupHostsList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Hosts
     * List attached Hosts.
     * @param {Number} id ID of the HostGroup
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/HostGroupApi~listHostGroupHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listHostGroupHosts(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listHostGroupHosts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HostGroupHostsList];

      return this.apiClient.callApi(
        '/host-groups/{id}/hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostGroup operation.
     * @callback moduleapi/HostGroupApi~readHostGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostGroupRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a HostGroup by ID
     * Finds the HostGroup with the requested ID and returns it.
     * @param {Number} id ID of the HostGroup
     * @param {module:api/HostGroupApi~readHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostGroup(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostGroupRead;

      return this.apiClient.callApi(
        '/host-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostGroupCompetition operation.
     * @callback moduleapi/HostGroupApi~readHostGroupCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostGroupCompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Competition
     * Find the attached Competition of the HostGroup with the given ID
     * @param {Number} id ID of the HostGroup
     * @param {module:api/HostGroupApi~readHostGroupCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostGroupCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostGroupCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostGroupCompetitionRead;

      return this.apiClient.callApi(
        '/host-groups/{id}/competition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readHostGroupTeam operation.
     * @callback moduleapi/HostGroupApi~readHostGroupTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostGroupTeamRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the attached Team
     * Find the attached Team of the HostGroup with the given ID
     * @param {Number} id ID of the HostGroup
     * @param {module:api/HostGroupApi~readHostGroupTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readHostGroupTeam(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readHostGroupTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HostGroupTeamRead;

      return this.apiClient.callApi(
        '/host-groups/{id}/team', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHostGroup operation.
     * @callback moduleapi/HostGroupApi~updateHostGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostGroupUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a HostGroup
     * Updates a HostGroup and persists changes to storage.
     * @param {module:model/HostgroupsIdBody} body HostGroup properties to update
     * @param {Number} id ID of the HostGroup
     * @param {module:api/HostGroupApi~updateHostGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateHostGroup(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateHostGroup");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHostGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HostGroupUpdate;

      return this.apiClient.callApi(
        '/host-groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}