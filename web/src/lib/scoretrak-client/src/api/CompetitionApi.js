/*
 * Ent Schema API
 * This is an auto generated API description made out of an Ent schema definition
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CompetitionCreate} from '../model/CompetitionCreate';
import {CompetitionList} from '../model/CompetitionList';
import {CompetitionRead} from '../model/CompetitionRead';
import {CompetitionTeamsList} from '../model/CompetitionTeamsList';
import {CompetitionUpdate} from '../model/CompetitionUpdate';
import {CompetitionUsersList} from '../model/CompetitionUsersList';
import {CompetitionsBody} from '../model/CompetitionsBody';
import {CompetitionsIdBody} from '../model/CompetitionsIdBody';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Competition service.
* @module api/CompetitionApi
* @version 0.1.0
*/
export class CompetitionApi {

    /**
    * Constructs a new CompetitionApi. 
    * @alias module:api/CompetitionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createCompetition operation.
     * @callback moduleapi/CompetitionApi~createCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionCreate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Competition
     * Creates a new Competition and persists it to storage.
     * @param {module:model/CompetitionsBody} body Competition to create
     * @param {module:api/CompetitionApi~createCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCompetition(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCompetition");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompetitionCreate;

      return this.apiClient.callApi(
        '/competitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCompetition operation.
     * @callback moduleapi/CompetitionApi~deleteCompetitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Competition by ID
     * Deletes the Competition with the requested ID.
     * @param {Number} id ID of the Competition
     * @param {module:api/CompetitionApi~deleteCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/competitions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listCompetition operation.
     * @callback moduleapi/CompetitionApi~listCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompetitionList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Competitions
     * List Competitions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/CompetitionApi~listCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listCompetition(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompetitionList];

      return this.apiClient.callApi(
        '/competitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listCompetitionTeams operation.
     * @callback moduleapi/CompetitionApi~listCompetitionTeamsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompetitionTeamsList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Teams
     * List attached Teams.
     * @param {Number} id ID of the Competition
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/CompetitionApi~listCompetitionTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listCompetitionTeams(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listCompetitionTeams");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompetitionTeamsList];

      return this.apiClient.callApi(
        '/competitions/{id}/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listCompetitionUsers operation.
     * @callback moduleapi/CompetitionApi~listCompetitionUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CompetitionUsersList>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List attached Users
     * List attached Users.
     * @param {Number} id ID of the Competition
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page what page to render
     * @param {Number} opts.itemsPerPage item count to render per page
     * @param {module:api/CompetitionApi~listCompetitionUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listCompetitionUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listCompetitionUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CompetitionUsersList];

      return this.apiClient.callApi(
        '/competitions/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the readCompetition operation.
     * @callback moduleapi/CompetitionApi~readCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionRead{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Competition by ID
     * Finds the Competition with the requested ID and returns it.
     * @param {Number} id ID of the Competition
     * @param {module:api/CompetitionApi~readCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    readCompetition(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling readCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CompetitionRead;

      return this.apiClient.callApi(
        '/competitions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateCompetition operation.
     * @callback moduleapi/CompetitionApi~updateCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitionUpdate{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Competition
     * Updates a Competition and persists changes to storage.
     * @param {module:model/CompetitionsIdBody} body Competition properties to update
     * @param {Number} id ID of the Competition
     * @param {module:api/CompetitionApi~updateCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateCompetition(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCompetition");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCompetition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompetitionUpdate;

      return this.apiClient.callApi(
        '/competitions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}